/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 1707.0, "series": [{"data": [[0.0, 7.0], [0.1, 159.0], [0.2, 244.0], [0.3, 326.0], [0.4, 369.0], [0.5, 392.0], [0.6, 405.0], [0.7, 421.0], [0.8, 439.0], [0.9, 453.0], [1.0, 457.0], [1.1, 460.0], [1.2, 462.0], [1.3, 463.0], [1.4, 464.0], [1.5, 464.0], [1.6, 465.0], [1.7, 466.0], [1.8, 466.0], [1.9, 467.0], [2.0, 467.0], [2.1, 468.0], [2.2, 468.0], [2.3, 468.0], [2.4, 469.0], [2.5, 469.0], [2.6, 469.0], [2.7, 469.0], [2.8, 470.0], [2.9, 470.0], [3.0, 470.0], [3.1, 471.0], [3.2, 471.0], [3.3, 471.0], [3.4, 471.0], [3.5, 472.0], [3.6, 472.0], [3.7, 472.0], [3.8, 472.0], [3.9, 472.0], [4.0, 473.0], [4.1, 473.0], [4.2, 473.0], [4.3, 473.0], [4.4, 474.0], [4.5, 474.0], [4.6, 474.0], [4.7, 474.0], [4.8, 474.0], [4.9, 475.0], [5.0, 475.0], [5.1, 475.0], [5.2, 475.0], [5.3, 475.0], [5.4, 476.0], [5.5, 476.0], [5.6, 476.0], [5.7, 476.0], [5.8, 476.0], [5.9, 477.0], [6.0, 477.0], [6.1, 477.0], [6.2, 477.0], [6.3, 477.0], [6.4, 477.0], [6.5, 478.0], [6.6, 478.0], [6.7, 478.0], [6.8, 478.0], [6.9, 478.0], [7.0, 478.0], [7.1, 478.0], [7.2, 479.0], [7.3, 479.0], [7.4, 479.0], [7.5, 479.0], [7.6, 479.0], [7.7, 479.0], [7.8, 479.0], [7.9, 480.0], [8.0, 480.0], [8.1, 480.0], [8.2, 480.0], [8.3, 480.0], [8.4, 480.0], [8.5, 480.0], [8.6, 481.0], [8.7, 481.0], [8.8, 481.0], [8.9, 481.0], [9.0, 481.0], [9.1, 481.0], [9.2, 481.0], [9.3, 481.0], [9.4, 482.0], [9.5, 482.0], [9.6, 482.0], [9.7, 482.0], [9.8, 482.0], [9.9, 482.0], [10.0, 482.0], [10.1, 482.0], [10.2, 482.0], [10.3, 482.0], [10.4, 483.0], [10.5, 483.0], [10.6, 483.0], [10.7, 483.0], [10.8, 483.0], [10.9, 483.0], [11.0, 483.0], [11.1, 483.0], [11.2, 483.0], [11.3, 483.0], [11.4, 484.0], [11.5, 484.0], [11.6, 484.0], [11.7, 484.0], [11.8, 484.0], [11.9, 484.0], [12.0, 484.0], [12.1, 484.0], [12.2, 484.0], [12.3, 485.0], [12.4, 485.0], [12.5, 485.0], [12.6, 485.0], [12.7, 485.0], [12.8, 485.0], [12.9, 485.0], [13.0, 485.0], [13.1, 485.0], [13.2, 486.0], [13.3, 486.0], [13.4, 486.0], [13.5, 486.0], [13.6, 486.0], [13.7, 486.0], [13.8, 486.0], [13.9, 486.0], [14.0, 486.0], [14.1, 487.0], [14.2, 487.0], [14.3, 487.0], [14.4, 487.0], [14.5, 487.0], [14.6, 487.0], [14.7, 487.0], [14.8, 487.0], [14.9, 487.0], [15.0, 488.0], [15.1, 488.0], [15.2, 488.0], [15.3, 488.0], [15.4, 488.0], [15.5, 488.0], [15.6, 488.0], [15.7, 488.0], [15.8, 489.0], [15.9, 489.0], [16.0, 489.0], [16.1, 489.0], [16.2, 489.0], [16.3, 489.0], [16.4, 489.0], [16.5, 489.0], [16.6, 490.0], [16.7, 490.0], [16.8, 490.0], [16.9, 490.0], [17.0, 490.0], [17.1, 490.0], [17.2, 490.0], [17.3, 490.0], [17.4, 491.0], [17.5, 491.0], [17.6, 491.0], [17.7, 491.0], [17.8, 491.0], [17.9, 491.0], [18.0, 491.0], [18.1, 491.0], [18.2, 492.0], [18.3, 492.0], [18.4, 492.0], [18.5, 492.0], [18.6, 492.0], [18.7, 492.0], [18.8, 492.0], [18.9, 492.0], [19.0, 493.0], [19.1, 493.0], [19.2, 493.0], [19.3, 493.0], [19.4, 493.0], [19.5, 493.0], [19.6, 493.0], [19.7, 494.0], [19.8, 494.0], [19.9, 494.0], [20.0, 494.0], [20.1, 494.0], [20.2, 494.0], [20.3, 494.0], [20.4, 495.0], [20.5, 495.0], [20.6, 495.0], [20.7, 495.0], [20.8, 495.0], [20.9, 495.0], [21.0, 495.0], [21.1, 496.0], [21.2, 496.0], [21.3, 496.0], [21.4, 496.0], [21.5, 496.0], [21.6, 496.0], [21.7, 496.0], [21.8, 497.0], [21.9, 497.0], [22.0, 497.0], [22.1, 497.0], [22.2, 497.0], [22.3, 497.0], [22.4, 497.0], [22.5, 498.0], [22.6, 498.0], [22.7, 498.0], [22.8, 498.0], [22.9, 498.0], [23.0, 498.0], [23.1, 498.0], [23.2, 499.0], [23.3, 499.0], [23.4, 499.0], [23.5, 499.0], [23.6, 499.0], [23.7, 499.0], [23.8, 500.0], [23.9, 500.0], [24.0, 500.0], [24.1, 500.0], [24.2, 500.0], [24.3, 500.0], [24.4, 500.0], [24.5, 501.0], [24.6, 501.0], [24.7, 501.0], [24.8, 501.0], [24.9, 501.0], [25.0, 501.0], [25.1, 501.0], [25.2, 501.0], [25.3, 502.0], [25.4, 502.0], [25.5, 502.0], [25.6, 502.0], [25.7, 502.0], [25.8, 502.0], [25.9, 502.0], [26.0, 502.0], [26.1, 503.0], [26.2, 503.0], [26.3, 503.0], [26.4, 503.0], [26.5, 503.0], [26.6, 503.0], [26.7, 503.0], [26.8, 503.0], [26.9, 504.0], [27.0, 504.0], [27.1, 504.0], [27.2, 504.0], [27.3, 504.0], [27.4, 504.0], [27.5, 504.0], [27.6, 504.0], [27.7, 504.0], [27.8, 505.0], [27.9, 505.0], [28.0, 505.0], [28.1, 505.0], [28.2, 505.0], [28.3, 505.0], [28.4, 505.0], [28.5, 505.0], [28.6, 506.0], [28.7, 506.0], [28.8, 506.0], [28.9, 506.0], [29.0, 506.0], [29.1, 506.0], [29.2, 506.0], [29.3, 507.0], [29.4, 507.0], [29.5, 507.0], [29.6, 507.0], [29.7, 507.0], [29.8, 507.0], [29.9, 507.0], [30.0, 508.0], [30.1, 508.0], [30.2, 508.0], [30.3, 508.0], [30.4, 508.0], [30.5, 508.0], [30.6, 508.0], [30.7, 509.0], [30.8, 509.0], [30.9, 509.0], [31.0, 509.0], [31.1, 509.0], [31.2, 509.0], [31.3, 509.0], [31.4, 509.0], [31.5, 510.0], [31.6, 510.0], [31.7, 510.0], [31.8, 510.0], [31.9, 510.0], [32.0, 510.0], [32.1, 510.0], [32.2, 510.0], [32.3, 510.0], [32.4, 511.0], [32.5, 511.0], [32.6, 511.0], [32.7, 511.0], [32.8, 511.0], [32.9, 511.0], [33.0, 511.0], [33.1, 511.0], [33.2, 511.0], [33.3, 511.0], [33.4, 512.0], [33.5, 512.0], [33.6, 512.0], [33.7, 512.0], [33.8, 512.0], [33.9, 512.0], [34.0, 512.0], [34.1, 512.0], [34.2, 512.0], [34.3, 512.0], [34.4, 512.0], [34.5, 513.0], [34.6, 513.0], [34.7, 513.0], [34.8, 513.0], [34.9, 513.0], [35.0, 513.0], [35.1, 513.0], [35.2, 513.0], [35.3, 513.0], [35.4, 513.0], [35.5, 513.0], [35.6, 514.0], [35.7, 514.0], [35.8, 514.0], [35.9, 514.0], [36.0, 514.0], [36.1, 514.0], [36.2, 514.0], [36.3, 514.0], [36.4, 514.0], [36.5, 514.0], [36.6, 514.0], [36.7, 514.0], [36.8, 515.0], [36.9, 515.0], [37.0, 515.0], [37.1, 515.0], [37.2, 515.0], [37.3, 515.0], [37.4, 515.0], [37.5, 515.0], [37.6, 515.0], [37.7, 515.0], [37.8, 515.0], [37.9, 515.0], [38.0, 515.0], [38.1, 516.0], [38.2, 516.0], [38.3, 516.0], [38.4, 516.0], [38.5, 516.0], [38.6, 516.0], [38.7, 516.0], [38.8, 516.0], [38.9, 516.0], [39.0, 516.0], [39.1, 516.0], [39.2, 516.0], [39.3, 516.0], [39.4, 517.0], [39.5, 517.0], [39.6, 517.0], [39.7, 517.0], [39.8, 517.0], [39.9, 517.0], [40.0, 517.0], [40.1, 517.0], [40.2, 517.0], [40.3, 517.0], [40.4, 517.0], [40.5, 517.0], [40.6, 518.0], [40.7, 518.0], [40.8, 518.0], [40.9, 518.0], [41.0, 518.0], [41.1, 518.0], [41.2, 518.0], [41.3, 518.0], [41.4, 518.0], [41.5, 518.0], [41.6, 518.0], [41.7, 518.0], [41.8, 518.0], [41.9, 518.0], [42.0, 519.0], [42.1, 519.0], [42.2, 519.0], [42.3, 519.0], [42.4, 519.0], [42.5, 519.0], [42.6, 519.0], [42.7, 519.0], [42.8, 519.0], [42.9, 519.0], [43.0, 519.0], [43.1, 519.0], [43.2, 519.0], [43.3, 519.0], [43.4, 520.0], [43.5, 520.0], [43.6, 520.0], [43.7, 520.0], [43.8, 520.0], [43.9, 520.0], [44.0, 520.0], [44.1, 520.0], [44.2, 520.0], [44.3, 520.0], [44.4, 520.0], [44.5, 520.0], [44.6, 520.0], [44.7, 520.0], [44.8, 520.0], [44.9, 521.0], [45.0, 521.0], [45.1, 521.0], [45.2, 521.0], [45.3, 521.0], [45.4, 521.0], [45.5, 521.0], [45.6, 521.0], [45.7, 521.0], [45.8, 521.0], [45.9, 521.0], [46.0, 521.0], [46.1, 521.0], [46.2, 521.0], [46.3, 521.0], [46.4, 522.0], [46.5, 522.0], [46.6, 522.0], [46.7, 522.0], [46.8, 522.0], [46.9, 522.0], [47.0, 522.0], [47.1, 522.0], [47.2, 522.0], [47.3, 522.0], [47.4, 522.0], [47.5, 522.0], [47.6, 522.0], [47.7, 522.0], [47.8, 522.0], [47.9, 523.0], [48.0, 523.0], [48.1, 523.0], [48.2, 523.0], [48.3, 523.0], [48.4, 523.0], [48.5, 523.0], [48.6, 523.0], [48.7, 523.0], [48.8, 523.0], [48.9, 523.0], [49.0, 523.0], [49.1, 523.0], [49.2, 523.0], [49.3, 523.0], [49.4, 524.0], [49.5, 524.0], [49.6, 524.0], [49.7, 524.0], [49.8, 524.0], [49.9, 524.0], [50.0, 524.0], [50.1, 524.0], [50.2, 524.0], [50.3, 524.0], [50.4, 524.0], [50.5, 524.0], [50.6, 524.0], [50.7, 524.0], [50.8, 524.0], [50.9, 525.0], [51.0, 525.0], [51.1, 525.0], [51.2, 525.0], [51.3, 525.0], [51.4, 525.0], [51.5, 525.0], [51.6, 525.0], [51.7, 525.0], [51.8, 525.0], [51.9, 525.0], [52.0, 525.0], [52.1, 525.0], [52.2, 525.0], [52.3, 525.0], [52.4, 526.0], [52.5, 526.0], [52.6, 526.0], [52.7, 526.0], [52.8, 526.0], [52.9, 526.0], [53.0, 526.0], [53.1, 526.0], [53.2, 526.0], [53.3, 526.0], [53.4, 526.0], [53.5, 526.0], [53.6, 526.0], [53.7, 526.0], [53.8, 526.0], [53.9, 526.0], [54.0, 527.0], [54.1, 527.0], [54.2, 527.0], [54.3, 527.0], [54.4, 527.0], [54.5, 527.0], [54.6, 527.0], [54.7, 527.0], [54.8, 527.0], [54.9, 527.0], [55.0, 527.0], [55.1, 527.0], [55.2, 527.0], [55.3, 527.0], [55.4, 527.0], [55.5, 528.0], [55.6, 528.0], [55.7, 528.0], [55.8, 528.0], [55.9, 528.0], [56.0, 528.0], [56.1, 528.0], [56.2, 528.0], [56.3, 528.0], [56.4, 528.0], [56.5, 528.0], [56.6, 528.0], [56.7, 528.0], [56.8, 528.0], [56.9, 528.0], [57.0, 529.0], [57.1, 529.0], [57.2, 529.0], [57.3, 529.0], [57.4, 529.0], [57.5, 529.0], [57.6, 529.0], [57.7, 529.0], [57.8, 529.0], [57.9, 529.0], [58.0, 529.0], [58.1, 529.0], [58.2, 529.0], [58.3, 529.0], [58.4, 530.0], [58.5, 530.0], [58.6, 530.0], [58.7, 530.0], [58.8, 530.0], [58.9, 530.0], [59.0, 530.0], [59.1, 530.0], [59.2, 530.0], [59.3, 530.0], [59.4, 530.0], [59.5, 530.0], [59.6, 530.0], [59.7, 530.0], [59.8, 530.0], [59.9, 531.0], [60.0, 531.0], [60.1, 531.0], [60.2, 531.0], [60.3, 531.0], [60.4, 531.0], [60.5, 531.0], [60.6, 531.0], [60.7, 531.0], [60.8, 531.0], [60.9, 531.0], [61.0, 531.0], [61.1, 531.0], [61.2, 531.0], [61.3, 532.0], [61.4, 532.0], [61.5, 532.0], [61.6, 532.0], [61.7, 532.0], [61.8, 532.0], [61.9, 532.0], [62.0, 532.0], [62.1, 532.0], [62.2, 532.0], [62.3, 532.0], [62.4, 532.0], [62.5, 532.0], [62.6, 533.0], [62.7, 533.0], [62.8, 533.0], [62.9, 533.0], [63.0, 533.0], [63.1, 533.0], [63.2, 533.0], [63.3, 533.0], [63.4, 533.0], [63.5, 533.0], [63.6, 533.0], [63.7, 533.0], [63.8, 533.0], [63.9, 534.0], [64.0, 534.0], [64.1, 534.0], [64.2, 534.0], [64.3, 534.0], [64.4, 534.0], [64.5, 534.0], [64.6, 534.0], [64.7, 534.0], [64.8, 534.0], [64.9, 534.0], [65.0, 534.0], [65.1, 534.0], [65.2, 534.0], [65.3, 535.0], [65.4, 535.0], [65.5, 535.0], [65.6, 535.0], [65.7, 535.0], [65.8, 535.0], [65.9, 535.0], [66.0, 535.0], [66.1, 535.0], [66.2, 535.0], [66.3, 535.0], [66.4, 535.0], [66.5, 536.0], [66.6, 536.0], [66.7, 536.0], [66.8, 536.0], [66.9, 536.0], [67.0, 536.0], [67.1, 536.0], [67.2, 536.0], [67.3, 536.0], [67.4, 536.0], [67.5, 536.0], [67.6, 537.0], [67.7, 537.0], [67.8, 537.0], [67.9, 537.0], [68.0, 537.0], [68.1, 537.0], [68.2, 537.0], [68.3, 537.0], [68.4, 537.0], [68.5, 537.0], [68.6, 537.0], [68.7, 538.0], [68.8, 538.0], [68.9, 538.0], [69.0, 538.0], [69.1, 538.0], [69.2, 538.0], [69.3, 538.0], [69.4, 538.0], [69.5, 538.0], [69.6, 538.0], [69.7, 538.0], [69.8, 539.0], [69.9, 539.0], [70.0, 539.0], [70.1, 539.0], [70.2, 539.0], [70.3, 539.0], [70.4, 539.0], [70.5, 539.0], [70.6, 539.0], [70.7, 539.0], [70.8, 540.0], [70.9, 540.0], [71.0, 540.0], [71.1, 540.0], [71.2, 540.0], [71.3, 540.0], [71.4, 540.0], [71.5, 540.0], [71.6, 540.0], [71.7, 540.0], [71.8, 541.0], [71.9, 541.0], [72.0, 541.0], [72.1, 541.0], [72.2, 541.0], [72.3, 541.0], [72.4, 541.0], [72.5, 541.0], [72.6, 541.0], [72.7, 541.0], [72.8, 542.0], [72.9, 542.0], [73.0, 542.0], [73.1, 542.0], [73.2, 542.0], [73.3, 542.0], [73.4, 542.0], [73.5, 542.0], [73.6, 542.0], [73.7, 543.0], [73.8, 543.0], [73.9, 543.0], [74.0, 543.0], [74.1, 543.0], [74.2, 543.0], [74.3, 543.0], [74.4, 543.0], [74.5, 544.0], [74.6, 544.0], [74.7, 544.0], [74.8, 544.0], [74.9, 544.0], [75.0, 544.0], [75.1, 545.0], [75.2, 545.0], [75.3, 545.0], [75.4, 545.0], [75.5, 545.0], [75.6, 545.0], [75.7, 545.0], [75.8, 546.0], [75.9, 546.0], [76.0, 546.0], [76.1, 546.0], [76.2, 546.0], [76.3, 546.0], [76.4, 546.0], [76.5, 547.0], [76.6, 547.0], [76.7, 547.0], [76.8, 547.0], [76.9, 547.0], [77.0, 547.0], [77.1, 547.0], [77.2, 548.0], [77.3, 548.0], [77.4, 548.0], [77.5, 548.0], [77.6, 548.0], [77.7, 548.0], [77.8, 549.0], [77.9, 549.0], [78.0, 549.0], [78.1, 549.0], [78.2, 549.0], [78.3, 549.0], [78.4, 550.0], [78.5, 550.0], [78.6, 550.0], [78.7, 550.0], [78.8, 550.0], [78.9, 551.0], [79.0, 551.0], [79.1, 551.0], [79.2, 551.0], [79.3, 551.0], [79.4, 552.0], [79.5, 552.0], [79.6, 552.0], [79.7, 552.0], [79.8, 552.0], [79.9, 553.0], [80.0, 553.0], [80.1, 553.0], [80.2, 553.0], [80.3, 554.0], [80.4, 554.0], [80.5, 554.0], [80.6, 555.0], [80.7, 555.0], [80.8, 555.0], [80.9, 555.0], [81.0, 556.0], [81.1, 556.0], [81.2, 556.0], [81.3, 557.0], [81.4, 557.0], [81.5, 557.0], [81.6, 557.0], [81.7, 558.0], [81.8, 558.0], [81.9, 558.0], [82.0, 559.0], [82.1, 559.0], [82.2, 559.0], [82.3, 559.0], [82.4, 560.0], [82.5, 560.0], [82.6, 560.0], [82.7, 561.0], [82.8, 561.0], [82.9, 561.0], [83.0, 562.0], [83.1, 562.0], [83.2, 562.0], [83.3, 563.0], [83.4, 563.0], [83.5, 563.0], [83.6, 564.0], [83.7, 564.0], [83.8, 564.0], [83.9, 565.0], [84.0, 565.0], [84.1, 565.0], [84.2, 566.0], [84.3, 566.0], [84.4, 566.0], [84.5, 567.0], [84.6, 567.0], [84.7, 567.0], [84.8, 568.0], [84.9, 568.0], [85.0, 569.0], [85.1, 569.0], [85.2, 569.0], [85.3, 570.0], [85.4, 570.0], [85.5, 571.0], [85.6, 571.0], [85.7, 571.0], [85.8, 572.0], [85.9, 572.0], [86.0, 573.0], [86.1, 573.0], [86.2, 573.0], [86.3, 574.0], [86.4, 574.0], [86.5, 575.0], [86.6, 575.0], [86.7, 576.0], [86.8, 576.0], [86.9, 577.0], [87.0, 577.0], [87.1, 577.0], [87.2, 578.0], [87.3, 578.0], [87.4, 578.0], [87.5, 579.0], [87.6, 579.0], [87.7, 580.0], [87.8, 580.0], [87.9, 580.0], [88.0, 581.0], [88.1, 581.0], [88.2, 582.0], [88.3, 582.0], [88.4, 582.0], [88.5, 583.0], [88.6, 583.0], [88.7, 584.0], [88.8, 584.0], [88.9, 585.0], [89.0, 585.0], [89.1, 586.0], [89.2, 586.0], [89.3, 586.0], [89.4, 587.0], [89.5, 587.0], [89.6, 588.0], [89.7, 588.0], [89.8, 589.0], [89.9, 589.0], [90.0, 590.0], [90.1, 590.0], [90.2, 591.0], [90.3, 591.0], [90.4, 592.0], [90.5, 592.0], [90.6, 593.0], [90.7, 593.0], [90.8, 593.0], [90.9, 594.0], [91.0, 595.0], [91.1, 595.0], [91.2, 595.0], [91.3, 596.0], [91.4, 596.0], [91.5, 597.0], [91.6, 597.0], [91.7, 598.0], [91.8, 598.0], [91.9, 598.0], [92.0, 599.0], [92.1, 599.0], [92.2, 600.0], [92.3, 600.0], [92.4, 601.0], [92.5, 601.0], [92.6, 601.0], [92.7, 602.0], [92.8, 602.0], [92.9, 603.0], [93.0, 603.0], [93.1, 603.0], [93.2, 604.0], [93.3, 604.0], [93.4, 605.0], [93.5, 605.0], [93.6, 606.0], [93.7, 606.0], [93.8, 607.0], [93.9, 607.0], [94.0, 608.0], [94.1, 608.0], [94.2, 609.0], [94.3, 610.0], [94.4, 610.0], [94.5, 611.0], [94.6, 611.0], [94.7, 612.0], [94.8, 612.0], [94.9, 613.0], [95.0, 614.0], [95.1, 614.0], [95.2, 615.0], [95.3, 615.0], [95.4, 616.0], [95.5, 616.0], [95.6, 617.0], [95.7, 617.0], [95.8, 618.0], [95.9, 618.0], [96.0, 619.0], [96.1, 620.0], [96.2, 621.0], [96.3, 622.0], [96.4, 622.0], [96.5, 623.0], [96.6, 623.0], [96.7, 624.0], [96.8, 625.0], [96.9, 625.0], [97.0, 626.0], [97.1, 627.0], [97.2, 628.0], [97.3, 628.0], [97.4, 629.0], [97.5, 630.0], [97.6, 631.0], [97.7, 631.0], [97.8, 633.0], [97.9, 634.0], [98.0, 636.0], [98.1, 637.0], [98.2, 638.0], [98.3, 640.0], [98.4, 642.0], [98.5, 644.0], [98.6, 645.0], [98.7, 646.0], [98.8, 648.0], [98.9, 650.0], [99.0, 652.0], [99.1, 654.0], [99.2, 656.0], [99.3, 657.0], [99.4, 660.0], [99.5, 669.0], [99.6, 684.0], [99.7, 698.0], [99.8, 721.0], [99.9, 748.0], [100.0, 1707.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 683568.0, "series": [{"data": [[0.0, 365.0], [600.0, 75940.0], [700.0, 2495.0], [800.0, 79.0], [200.0, 1170.0], [900.0, 131.0], [1000.0, 149.0], [1100.0, 13.0], [1200.0, 2.0], [300.0, 2937.0], [1600.0, 4.0], [400.0, 232004.0], [100.0, 1140.0], [1700.0, 3.0], [500.0, 683568.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 755476.0, "series": [{"data": [[0.0, 244517.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 755476.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1959.4428962215877, "minX": 1.58558502E12, "maxY": 2000.0, "series": [{"data": [[1.58558502E12, 1959.4428962215877], [1.58558514E12, 2000.0], [1.58558508E12, 2000.0], [1.58558526E12, 1974.1313258363728], [1.5855852E12, 2000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558526E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.0, "minX": 2.0, "maxY": 1075.0000000000002, "series": [{"data": [[2.0, 7.0], [3.0, 11.0], [4.0, 13.0], [5.0, 17.0], [7.0, 22.0], [9.0, 26.0], [11.0, 26.0], [14.0, 26.2], [19.0, 30.333333333333332], [20.0, 30.5], [23.0, 30.0], [24.0, 31.0], [35.0, 34.0], [37.0, 34.0], [36.0, 34.0], [39.0, 34.5], [38.0, 34.0], [41.0, 34.0], [40.0, 34.0], [42.0, 35.0], [44.0, 34.57142857142857], [47.0, 35.0], [49.0, 38.0], [53.0, 38.0], [54.0, 38.0], [59.0, 42.0], [61.0, 42.0], [63.0, 40.5], [62.0, 42.5], [67.0, 41.0], [64.0, 42.0], [69.0, 42.0], [68.0, 41.0], [74.0, 46.0], [79.0, 46.0], [78.0, 46.0], [76.0, 46.0], [82.0, 46.0], [81.0, 46.0], [87.0, 45.25], [85.0, 46.0], [88.0, 45.0], [94.0, 51.0], [99.0, 51.0], [98.0, 51.0], [96.0, 51.0], [103.0, 52.0], [102.0, 51.0], [101.0, 51.333333333333336], [100.0, 51.0], [106.0, 54.0], [111.0, 54.0], [109.0, 54.0], [108.0, 54.0], [115.0, 54.0], [113.0, 54.0], [112.0, 54.0], [119.0, 59.0], [122.0, 59.5], [121.0, 59.5], [120.0, 59.0], [127.0, 59.0], [126.0, 58.0], [124.0, 59.0], [135.0, 62.0], [134.0, 59.5], [131.0, 59.0], [130.0, 59.0], [142.0, 62.0], [141.0, 62.0], [139.0, 62.0], [138.0, 62.0], [137.0, 62.0], [151.0, 67.5], [149.0, 67.0], [148.0, 67.0], [147.0, 67.0], [158.0, 73.0], [156.0, 73.0], [155.0, 73.0], [167.0, 77.0], [165.0, 72.0], [164.0, 73.0], [163.0, 73.0], [161.0, 73.0], [160.0, 73.0], [175.0, 77.0], [172.0, 77.0], [170.0, 77.0], [169.0, 77.0], [168.0, 77.0], [183.0, 78.0], [182.0, 78.0], [179.0, 77.5], [178.0, 77.25], [176.0, 77.0], [190.0, 77.0], [189.0, 77.0], [188.0, 77.0], [187.0, 77.0], [186.0, 77.0], [196.0, 74.0], [192.0, 74.75], [207.0, 81.0], [206.0, 81.2], [205.0, 82.0], [203.0, 82.0], [202.0, 82.0], [200.0, 80.5], [215.0, 82.14285714285715], [213.0, 80.0], [208.0, 81.4], [223.0, 85.0], [221.0, 87.0], [220.0, 87.0], [219.0, 85.0], [218.0, 82.0], [231.0, 86.5], [230.0, 86.0], [229.0, 88.0], [228.0, 86.6], [227.0, 86.5], [226.0, 86.5], [224.0, 87.0], [239.0, 86.0], [238.0, 86.33333333333333], [237.0, 86.0], [236.0, 86.0], [235.0, 86.0], [234.0, 86.0], [233.0, 86.0], [247.0, 83.0], [246.0, 83.0], [255.0, 93.0], [254.0, 92.75], [252.0, 93.0], [251.0, 92.66666666666667], [250.0, 90.66666666666667], [248.0, 83.0], [270.0, 98.25], [271.0, 98.0], [269.0, 98.0], [268.0, 88.0], [267.0, 88.0], [266.0, 88.0], [265.0, 88.0], [261.0, 92.33333333333333], [258.0, 93.0], [260.0, 93.0], [286.0, 103.0], [287.0, 103.0], [285.0, 103.0], [284.0, 103.0], [283.0, 98.0], [282.0, 93.0], [281.0, 93.0], [279.0, 93.0], [272.0, 98.5], [275.0, 98.0], [274.0, 98.6], [277.0, 93.0], [276.0, 98.0], [302.0, 97.0], [300.0, 97.0], [299.0, 97.0], [297.0, 96.0], [295.0, 102.0], [292.0, 102.25], [290.0, 102.75], [289.0, 104.0], [318.0, 114.0], [319.0, 114.2], [317.0, 109.28571428571429], [316.0, 102.0], [314.0, 107.0], [313.0, 107.6], [312.0, 108.0], [311.0, 108.0], [305.0, 108.0], [310.0, 108.0], [309.0, 108.0], [308.0, 108.0], [335.0, 107.0], [333.0, 107.0], [330.0, 107.0], [328.0, 107.0], [321.0, 114.0], [320.0, 114.0], [339.0, 107.5], [350.0, 113.0], [349.0, 113.0], [346.0, 118.87499999999999], [345.0, 119.0], [344.0, 119.0], [342.0, 119.5], [341.0, 116.75], [337.0, 108.6], [336.0, 107.42857142857143], [366.0, 119.0], [367.0, 119.0], [364.0, 126.0], [355.0, 114.0], [354.0, 114.0], [363.0, 126.375], [362.0, 126.5], [361.0, 127.0], [360.0, 127.0], [358.0, 126.0], [357.0, 120.0], [356.0, 118.0], [380.0, 124.0], [382.0, 124.0], [383.0, 124.0], [381.0, 124.0], [379.0, 124.0], [378.0, 124.0], [375.0, 130.57142857142858], [373.0, 126.0], [371.0, 119.0], [370.0, 119.0], [399.0, 127.0], [395.0, 127.0], [393.0, 127.0], [392.0, 127.0], [390.0, 127.0], [384.0, 124.0], [389.0, 131.0], [388.0, 126.66666666666667], [386.0, 124.33333333333334], [385.0, 124.0], [413.0, 139.66666666666666], [415.0, 139.0], [412.0, 139.0], [411.0, 131.5], [409.0, 127.0], [408.0, 127.0], [404.0, 127.0], [402.0, 128.0], [401.0, 127.66666666666666], [400.0, 127.0], [430.0, 132.0], [428.0, 132.0], [427.0, 132.0], [425.0, 138.0], [424.0, 138.66666666666666], [422.0, 139.42857142857142], [419.0, 139.66666666666666], [418.0, 139.0], [417.0, 139.0], [446.0, 137.33333333333334], [447.0, 140.5], [445.0, 136.0], [435.0, 133.0], [434.0, 132.0], [433.0, 132.0], [432.0, 132.0], [443.0, 136.5], [442.0, 136.0], [440.0, 133.25], [439.0, 133.8], [438.0, 132.5], [436.0, 132.0], [460.0, 137.0], [462.0, 136.0], [463.0, 136.0], [461.0, 137.0], [459.0, 137.0], [457.0, 136.83333333333334], [455.0, 137.0], [449.0, 140.5], [448.0, 138.0], [451.0, 141.0], [450.0, 143.08333333333331], [453.0, 137.75], [452.0, 140.1111111111111], [477.0, 150.0], [469.0, 255.4], [468.0, 150.0], [474.0, 219.57142857142858], [479.0, 150.33333333333334], [478.0, 150.5], [476.0, 152.0], [467.0, 136.0], [466.0, 136.0], [465.0, 139.8181818181818], [472.0, 150.0], [471.0, 150.16666666666666], [470.0, 150.25], [483.0, 226.14285714285714], [481.0, 607.0], [480.0, 150.5], [495.0, 141.33333333333334], [494.0, 141.45454545454547], [493.0, 141.33333333333331], [489.0, 141.125], [486.0, 140.7142857142857], [485.0, 142.0], [484.0, 141.5], [510.0, 145.0], [511.0, 145.0], [508.0, 145.0], [499.0, 145.5], [498.0, 145.2], [497.0, 142.85714285714286], [496.0, 141.0], [507.0, 145.0], [506.0, 145.0], [505.0, 145.0], [503.0, 144.2], [502.0, 144.33333333333334], [500.0, 144.0], [540.0, 154.0], [538.0, 154.0], [530.0, 412.35714285714283], [528.0, 153.0], [532.0, 153.0], [542.0, 154.0], [518.0, 150.7], [516.0, 150.0], [514.0, 145.25], [526.0, 153.0], [524.0, 151.375], [522.0, 152.0], [520.0, 151.0], [534.0, 154.0], [574.0, 169.5], [566.0, 743.2857142857142], [568.0, 819.5], [548.0, 158.625], [558.0, 158.88888888888889], [556.0, 159.0], [560.0, 159.0], [562.0, 164.41666666666669], [572.0, 170.11111111111111], [570.0, 170.33333333333334], [602.0, 309.3636363636364], [594.0, 175.0], [596.0, 174.22222222222223], [604.0, 179.625], [600.0, 179.66666666666666], [580.0, 170.0], [578.0, 169.0], [576.0, 170.0], [590.0, 175.0], [588.0, 174.5], [584.0, 174.8], [598.0, 174.0], [632.0, 380.375], [628.0, 185.0], [624.0, 185.0], [630.0, 958.4545454545454], [614.0, 184.75], [610.0, 181.83333333333331], [608.0, 179.9090909090909], [620.0, 184.83333333333334], [618.0, 185.66666666666666], [634.0, 489.12499999999994], [636.0, 192.1153846153846], [638.0, 189.33333333333334], [642.0, 188.66666666666666], [664.0, 192.2], [668.0, 1036.142857142857], [666.0, 754.5], [640.0, 189.66666666666669], [644.0, 189.0], [646.0, 191.8], [652.0, 192.0], [650.0, 199.55555555555554], [648.0, 201.5], [670.0, 965.769230769231], [656.0, 192.0], [660.0, 191.83333333333334], [674.0, 1029.235294117647], [672.0, 931.0625000000002], [686.0, 198.66666666666669], [684.0, 199.83333333333334], [682.0, 588.625], [676.0, 742.3333333333333], [678.0, 572.5], [698.0, 208.0], [700.0, 207.33333333333334], [702.0, 207.0], [688.0, 199.0], [690.0, 199.55555555555554], [694.0, 199.7142857142857], [680.0, 813.4687500000001], [728.0, 215.0], [734.0, 213.5], [720.0, 207.0], [722.0, 213.5], [732.0, 214.0], [706.0, 207.25], [704.0, 206.0], [710.0, 207.25], [718.0, 207.0], [716.0, 207.0], [714.0, 208.0], [712.0, 207.14285714285714], [726.0, 214.0], [724.0, 214.0], [764.0, 224.8666666666667], [766.0, 225.0], [754.0, 219.0], [756.0, 219.16666666666666], [762.0, 225.16666666666666], [760.0, 225.0], [740.0, 214.0], [738.0, 214.0], [736.0, 213.0], [746.0, 219.0], [744.0, 219.16666666666666], [758.0, 223.0], [774.0, 939.357142857143], [772.0, 873.0], [770.0, 231.0], [768.0, 230.8], [782.0, 753.6], [780.0, 805.3500000000001], [792.0, 237.0], [794.0, 644.6666666666666], [784.0, 642.0952380952381], [786.0, 519.0], [788.0, 296.9444444444444], [790.0, 672.1333333333333], [776.0, 670.7826086956522], [778.0, 1016.625], [814.0, 770.6666666666666], [808.0, 745.8888888888889], [810.0, 452.2], [812.0, 767.75], [830.0, 259.0], [816.0, 253.0], [818.0, 252.88888888888889], [820.0, 252.28571428571428], [822.0, 252.0], [828.0, 253.0], [826.0, 252.57142857142858], [824.0, 253.00000000000003], [800.0, 245.5], [802.0, 245.3], [804.0, 245.33333333333337], [806.0, 246.0], [834.0, 458.7096774193549], [860.0, 720.9000000000001], [832.0, 259.0384615384616], [836.0, 552.7499999999999], [838.0, 569.3000000000001], [856.0, 265.3571428571428], [840.0, 259.1111111111111], [842.0, 259.7142857142857], [844.0, 266.72727272727275], [846.0, 266.4285714285714], [858.0, 423.6666666666667], [862.0, 562.6923076923077], [848.0, 263.0], [850.0, 262.25], [852.0, 261.0], [854.0, 263.93749999999994], [888.0, 690.9166666666667], [886.0, 566.3846153846154], [870.0, 262.75], [868.0, 263.1538461538462], [878.0, 262.6666666666667], [874.0, 262.25], [872.0, 263.3333333333333], [894.0, 244.25], [884.0, 262.83333333333337], [880.0, 263.0], [922.0, 429.5625], [916.0, 669.6363636363636], [914.0, 283.0], [918.0, 584.6923076923076], [920.0, 282.8181818181818], [902.0, 244.375], [898.0, 243.8], [896.0, 244.0], [910.0, 283.0], [908.0, 245.0], [906.0, 244.85714285714286], [904.0, 244.72727272727272], [926.0, 283.0], [924.0, 282.79999999999995], [954.0, 276.2857142857143], [942.0, 646.1538461538461], [940.0, 291.4], [938.0, 291.0], [936.0, 264.0], [944.0, 605.88], [946.0, 551.5454545454545], [948.0, 515.6666666666667], [950.0, 291.70000000000005], [956.0, 274.0], [952.0, 273.0], [934.0, 264.0], [930.0, 265.0], [928.0, 279.6], [974.0, 455.8947368421051], [968.0, 577.0909090909092], [970.0, 555.25], [972.0, 549.6857142857141], [976.0, 551.6428571428571], [990.0, 311.0], [988.0, 363.83333333333337], [986.0, 311.0], [984.0, 310.0], [966.0, 301.0], [962.0, 301.0], [960.0, 290.75], [978.0, 580.1250000000001], [980.0, 406.55555555555554], [982.0, 310.0], [996.0, 842.7407407407406], [994.0, 315.0], [998.0, 499.75], [1000.0, 389.25], [1002.0, 315.25], [1004.0, 316.0], [1006.0, 316.0], [1020.0, 455.2], [1018.0, 326.0], [1010.0, 316.0], [1008.0, 316.125], [1012.0, 316.3333333333333], [1014.0, 312.0], [1022.0, 325.0], [1028.0, 325.6666666666667], [1036.0, 326.0], [1076.0, 531.8518518518518], [1072.0, 628.5454545454545], [1048.0, 326.8], [1052.0, 478.62499999999994], [1024.0, 325.4], [1032.0, 326.0], [1056.0, 304.0], [1084.0, 338.5], [1080.0, 577.9411764705883], [1140.0, 356.5], [1100.0, 619.8235294117648], [1144.0, 615.1875], [1096.0, 351.125], [1092.0, 350.75], [1088.0, 351.4], [1136.0, 357.0], [1148.0, 354.6666666666667], [1120.0, 499.75000000000006], [1128.0, 539.4782608695652], [1124.0, 356.0], [1132.0, 597.3333333333334], [1104.0, 472.7142857142857], [1116.0, 356.0], [1112.0, 351.3333333333333], [1164.0, 364.3333333333333], [1160.0, 547.2], [1152.0, 600.0], [1156.0, 336.6], [1180.0, 585.0], [1200.0, 391.16666666666663], [1208.0, 366.0], [1212.0, 483.28125000000006], [1184.0, 576.0], [1192.0, 538.9444444444446], [1188.0, 366.0], [1196.0, 365.93750000000006], [1176.0, 444.00000000000006], [1172.0, 364.0], [1228.0, 500.12000000000006], [1220.0, 480.88888888888886], [1216.0, 368.0], [1224.0, 367.25], [1248.0, 428.0], [1272.0, 397.0], [1276.0, 397.0], [1268.0, 384.68181818181813], [1264.0, 386.9333333333334], [1260.0, 397.0], [1256.0, 398.0], [1252.0, 384.75], [1232.0, 447.91666666666663], [1236.0, 384.1], [1240.0, 384.4], [1244.0, 433.0263157894736], [1328.0, 415.6], [1284.0, 391.45454545454544], [1288.0, 406.2], [1292.0, 405.7142857142857], [1280.0, 392.8947368421053], [1304.0, 412.0], [1332.0, 368.72727272727275], [1312.0, 389.79999999999995], [1340.0, 401.83333333333337], [1316.0, 393.57142857142856], [1320.0, 414.6666666666667], [1324.0, 415.0], [1296.0, 387.88888888888874], [1300.0, 405.7142857142857], [1344.0, 429.0], [1396.0, 419.3870967741936], [1348.0, 379.0], [1352.0, 430.0], [1356.0, 430.0], [1392.0, 435.0], [1364.0, 376.8666666666667], [1360.0, 429.5], [1372.0, 399.6666666666667], [1368.0, 398.2857142857143], [1400.0, 414.53333333333336], [1404.0, 434.0], [1388.0, 434.5], [1380.0, 398.125], [1376.0, 398.16666666666663], [1412.0, 435.0], [1416.0, 398.1818181818182], [1408.0, 434.5], [1436.0, 440.3333333333333], [1432.0, 398.3870967741934], [1428.0, 439.0], [1420.0, 398.4230769230769], [1464.0, 399.45454545454544], [1444.0, 440.2], [1448.0, 380.2432432432433], [1452.0, 385.3333333333333], [1424.0, 416.258064516129], [1476.0, 445.6666666666667], [1480.0, 381.6666666666667], [1500.0, 411.5714285714285], [1496.0, 378.5], [1492.0, 445.5], [1488.0, 445.6666666666667], [1484.0, 444.94736842105266], [1520.0, 420.0], [1524.0, 463.5], [1528.0, 451.6666666666667], [1532.0, 406.45454545454555], [1508.0, 421.2857142857143], [1504.0, 420.53846153846155], [1512.0, 397.69387755102053], [1540.0, 448.6666666666667], [1536.0, 432.3888888888889], [1544.0, 449.6666666666667], [1548.0, 477.0], [1564.0, 422.0], [1560.0, 430.0], [1552.0, 404.0], [1568.0, 421.0], [1596.0, 422.4], [1592.0, 420.6], [1588.0, 378.7631578947368], [1572.0, 378.8684210526316], [1576.0, 383.0], [1580.0, 421.875], [1612.0, 421.23076923076917], [1624.0, 401.06666666666666], [1648.0, 420.5], [1660.0, 420.8], [1656.0, 421.07692307692304], [1652.0, 423.0], [1616.0, 419.6666666666667], [1600.0, 419.75], [1604.0, 424.0], [1608.0, 421.75], [1628.0, 420.3333333333333], [1632.0, 417.9230769230769], [1636.0, 420.0], [1644.0, 421.24999999999994], [1668.0, 431.4583333333333], [1664.0, 426.3472222222222], [1688.0, 496.0], [1692.0, 496.0], [1700.0, 483.46153846153845], [1696.0, 495.16666666666663], [1724.0, 460.9454545454546], [1720.0, 504.0], [1716.0, 502.0], [1712.0, 500.6666666666667], [1676.0, 497.14285714285717], [1672.0, 421.0], [1704.0, 448.6], [1708.0, 459.21428571428567], [1684.0, 496.42857142857144], [1732.0, 506.0], [1784.0, 470.87234042553183], [1728.0, 452.5], [1740.0, 502.0], [1780.0, 473.0], [1788.0, 465.375], [1760.0, 512.9000000000001], [1744.0, 449.03773584905656], [1752.0, 507.2307692307693], [1756.0, 513.0], [1764.0, 465.33333333333337], [1772.0, 473.3333333333333], [1768.0, 473.0], [1844.0, 475.08333333333337], [1808.0, 473.77941176470586], [1812.0, 462.78571428571433], [1824.0, 507.49999999999994], [1852.0, 488.0], [1848.0, 489.89473684210526], [1840.0, 515.2083333333334], [1800.0, 519.0], [1796.0, 519.0], [1792.0, 519.8], [1820.0, 490.25], [1816.0, 481.0], [1828.0, 504.4838709677419], [1836.0, 522.0], [1860.0, 486.6176470588236], [1856.0, 518.0], [1884.0, 468.25000000000006], [1872.0, 510.5], [1876.0, 537.0], [1864.0, 504.1818181818182], [1868.0, 535.75], [1904.0, 484.49999999999994], [1908.0, 499.0], [1916.0, 501.61538461538464], [1912.0, 500.0], [1888.0, 469.29999999999995], [1892.0, 499.6], [1928.0, 474.4473684210526], [1932.0, 460.78260869565213], [1924.0, 499.16666666666663], [1920.0, 503.0], [1948.0, 529.7101449275362], [1940.0, 616.0500000000001], [1936.0, 665.0], [1952.0, 559.8360655737705], [1960.0, 508.8333333333333], [1964.0, 546.8235294117649], [1976.0, 553.7142857142857], [1972.0, 556.1428571428571], [1968.0, 508.6206896551724], [1988.0, 517.4074074074074], [1996.0, 501.04761904761915], [2000.0, 529.7147541950224], [1984.0, 529.4374999999999], [1992.0, 540.694610778443], [1025.0, 325.6666666666667], [1049.0, 327.0], [1045.0, 326.0], [1041.0, 326.0], [1033.0, 326.0], [1037.0, 326.6666666666667], [1069.0, 338.0], [1065.0, 337.72727272727275], [1057.0, 304.0], [1085.0, 374.0], [1081.0, 534.6428571428572], [1077.0, 544.1], [1073.0, 534.7142857142856], [1101.0, 453.2], [1145.0, 539.2222222222222], [1097.0, 350.6666666666667], [1141.0, 355.6], [1125.0, 356.0], [1129.0, 380.1], [1133.0, 356.875], [1113.0, 352.0], [1109.0, 351.5], [1105.0, 352.0], [1165.0, 362.9090909090909], [1161.0, 478.55555555555566], [1157.0, 337.5], [1153.0, 337.0], [1181.0, 458.50000000000006], [1201.0, 489.5], [1205.0, 367.16666666666663], [1209.0, 530.0285714285715], [1213.0, 480.4545454545455], [1185.0, 574.4444444444445], [1193.0, 534.258064516129], [1189.0, 366.3333333333333], [1197.0, 531.7142857142857], [1177.0, 576.7], [1169.0, 365.0], [1273.0, 396.3333333333333], [1217.0, 440.91999999999996], [1229.0, 485.8181818181818], [1225.0, 368.0], [1221.0, 368.0], [1249.0, 385.0], [1253.0, 385.0], [1257.0, 397.8181818181818], [1277.0, 399.75000000000006], [1269.0, 383.77272727272725], [1265.0, 382.6923076923077], [1261.0, 420.074074074074], [1233.0, 474.00000000000006], [1237.0, 384.2857142857143], [1241.0, 383.6666666666667], [1245.0, 425.26666666666665], [1289.0, 405.125], [1281.0, 387.45], [1301.0, 380.80000000000007], [1309.0, 383.0], [1305.0, 413.0], [1285.0, 386.2941176470588], [1329.0, 393.83333333333337], [1293.0, 407.0], [1333.0, 381.0], [1313.0, 385.7894736842106], [1321.0, 415.0], [1325.0, 414.9], [1297.0, 375.46666666666664], [1353.0, 429.5], [1397.0, 408.41025641025624], [1349.0, 381.6842105263158], [1357.0, 429.0], [1393.0, 434.90000000000003], [1365.0, 386.0250000000001], [1361.0, 429.0], [1345.0, 430.0], [1373.0, 398.75], [1401.0, 401.2608695652174], [1405.0, 434.3333333333333], [1377.0, 398.0], [1381.0, 408.0], [1385.0, 398.8], [1389.0, 434.0], [1417.0, 384.57142857142844], [1413.0, 410.125], [1409.0, 435.0], [1437.0, 430.875], [1433.0, 440.7272727272727], [1429.0, 439.06666666666666], [1421.0, 407.078947368421], [1461.0, 401.6666666666667], [1465.0, 415.13043478260875], [1469.0, 445.0], [1449.0, 390.45454545454544], [1425.0, 403.6315789473685], [1481.0, 406.6363636363636], [1477.0, 411.0], [1473.0, 445.62500000000006], [1501.0, 405.06451612903226], [1497.0, 403.0], [1493.0, 396.9200000000001], [1485.0, 406.87499999999994], [1521.0, 420.0], [1525.0, 450.0], [1529.0, 451.5], [1533.0, 410.7894736842106], [1509.0, 422.0], [1505.0, 420.6666666666667], [1513.0, 405.25], [1517.0, 421.0], [1541.0, 449.0], [1589.0, 390.8684210526317], [1549.0, 420.21739130434787], [1537.0, 448.5], [1545.0, 449.45454545454544], [1565.0, 422.5], [1561.0, 424.0], [1553.0, 467.4999999999999], [1557.0, 412.0], [1569.0, 411.46153846153845], [1597.0, 427.0], [1593.0, 421.5], [1573.0, 369.92592592592587], [1581.0, 444.7142857142857], [1613.0, 420.625], [1609.0, 406.0], [1649.0, 422.6666666666667], [1661.0, 420.4], [1657.0, 421.0], [1653.0, 422.0], [1621.0, 413.0], [1617.0, 421.0], [1625.0, 407.0], [1601.0, 418.0], [1629.0, 421.0], [1633.0, 433.09090909090907], [1637.0, 420.5], [1641.0, 420.5], [1645.0, 418.90476190476187], [1677.0, 496.25], [1717.0, 500.0], [1665.0, 428.99999999999994], [1689.0, 496.3333333333333], [1693.0, 495.2], [1669.0, 421.4], [1697.0, 494.59999999999997], [1725.0, 466.2307692307692], [1721.0, 502.9], [1713.0, 500.0], [1673.0, 420.8125], [1701.0, 451.9249999999999], [1705.0, 446.59999999999997], [1709.0, 496.06666666666666], [1681.0, 448.3181818181818], [1685.0, 463.0], [1777.0, 472.8], [1729.0, 503.0], [1733.0, 506.59999999999997], [1737.0, 502.09999999999997], [1781.0, 473.55555555555554], [1785.0, 476.07142857142867], [1789.0, 489.0], [1761.0, 511.1818181818182], [1745.0, 465.48148148148147], [1753.0, 511.25], [1757.0, 510.5], [1765.0, 472.0], [1773.0, 472.16666666666663], [1845.0, 487.0], [1841.0, 471.17647058823536], [1809.0, 474.75675675675666], [1813.0, 458.24], [1825.0, 515.1428571428572], [1853.0, 487.5], [1849.0, 487.5], [1801.0, 520.2142857142857], [1797.0, 519.8], [1793.0, 519.0], [1817.0, 488.2], [1837.0, 522.25], [1833.0, 523.0], [1829.0, 523.6], [1857.0, 536.5454545454545], [1869.0, 476.0], [1885.0, 481.875], [1873.0, 536.0], [1877.0, 539.75], [1881.0, 474.9444444444444], [1861.0, 472.38095238095235], [1865.0, 450.77272727272714], [1905.0, 477.5445544554454], [1909.0, 489.6400000000001], [1917.0, 508.0], [1901.0, 499.0], [1897.0, 500.6666666666667], [1889.0, 539.7500000000001], [1925.0, 488.1052631578948], [1921.0, 504.40000000000003], [1949.0, 513.25], [1945.0, 608.1578947368422], [1941.0, 615.3333333333334], [1937.0, 635.7346938775511], [1929.0, 526.4615384615385], [1933.0, 512.516129032258], [1953.0, 547.9354838709678], [1957.0, 518.0909090909091], [1961.0, 509.7142857142857], [1965.0, 541.3958333333333], [1981.0, 543.9285714285716], [1977.0, 553.3599999999999], [1973.0, 553.2], [1969.0, 498.04545454545445], [1997.0, 512.6419294990719], [1985.0, 519.4666666666667], [1989.0, 538.1739130434783], [1993.0, 505.6617647058824], [541.0, 154.0], [543.0, 154.0], [531.0, 153.5], [533.0, 153.71428571428572], [537.0, 154.0], [519.0, 151.0], [517.0, 150.0], [515.0, 150.0], [513.0, 145.0], [525.0, 151.0], [523.0, 151.83333333333334], [521.0, 151.16666666666666], [535.0, 154.0], [545.0, 158.5], [565.0, 825.5], [567.0, 164.0], [551.0, 158.0], [559.0, 159.0], [557.0, 159.0], [555.0, 159.0], [553.0, 159.2], [575.0, 169.0], [561.0, 161.22222222222223], [563.0, 164.8], [571.0, 170.0], [569.0, 164.0], [601.0, 180.0], [605.0, 179.0], [607.0, 179.66666666666666], [593.0, 175.0], [595.0, 175.0], [603.0, 180.0], [583.0, 170.66666666666666], [581.0, 170.0], [579.0, 169.83333333333334], [577.0, 170.0], [591.0, 175.0], [589.0, 175.11111111111111], [587.0, 174.85714285714286], [599.0, 174.5], [615.0, 185.8], [635.0, 393.75000000000006], [629.0, 699.2777777777778], [627.0, 185.0], [631.0, 963.8333333333334], [613.0, 184.8], [609.0, 180.0], [623.0, 185.0], [621.0, 184.66666666666666], [619.0, 184.5], [617.0, 186.0], [633.0, 451.6666666666667], [637.0, 590.5], [639.0, 189.0], [643.0, 189.0], [655.0, 603.0], [645.0, 189.0], [653.0, 192.5], [651.0, 192.0], [649.0, 204.0], [667.0, 951.5], [669.0, 699.2], [671.0, 431.0], [657.0, 192.33333333333334], [659.0, 192.3], [663.0, 191.74999999999997], [661.0, 191.0], [665.0, 194.0], [677.0, 428.0], [673.0, 606.6999999999999], [687.0, 199.07142857142856], [685.0, 199.5], [683.0, 347.6], [675.0, 564.625], [679.0, 192.0], [699.0, 207.71428571428572], [689.0, 199.5], [693.0, 200.0], [695.0, 208.0], [701.0, 206.0], [681.0, 999.8333333333333], [731.0, 213.625], [735.0, 213.0], [721.0, 207.0], [723.0, 213.8], [729.0, 214.0], [719.0, 207.0], [709.0, 207.0], [707.0, 207.0], [711.0, 207.0], [717.0, 207.0], [715.0, 207.66666666666666], [727.0, 213.33333333333334], [725.0, 214.0], [761.0, 225.63636363636363], [767.0, 225.2857142857143], [753.0, 218.66666666666666], [755.0, 219.0], [757.0, 219.75], [765.0, 225.0], [743.0, 216.88], [741.0, 214.0], [739.0, 214.0], [737.0, 213.79999999999995], [751.0, 219.37500000000003], [749.0, 219.2857142857143], [747.0, 219.0], [759.0, 225.0], [773.0, 1075.0000000000002], [779.0, 443.2], [771.0, 746.1], [769.0, 231.66666666666666], [783.0, 702.4090909090911], [781.0, 884.0000000000001], [775.0, 466.9], [793.0, 236.0], [799.0, 245.21428571428572], [797.0, 244.5], [795.0, 243.8], [785.0, 744.375], [787.0, 569.8000000000001], [789.0, 507.5], [791.0, 794.5], [777.0, 702.4736842105262], [827.0, 252.625], [811.0, 698.75], [809.0, 717.9375], [813.0, 247.83333333333334], [817.0, 253.0], [819.0, 253.0], [821.0, 252.5], [823.0, 252.5], [829.0, 253.0], [825.0, 253.0], [815.0, 253.33333333333334], [801.0, 245.0], [803.0, 246.0], [805.0, 245.0], [807.0, 245.2], [835.0, 503.22222222222223], [837.0, 701.3333333333334], [833.0, 259.0], [839.0, 259.0], [841.0, 597.5], [843.0, 261.0], [845.0, 267.0], [859.0, 516.1052631578947], [861.0, 551.25], [863.0, 330.61538461538464], [851.0, 261.0], [853.0, 265.0], [855.0, 263.8], [871.0, 264.0], [895.0, 243.0], [885.0, 611.8888888888888], [887.0, 520.0], [869.0, 262.50000000000006], [867.0, 263.0], [879.0, 263.6666666666667], [877.0, 264.5], [875.0, 263.85714285714283], [873.0, 263.0], [889.0, 462.0], [891.0, 244.11111111111111], [883.0, 264.0], [881.0, 263.0], [913.0, 283.0], [927.0, 283.0], [915.0, 626.2222222222222], [917.0, 647.1875], [919.0, 634.8461538461537], [921.0, 283.0], [899.0, 245.0], [905.0, 244.42857142857142], [923.0, 466.5], [925.0, 283.1666666666667], [957.0, 270.0], [959.0, 300.6666666666667], [943.0, 622.2727272727273], [941.0, 290.8333333333333], [939.0, 291.0], [937.0, 274.6], [945.0, 628.5454545454545], [947.0, 455.0], [949.0, 291.3125], [951.0, 291.0], [955.0, 285.5], [953.0, 302.0], [935.0, 264.0], [933.0, 264.0], [931.0, 264.6666666666667], [929.0, 265.0], [975.0, 543.5652173913045], [971.0, 605.1333333333333], [969.0, 584.6111111111109], [973.0, 602.3333333333334], [977.0, 310.875], [991.0, 311.5263157894737], [985.0, 310.0], [967.0, 301.0], [965.0, 301.0], [963.0, 301.25], [961.0, 300.8666666666667], [989.0, 587.5], [979.0, 605.375], [981.0, 612.0], [983.0, 310.0], [995.0, 315.0], [999.0, 390.125], [993.0, 315.0], [997.0, 378.57142857142856], [1001.0, 315.0], [1003.0, 316.0], [1005.0, 316.0], [1019.0, 326.0], [1017.0, 319.6], [1023.0, 325.0], [1011.0, 316.3333333333333], [1013.0, 316.0], [1021.0, 326.0], [1026.0, 326.0], [1078.0, 592.8333333333333], [1050.0, 526.4399999999999], [1046.0, 326.6], [1042.0, 326.0], [1054.0, 303.4], [1030.0, 326.0], [1038.0, 326.0], [1086.0, 580.3684210526314], [1066.0, 338.0], [1062.0, 304.0], [1058.0, 315.33333333333337], [1082.0, 542.9999999999999], [1074.0, 592.6818181818184], [1102.0, 440.55555555555554], [1098.0, 537.8888888888889], [1094.0, 350.6666666666667], [1090.0, 350.0], [1138.0, 356.2857142857143], [1146.0, 526.1538461538461], [1150.0, 344.2], [1126.0, 356.4], [1122.0, 355.6], [1130.0, 356.2], [1134.0, 357.0], [1106.0, 406.0], [1118.0, 631.3333333333334], [1114.0, 352.75], [1110.0, 351.0], [1162.0, 453.0526315789473], [1154.0, 339.0], [1158.0, 337.0], [1182.0, 478.04999999999995], [1166.0, 361.7272727272727], [1210.0, 517.6333333333333], [1206.0, 366.9166666666667], [1202.0, 367.0], [1214.0, 484.0], [1190.0, 364.0], [1186.0, 364.3333333333333], [1194.0, 437.0666666666667], [1198.0, 440.5], [1174.0, 364.2], [1178.0, 481.99999999999994], [1270.0, 394.0], [1230.0, 452.4285714285715], [1246.0, 411.33333333333337], [1226.0, 368.0], [1222.0, 368.0], [1278.0, 396.8888888888889], [1274.0, 397.2941176470588], [1266.0, 383.9696969696969], [1250.0, 430.6], [1262.0, 403.65714285714284], [1258.0, 397.0], [1254.0, 385.0], [1234.0, 383.5], [1238.0, 384.2857142857143], [1290.0, 406.0], [1334.0, 353.25], [1286.0, 396.5], [1294.0, 405.4], [1302.0, 399.57142857142856], [1310.0, 415.0], [1306.0, 410.5555555555556], [1282.0, 375.87499999999994], [1330.0, 367.76363636363646], [1342.0, 431.0], [1338.0, 387.5], [1314.0, 362.625], [1318.0, 414.0], [1322.0, 414.0], [1326.0, 415.0], [1298.0, 406.0], [1354.0, 429.0], [1350.0, 390.125], [1358.0, 429.85714285714283], [1394.0, 434.0], [1362.0, 429.6], [1366.0, 378.063829787234], [1346.0, 430.0], [1370.0, 398.2], [1398.0, 400.0000000000001], [1402.0, 413.2941176470588], [1390.0, 435.0], [1386.0, 434.3333333333333], [1378.0, 398.3333333333333], [1410.0, 435.0], [1414.0, 405.2241379310345], [1438.0, 418.35714285714283], [1434.0, 406.8], [1426.0, 413.66666666666663], [1430.0, 441.0], [1418.0, 401.0], [1422.0, 401.875], [1462.0, 402.8387096774194], [1466.0, 412.26315789473676], [1470.0, 426.55555555555554], [1442.0, 440.3333333333333], [1446.0, 402.2413793103448], [1478.0, 404.83333333333326], [1474.0, 446.0], [1502.0, 421.0], [1498.0, 402.5], [1490.0, 445.4], [1494.0, 402.5], [1482.0, 406.625], [1486.0, 439.2], [1522.0, 421.0], [1530.0, 407.2962962962963], [1510.0, 420.75], [1506.0, 421.0], [1514.0, 403.36666666666673], [1518.0, 411.66666666666663], [1550.0, 405.5833333333333], [1546.0, 450.5], [1538.0, 448.5], [1542.0, 449.42857142857144], [1566.0, 425.0], [1554.0, 411.22222222222223], [1598.0, 420.6666666666667], [1590.0, 363.57692307692304], [1594.0, 412.8181818181818], [1586.0, 422.6], [1570.0, 408.7272727272727], [1574.0, 379.7446808510639], [1578.0, 423.28571428571433], [1582.0, 422.0], [1606.0, 420.5], [1614.0, 421.0], [1650.0, 445.4516129032259], [1610.0, 404.3571428571429], [1662.0, 433.3448275862069], [1622.0, 412.6216216216216], [1626.0, 420.0], [1602.0, 424.6], [1630.0, 420.0], [1634.0, 421.0], [1642.0, 441.2307692307692], [1646.0, 425.79166666666663], [1718.0, 503.0], [1670.0, 420.0], [1694.0, 496.0], [1666.0, 429.71428571428567], [1698.0, 495.6666666666667], [1726.0, 482.5], [1722.0, 468.741935483871], [1714.0, 501.90000000000003], [1678.0, 497.0], [1674.0, 499.0], [1702.0, 481.42857142857144], [1706.0, 453.6666666666667], [1710.0, 497.0], [1682.0, 436.94339622641496], [1738.0, 502.4], [1742.0, 469.6], [1750.0, 460.75], [1730.0, 503.0], [1734.0, 506.8], [1778.0, 473.0], [1782.0, 472.0], [1786.0, 450.2777777777778], [1790.0, 448.391304347826], [1746.0, 453.625], [1758.0, 511.84615384615387], [1762.0, 458.0], [1766.0, 504.42857142857144], [1774.0, 488.3333333333333], [1770.0, 478.8888888888889], [1802.0, 524.0], [1810.0, 470.63636363636374], [1826.0, 514.909090909091], [1846.0, 487.8333333333333], [1842.0, 459.03999999999996], [1794.0, 520.5], [1822.0, 481.0], [1818.0, 484.09999999999997], [1814.0, 480.0], [1834.0, 523.6666666666666], [1830.0, 525.25], [1858.0, 536.0], [1862.0, 466.21153846153834], [1886.0, 540.25], [1882.0, 474.81818181818187], [1874.0, 539.0], [1878.0, 539.8461538461538], [1866.0, 474.58333333333337], [1906.0, 477.5555555555555], [1910.0, 489.75], [1918.0, 502.0], [1914.0, 502.1666666666667], [1902.0, 499.5], [1894.0, 500.0], [1890.0, 538.8181818181818], [1926.0, 484.22580645161287], [1922.0, 509.3333333333333], [1950.0, 610.6999999999999], [1946.0, 483.483870967742], [1942.0, 577.8181818181819], [1938.0, 616.0], [1930.0, 480.030303030303], [1934.0, 548.8571428571428], [1954.0, 540.4], [1958.0, 545.7142857142858], [1962.0, 509.25], [1966.0, 554.6666666666666], [1982.0, 503.75], [1978.0, 553.0], [1974.0, 553.6363636363636], [1970.0, 533.9387755102041], [1994.0, 510.51219512195127], [1986.0, 503.3333333333333], [1990.0, 524.181818181818], [1998.0, 517.5227272727271], [1035.0, 326.0], [1079.0, 591.7777777777778], [1051.0, 553.0500000000001], [1043.0, 326.0], [1055.0, 303.6666666666667], [1039.0, 325.83333333333337], [1071.0, 537.5], [1067.0, 338.2], [1063.0, 338.1111111111111], [1059.0, 329.5], [1083.0, 510.99999999999994], [1087.0, 339.0], [1075.0, 579.0], [1103.0, 351.16666666666663], [1099.0, 537.7499999999998], [1095.0, 350.6], [1091.0, 350.5], [1143.0, 615.1818181818181], [1147.0, 512.3809523809524], [1123.0, 355.6666666666667], [1127.0, 595.4285714285713], [1131.0, 519.4999999999999], [1135.0, 357.5], [1119.0, 619.8928571428572], [1115.0, 357.44444444444446], [1111.0, 351.0], [1107.0, 352.0], [1163.0, 356.0], [1159.0, 425.0], [1179.0, 471.44444444444446], [1183.0, 501.0], [1167.0, 363.16666666666663], [1203.0, 367.0], [1207.0, 366.3333333333333], [1211.0, 473.29032258064507], [1215.0, 493.42307692307696], [1191.0, 365.5], [1187.0, 364.62500000000006], [1195.0, 459.6666666666667], [1199.0, 403.0], [1171.0, 364.0], [1223.0, 368.22222222222223], [1231.0, 414.40000000000003], [1247.0, 403.14285714285717], [1219.0, 368.14285714285717], [1279.0, 394.66666666666674], [1251.0, 385.0], [1259.0, 396.83333333333337], [1275.0, 397.0], [1267.0, 387.9545454545455], [1263.0, 382.96875], [1235.0, 383.0], [1243.0, 385.0], [1283.0, 371.0], [1311.0, 414.53846153846155], [1307.0, 383.0], [1303.0, 406.0], [1295.0, 406.0], [1291.0, 405.77777777777777], [1331.0, 353.8], [1335.0, 388.22222222222223], [1343.0, 430.0], [1339.0, 387.5], [1315.0, 365.3636363636364], [1323.0, 373.0], [1327.0, 415.5714285714286], [1299.0, 406.0], [1351.0, 429.0], [1347.0, 373.9795918367347], [1359.0, 429.6666666666667], [1395.0, 434.3333333333333], [1363.0, 429.5], [1367.0, 386.2], [1375.0, 398.5], [1399.0, 435.0], [1383.0, 414.75], [1387.0, 427.09999999999997], [1391.0, 434.3333333333333], [1403.0, 434.5], [1411.0, 435.0], [1415.0, 404.84615384615387], [1439.0, 441.3333333333333], [1435.0, 413.49999999999994], [1427.0, 403.75000000000006], [1431.0, 405.5], [1419.0, 401.0], [1423.0, 401.0], [1463.0, 392.4545454545455], [1467.0, 418.24999999999994], [1471.0, 446.6666666666667], [1443.0, 440.5], [1447.0, 415.59999999999997], [1451.0, 406.1698113207547], [1483.0, 445.875], [1479.0, 395.4411764705883], [1475.0, 445.0], [1503.0, 420.42857142857144], [1495.0, 383.77272727272725], [1491.0, 445.6666666666667], [1487.0, 407.4545454545455], [1523.0, 431.8], [1527.0, 482.8], [1531.0, 403.8965517241379], [1535.0, 413.99999999999994], [1511.0, 420.3333333333333], [1507.0, 422.0], [1515.0, 421.0], [1519.0, 450.0], [1543.0, 449.5], [1539.0, 449.5], [1547.0, 452.0], [1567.0, 422.25], [1563.0, 419.75], [1551.0, 403.1818181818183], [1559.0, 415.0], [1599.0, 423.0], [1595.0, 420.6], [1591.0, 423.5], [1587.0, 423.6666666666667], [1571.0, 392.04], [1575.0, 425.0], [1583.0, 422.4], [1631.0, 420.0], [1655.0, 420.7142857142857], [1659.0, 421.0], [1651.0, 420.99999999999994], [1663.0, 430.8235294117647], [1619.0, 421.75], [1623.0, 407.6052631578947], [1627.0, 414.1153846153845], [1603.0, 419.6666666666667], [1607.0, 424.0], [1635.0, 422.00000000000006], [1639.0, 420.0], [1643.0, 429.2926829268293], [1667.0, 417.5714285714286], [1715.0, 501.0], [1687.0, 448.6666666666667], [1691.0, 496.0], [1695.0, 495.4285714285714], [1699.0, 495.0], [1727.0, 503.0], [1719.0, 501.3333333333333], [1679.0, 497.0], [1675.0, 497.0], [1671.0, 421.0], [1723.0, 457.1315789473684], [1703.0, 462.59459459459464], [1707.0, 494.0], [1683.0, 437.6071428571429], [1779.0, 472.0], [1731.0, 507.7272727272727], [1739.0, 502.5], [1743.0, 472.92187499999994], [1783.0, 479.77777777777777], [1787.0, 471.69230769230774], [1791.0, 451.6666666666667], [1747.0, 514.0], [1755.0, 512.0], [1763.0, 466.50000000000006], [1767.0, 496.47058823529414], [1775.0, 472.0], [1771.0, 497.5], [1847.0, 487.2307692307692], [1799.0, 519.0], [1811.0, 466.17499999999995], [1827.0, 520.5625000000001], [1855.0, 487.0], [1851.0, 488.0], [1807.0, 521.5714285714284], [1803.0, 521.5454545454546], [1795.0, 519.0], [1823.0, 500.0], [1819.0, 493.0], [1815.0, 490.75], [1839.0, 497.96428571428584], [1835.0, 524.1818181818181], [1831.0, 523.625], [1859.0, 473.0243902439025], [1863.0, 536.2222222222222], [1887.0, 541.7500000000001], [1883.0, 477.9146341463414], [1875.0, 543.25], [1879.0, 537.0], [1867.0, 536.3076923076924], [1871.0, 494.6], [1907.0, 498.0], [1919.0, 502.5], [1911.0, 500.77777777777777], [1903.0, 479.5], [1899.0, 499.61538461538464], [1891.0, 500.6], [1931.0, 542.1666666666667], [1927.0, 491.94736842105266], [1951.0, 483.89285714285705], [1943.0, 601.3125000000001], [1939.0, 616.0], [1947.0, 518.5294117647059], [1955.0, 510.1666666666667], [1959.0, 508.5], [1963.0, 514.2222222222222], [1967.0, 554.157894736842], [1983.0, 532.0454545454546], [1979.0, 552.5000000000001], [1975.0, 553.0], [1971.0, 511.6285714285714], [1935.0, 665.2250000000001], [1995.0, 523.4666666666664], [1987.0, 504.89473684210526], [1999.0, 516.4802043422733], [1991.0, 504.1481481481481]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1990.3224239999608, 528.1450439999945]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 160653.15, "minX": 1.58558502E12, "maxY": 497297.8333333333, "series": [{"data": [[1.58558502E12, 160653.15], [1.58558514E12, 388330.6], [1.58558508E12, 391005.1666666667], [1.58558526E12, 390331.25], [1.5855852E12, 386340.98333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58558502E12, 204325.06666666668], [1.58558514E12, 493896.2], [1.58558508E12, 497297.8333333333], [1.58558526E12, 496448.51666666666], [1.5855852E12, 491365.7166666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558526E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 521.1396774576639, "minX": 1.58558502E12, "maxY": 532.9115319502564, "series": [{"data": [[1.58558502E12, 530.3024234911984], [1.58558514E12, 531.2507868724987], [1.58558508E12, 526.4579136848643], [1.58558526E12, 521.1396774576639], [1.5855852E12, 532.9115319502564]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558526E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 521.1372718037028, "minX": 1.58558502E12, "maxY": 532.9090214305044, "series": [{"data": [[1.58558502E12, 530.2979462301292], [1.58558514E12, 531.2480505013034], [1.58558508E12, 526.4556218992774], [1.58558526E12, 521.1372718037028], [1.5855852E12, 532.9090214305044]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558526E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.28344056891297637, "minX": 1.58558502E12, "maxY": 0.4821443836553184, "series": [{"data": [[1.58558502E12, 0.4821443836553184], [1.58558514E12, 0.29784007921772243], [1.58558508E12, 0.28506388023006585], [1.58558526E12, 0.28344056891297637], [1.5855852E12, 0.28912300658067036]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558526E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.58558502E12, "maxY": 1707.0, "series": [{"data": [[1.58558502E12, 1707.0], [1.58558514E12, 676.0], [1.58558508E12, 677.0], [1.58558526E12, 667.0], [1.5855852E12, 670.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58558502E12, 340.0], [1.58558514E12, 456.0], [1.58558508E12, 442.0], [1.58558526E12, 7.0], [1.5855852E12, 462.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58558502E12, 530.0], [1.58558514E12, 547.0], [1.58558508E12, 580.0], [1.58558526E12, 538.0], [1.5855852E12, 588.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58558502E12, 538.0], [1.58558514E12, 559.0], [1.58558508E12, 607.9900000000016], [1.58558526E12, 611.0], [1.5855852E12, 621.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58558502E12, 532.0], [1.58558514E12, 554.0], [1.58558508E12, 598.0], [1.58558526E12, 544.0], [1.5855852E12, 607.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558526E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 199.0, "minX": 16.0, "maxY": 723.0, "series": [{"data": [[16.0, 680.0], [891.0, 723.0], [2892.0, 656.0], [2890.0, 708.0], [2948.0, 403.0], [3045.0, 588.0], [3020.0, 636.0], [3001.0, 199.0], [3132.0, 586.0], [3196.0, 652.0], [3170.0, 605.0], [3273.0, 638.0], [3250.0, 645.0], [3291.0, 607.0], [3233.0, 613.0], [3433.0, 459.0], [3427.0, 575.0], [3402.0, 559.0], [3417.0, 555.0], [3412.0, 591.0], [3361.0, 619.0], [3370.0, 585.0], [3349.0, 562.0], [3336.0, 600.0], [3337.0, 559.0], [3426.0, 582.0], [3359.0, 612.0], [3358.0, 623.0], [3439.0, 577.0], [3449.0, 534.0], [3441.0, 574.0], [3438.0, 597.0], [3555.0, 559.0], [3582.0, 583.0], [3516.0, 587.0], [3532.0, 538.0], [3583.0, 580.0], [3526.0, 555.0], [3539.0, 571.0], [3498.0, 527.0], [3504.0, 530.0], [3499.0, 598.0], [3488.0, 568.0], [3490.0, 563.0], [3491.0, 543.0], [3540.0, 534.0], [3547.0, 547.0], [3568.0, 550.0], [3570.0, 565.0], [3580.0, 531.0], [3559.0, 580.0], [3483.0, 610.0], [3477.0, 578.0], [3459.0, 618.0], [3469.0, 592.0], [3654.0, 552.0], [3655.0, 565.0], [3661.0, 525.0], [3639.0, 550.0], [3585.0, 549.0], [3645.0, 547.0], [3642.0, 566.0], [3691.0, 546.0], [3694.0, 525.0], [3681.0, 516.0], [3586.0, 530.0], [3629.0, 532.0], [3697.0, 508.0], [3709.0, 546.0], [3699.0, 534.0], [3664.0, 521.0], [3662.0, 578.0], [3673.0, 544.0], [3672.0, 550.0], [3820.0, 516.0], [3723.0, 534.0], [3721.0, 559.0], [3719.0, 545.0], [3715.0, 580.0], [3771.0, 527.0], [3714.0, 565.0], [3764.0, 520.0], [3762.0, 519.0], [3770.0, 521.0], [3761.0, 537.0], [3753.0, 530.0], [3759.0, 523.0], [3756.0, 547.0], [3754.0, 519.0], [3746.0, 541.0], [3744.0, 522.0], [3788.0, 523.0], [3790.0, 541.0], [3792.0, 522.0], [3793.0, 529.0], [3791.0, 537.0], [3794.0, 532.0], [3807.0, 539.0], [3801.0, 538.0], [3797.0, 527.0], [3800.0, 517.0], [3805.0, 531.0], [3789.0, 528.0], [3782.0, 527.0], [3783.0, 538.0], [3781.0, 529.0], [3828.0, 514.0], [3824.0, 537.0], [3822.0, 527.0], [3826.0, 531.0], [3780.0, 526.0], [3836.0, 521.0], [3830.0, 528.0], [3776.0, 524.0], [3743.0, 555.0], [3815.0, 524.0], [3812.0, 518.0], [3816.0, 528.0], [3819.0, 553.0], [3818.0, 529.0], [3810.0, 532.5], [3741.0, 548.0], [3725.0, 513.0], [3728.0, 529.0], [3895.0, 520.0], [3864.0, 508.0], [3865.0, 540.0], [3866.0, 526.0], [3869.0, 520.0], [3939.0, 518.0], [3954.0, 520.0], [3953.0, 513.0], [3905.0, 523.0], [3904.0, 518.0], [3952.0, 521.0], [3951.0, 521.0], [3948.0, 519.0], [3870.0, 509.0], [3936.0, 525.0], [3938.0, 531.0], [3894.0, 522.0], [3876.0, 511.0], [3877.0, 511.0], [3886.0, 531.0], [3878.0, 513.0], [3884.0, 525.0], [3885.0, 522.0], [3892.0, 524.0], [3889.0, 521.0], [3887.0, 517.0], [3893.0, 519.0], [3875.0, 521.0], [3873.0, 524.0], [3874.0, 512.0], [3872.0, 520.0], [3906.0, 520.0], [3935.0, 504.0], [3934.0, 526.0], [3933.0, 518.0], [3911.0, 513.0], [3909.0, 526.0], [3914.0, 514.0], [3924.0, 509.0], [3920.0, 516.0], [3919.0, 534.0], [3916.0, 505.0], [3930.0, 510.0], [3903.0, 525.0], [3900.0, 516.0], [3843.0, 517.0], [3856.0, 528.0], [3845.0, 523.0], [3852.0, 524.0], [3855.0, 521.0], [3862.0, 530.0], [3863.0, 509.0], [3861.0, 511.0], [3999.0, 513.0], [4080.0, 514.0], [4025.0, 514.0], [4073.0, 508.0], [4079.0, 519.0], [4069.0, 517.0], [4066.0, 521.0], [3997.0, 527.0], [3990.0, 517.0], [3985.0, 523.0], [3982.0, 513.0], [3981.0, 528.0], [3976.0, 515.0], [3978.0, 519.0], [3979.0, 517.0], [3974.0, 532.0], [3968.0, 521.0], [4031.0, 512.0], [4035.0, 526.0], [4038.0, 504.0], [4001.0, 505.0], [4003.0, 508.0], [4008.0, 529.0], [4009.0, 527.0], [4007.0, 524.0], [4004.0, 517.0], [4012.0, 504.0], [4042.0, 515.0], [4063.0, 522.0], [4059.0, 503.0], [4053.0, 515.0], [4043.0, 510.0], [4054.0, 520.0], [4024.0, 505.0], [4017.0, 534.0], [4015.0, 528.0], [4094.0, 507.0], [4034.0, 518.0], [4118.0, 506.0], [4124.0, 518.0], [4110.0, 525.0], [4346.0, 446.0], [4131.0, 525.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4346.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 199.0, "minX": 16.0, "maxY": 723.0, "series": [{"data": [[16.0, 680.0], [891.0, 723.0], [2892.0, 656.0], [2890.0, 708.0], [2948.0, 403.0], [3045.0, 588.0], [3020.0, 636.0], [3001.0, 199.0], [3132.0, 586.0], [3196.0, 652.0], [3170.0, 605.0], [3273.0, 638.0], [3250.0, 645.0], [3291.0, 607.0], [3233.0, 613.0], [3433.0, 459.0], [3427.0, 575.0], [3402.0, 559.0], [3417.0, 555.0], [3412.0, 591.0], [3361.0, 619.0], [3370.0, 585.0], [3349.0, 562.0], [3336.0, 600.0], [3337.0, 559.0], [3426.0, 582.0], [3359.0, 612.0], [3358.0, 623.0], [3439.0, 577.0], [3449.0, 534.0], [3441.0, 574.0], [3438.0, 597.0], [3555.0, 559.0], [3582.0, 583.0], [3516.0, 587.0], [3532.0, 538.0], [3583.0, 580.0], [3526.0, 555.0], [3539.0, 571.0], [3498.0, 527.0], [3504.0, 530.0], [3499.0, 598.0], [3488.0, 568.0], [3490.0, 563.0], [3491.0, 543.0], [3540.0, 534.0], [3547.0, 547.0], [3568.0, 550.0], [3570.0, 565.0], [3580.0, 531.0], [3559.0, 580.0], [3483.0, 610.0], [3477.0, 578.0], [3459.0, 618.0], [3469.0, 592.0], [3654.0, 552.0], [3655.0, 565.0], [3661.0, 525.0], [3639.0, 550.0], [3585.0, 549.0], [3645.0, 547.0], [3642.0, 566.0], [3691.0, 546.0], [3694.0, 525.0], [3681.0, 516.0], [3586.0, 530.0], [3629.0, 532.0], [3697.0, 508.0], [3709.0, 546.0], [3699.0, 534.0], [3664.0, 521.0], [3662.0, 578.0], [3673.0, 544.0], [3672.0, 550.0], [3820.0, 516.0], [3723.0, 534.0], [3721.0, 559.0], [3719.0, 545.0], [3715.0, 580.0], [3771.0, 527.0], [3714.0, 565.0], [3764.0, 520.0], [3762.0, 519.0], [3770.0, 521.0], [3761.0, 537.0], [3753.0, 530.0], [3759.0, 523.0], [3756.0, 547.0], [3754.0, 519.0], [3746.0, 541.0], [3744.0, 522.0], [3788.0, 523.0], [3790.0, 541.0], [3792.0, 522.0], [3793.0, 529.0], [3791.0, 537.0], [3794.0, 532.0], [3807.0, 539.0], [3801.0, 538.0], [3797.0, 527.0], [3800.0, 517.0], [3805.0, 531.0], [3789.0, 528.0], [3782.0, 527.0], [3783.0, 538.0], [3781.0, 529.0], [3828.0, 514.0], [3824.0, 537.0], [3822.0, 527.0], [3826.0, 531.0], [3780.0, 526.0], [3836.0, 521.0], [3830.0, 528.0], [3776.0, 524.0], [3743.0, 555.0], [3815.0, 524.0], [3812.0, 518.0], [3816.0, 528.0], [3819.0, 553.0], [3818.0, 529.0], [3810.0, 532.5], [3741.0, 548.0], [3725.0, 513.0], [3728.0, 529.0], [3895.0, 520.0], [3864.0, 508.0], [3865.0, 540.0], [3866.0, 526.0], [3869.0, 520.0], [3939.0, 518.0], [3954.0, 520.0], [3953.0, 513.0], [3905.0, 523.0], [3904.0, 518.0], [3952.0, 521.0], [3951.0, 521.0], [3948.0, 519.0], [3870.0, 509.0], [3936.0, 525.0], [3938.0, 531.0], [3894.0, 522.0], [3876.0, 511.0], [3877.0, 511.0], [3886.0, 531.0], [3878.0, 513.0], [3884.0, 525.0], [3885.0, 522.0], [3892.0, 524.0], [3889.0, 521.0], [3887.0, 517.0], [3893.0, 519.0], [3875.0, 521.0], [3873.0, 524.0], [3874.0, 512.0], [3872.0, 520.0], [3906.0, 520.0], [3935.0, 504.0], [3934.0, 526.0], [3933.0, 518.0], [3911.0, 513.0], [3909.0, 526.0], [3914.0, 514.0], [3924.0, 509.0], [3920.0, 516.0], [3919.0, 534.0], [3916.0, 505.0], [3930.0, 510.0], [3903.0, 525.0], [3900.0, 516.0], [3843.0, 517.0], [3856.0, 528.0], [3845.0, 523.0], [3852.0, 524.0], [3855.0, 521.0], [3862.0, 530.0], [3863.0, 509.0], [3861.0, 511.0], [3999.0, 513.0], [4080.0, 514.0], [4025.0, 514.0], [4073.0, 508.0], [4079.0, 519.0], [4069.0, 517.0], [4066.0, 521.0], [3997.0, 527.0], [3990.0, 517.0], [3985.0, 523.0], [3982.0, 513.0], [3981.0, 528.0], [3976.0, 515.0], [3978.0, 519.0], [3979.0, 517.0], [3974.0, 532.0], [3968.0, 521.0], [4031.0, 512.0], [4035.0, 526.0], [4038.0, 504.0], [4001.0, 505.0], [4003.0, 508.0], [4008.0, 529.0], [4009.0, 527.0], [4007.0, 524.0], [4004.0, 517.0], [4012.0, 504.0], [4042.0, 515.0], [4063.0, 522.0], [4059.0, 503.0], [4053.0, 515.0], [4043.0, 510.0], [4054.0, 520.0], [4024.0, 505.0], [4017.0, 534.0], [4015.0, 528.0], [4094.0, 507.0], [4034.0, 518.0], [4118.0, 506.0], [4124.0, 518.0], [4110.0, 525.0], [4346.0, 446.0], [4131.0, 525.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4346.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1593.0666666666666, "minX": 1.58558502E12, "maxY": 3796.1666666666665, "series": [{"data": [[1.58558502E12, 1593.0666666666666], [1.58558514E12, 3770.2], [1.58558508E12, 3796.1666666666665], [1.58558526E12, 3756.35], [1.5855852E12, 3750.883333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558526E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1559.7333333333333, "minX": 1.58558502E12, "maxY": 3796.1666666666665, "series": [{"data": [[1.58558502E12, 1559.7333333333333], [1.58558514E12, 3770.2], [1.58558508E12, 3796.1666666666665], [1.58558526E12, 3789.6833333333334], [1.5855852E12, 3750.883333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558526E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1559.7333333333333, "minX": 1.58558502E12, "maxY": 3796.1666666666665, "series": [{"data": [[1.58558502E12, 1559.7333333333333], [1.58558514E12, 3770.2], [1.58558508E12, 3796.1666666666665], [1.58558526E12, 3789.6833333333334], [1.5855852E12, 3750.883333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558526E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1559.7333333333333, "minX": 1.58558502E12, "maxY": 3796.1666666666665, "series": [{"data": [[1.58558502E12, 1559.7333333333333], [1.58558514E12, 3770.2], [1.58558508E12, 3796.1666666666665], [1.58558526E12, 3789.6833333333334], [1.5855852E12, 3750.883333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558526E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

