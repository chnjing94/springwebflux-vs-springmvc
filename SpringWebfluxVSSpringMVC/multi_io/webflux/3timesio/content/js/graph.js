/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1329.0, "series": [{"data": [[0.0, 2.0], [0.1, 38.0], [0.2, 50.0], [0.3, 59.0], [0.4, 70.0], [0.5, 88.0], [0.6, 102.0], [0.7, 111.0], [0.8, 117.0], [0.9, 120.0], [1.0, 122.0], [1.1, 123.0], [1.2, 124.0], [1.3, 125.0], [1.4, 126.0], [1.5, 126.0], [1.6, 127.0], [1.7, 127.0], [1.8, 128.0], [1.9, 128.0], [2.0, 128.0], [2.1, 129.0], [2.2, 129.0], [2.3, 129.0], [2.4, 129.0], [2.5, 130.0], [2.6, 130.0], [2.7, 130.0], [2.8, 131.0], [2.9, 131.0], [3.0, 131.0], [3.1, 131.0], [3.2, 132.0], [3.3, 132.0], [3.4, 132.0], [3.5, 133.0], [3.6, 133.0], [3.7, 133.0], [3.8, 133.0], [3.9, 133.0], [4.0, 134.0], [4.1, 134.0], [4.2, 134.0], [4.3, 134.0], [4.4, 134.0], [4.5, 135.0], [4.6, 135.0], [4.7, 135.0], [4.8, 135.0], [4.9, 135.0], [5.0, 135.0], [5.1, 135.0], [5.2, 135.0], [5.3, 135.0], [5.4, 136.0], [5.5, 136.0], [5.6, 136.0], [5.7, 136.0], [5.8, 136.0], [5.9, 136.0], [6.0, 136.0], [6.1, 136.0], [6.2, 136.0], [6.3, 136.0], [6.4, 136.0], [6.5, 137.0], [6.6, 137.0], [6.7, 137.0], [6.8, 137.0], [6.9, 137.0], [7.0, 137.0], [7.1, 137.0], [7.2, 137.0], [7.3, 137.0], [7.4, 137.0], [7.5, 137.0], [7.6, 137.0], [7.7, 137.0], [7.8, 138.0], [7.9, 138.0], [8.0, 138.0], [8.1, 138.0], [8.2, 138.0], [8.3, 138.0], [8.4, 138.0], [8.5, 138.0], [8.6, 138.0], [8.7, 138.0], [8.8, 138.0], [8.9, 138.0], [9.0, 138.0], [9.1, 138.0], [9.2, 138.0], [9.3, 138.0], [9.4, 138.0], [9.5, 139.0], [9.6, 139.0], [9.7, 139.0], [9.8, 139.0], [9.9, 139.0], [10.0, 139.0], [10.1, 139.0], [10.2, 139.0], [10.3, 139.0], [10.4, 139.0], [10.5, 139.0], [10.6, 139.0], [10.7, 139.0], [10.8, 139.0], [10.9, 139.0], [11.0, 139.0], [11.1, 139.0], [11.2, 140.0], [11.3, 140.0], [11.4, 140.0], [11.5, 140.0], [11.6, 140.0], [11.7, 140.0], [11.8, 140.0], [11.9, 140.0], [12.0, 140.0], [12.1, 140.0], [12.2, 140.0], [12.3, 140.0], [12.4, 140.0], [12.5, 140.0], [12.6, 140.0], [12.7, 140.0], [12.8, 140.0], [12.9, 140.0], [13.0, 140.0], [13.1, 140.0], [13.2, 140.0], [13.3, 141.0], [13.4, 141.0], [13.5, 141.0], [13.6, 141.0], [13.7, 141.0], [13.8, 141.0], [13.9, 141.0], [14.0, 141.0], [14.1, 141.0], [14.2, 141.0], [14.3, 141.0], [14.4, 141.0], [14.5, 141.0], [14.6, 141.0], [14.7, 141.0], [14.8, 141.0], [14.9, 141.0], [15.0, 141.0], [15.1, 141.0], [15.2, 141.0], [15.3, 141.0], [15.4, 142.0], [15.5, 142.0], [15.6, 142.0], [15.7, 142.0], [15.8, 142.0], [15.9, 142.0], [16.0, 142.0], [16.1, 142.0], [16.2, 142.0], [16.3, 142.0], [16.4, 142.0], [16.5, 142.0], [16.6, 142.0], [16.7, 142.0], [16.8, 142.0], [16.9, 142.0], [17.0, 142.0], [17.1, 142.0], [17.2, 142.0], [17.3, 142.0], [17.4, 142.0], [17.5, 142.0], [17.6, 142.0], [17.7, 143.0], [17.8, 143.0], [17.9, 143.0], [18.0, 143.0], [18.1, 143.0], [18.2, 143.0], [18.3, 143.0], [18.4, 143.0], [18.5, 143.0], [18.6, 143.0], [18.7, 143.0], [18.8, 143.0], [18.9, 143.0], [19.0, 143.0], [19.1, 143.0], [19.2, 143.0], [19.3, 143.0], [19.4, 143.0], [19.5, 143.0], [19.6, 143.0], [19.7, 143.0], [19.8, 143.0], [19.9, 143.0], [20.0, 143.0], [20.1, 143.0], [20.2, 144.0], [20.3, 144.0], [20.4, 144.0], [20.5, 144.0], [20.6, 144.0], [20.7, 144.0], [20.8, 144.0], [20.9, 144.0], [21.0, 144.0], [21.1, 144.0], [21.2, 144.0], [21.3, 144.0], [21.4, 144.0], [21.5, 144.0], [21.6, 144.0], [21.7, 144.0], [21.8, 144.0], [21.9, 144.0], [22.0, 144.0], [22.1, 144.0], [22.2, 144.0], [22.3, 144.0], [22.4, 144.0], [22.5, 144.0], [22.6, 144.0], [22.7, 144.0], [22.8, 145.0], [22.9, 145.0], [23.0, 145.0], [23.1, 145.0], [23.2, 145.0], [23.3, 145.0], [23.4, 145.0], [23.5, 145.0], [23.6, 145.0], [23.7, 145.0], [23.8, 145.0], [23.9, 145.0], [24.0, 145.0], [24.1, 145.0], [24.2, 145.0], [24.3, 145.0], [24.4, 145.0], [24.5, 145.0], [24.6, 145.0], [24.7, 145.0], [24.8, 145.0], [24.9, 145.0], [25.0, 145.0], [25.1, 145.0], [25.2, 145.0], [25.3, 145.0], [25.4, 146.0], [25.5, 146.0], [25.6, 146.0], [25.7, 146.0], [25.8, 146.0], [25.9, 146.0], [26.0, 146.0], [26.1, 146.0], [26.2, 146.0], [26.3, 146.0], [26.4, 146.0], [26.5, 146.0], [26.6, 146.0], [26.7, 146.0], [26.8, 146.0], [26.9, 146.0], [27.0, 146.0], [27.1, 146.0], [27.2, 146.0], [27.3, 146.0], [27.4, 146.0], [27.5, 146.0], [27.6, 146.0], [27.7, 146.0], [27.8, 146.0], [27.9, 147.0], [28.0, 147.0], [28.1, 147.0], [28.2, 147.0], [28.3, 147.0], [28.4, 147.0], [28.5, 147.0], [28.6, 147.0], [28.7, 147.0], [28.8, 147.0], [28.9, 147.0], [29.0, 147.0], [29.1, 147.0], [29.2, 147.0], [29.3, 147.0], [29.4, 147.0], [29.5, 147.0], [29.6, 147.0], [29.7, 147.0], [29.8, 147.0], [29.9, 147.0], [30.0, 147.0], [30.1, 147.0], [30.2, 147.0], [30.3, 147.0], [30.4, 147.0], [30.5, 147.0], [30.6, 148.0], [30.7, 148.0], [30.8, 148.0], [30.9, 148.0], [31.0, 148.0], [31.1, 148.0], [31.2, 148.0], [31.3, 148.0], [31.4, 148.0], [31.5, 148.0], [31.6, 148.0], [31.7, 148.0], [31.8, 148.0], [31.9, 148.0], [32.0, 148.0], [32.1, 148.0], [32.2, 148.0], [32.3, 148.0], [32.4, 148.0], [32.5, 148.0], [32.6, 148.0], [32.7, 148.0], [32.8, 148.0], [32.9, 148.0], [33.0, 148.0], [33.1, 149.0], [33.2, 149.0], [33.3, 149.0], [33.4, 149.0], [33.5, 149.0], [33.6, 149.0], [33.7, 149.0], [33.8, 149.0], [33.9, 149.0], [34.0, 149.0], [34.1, 149.0], [34.2, 149.0], [34.3, 149.0], [34.4, 149.0], [34.5, 149.0], [34.6, 149.0], [34.7, 149.0], [34.8, 149.0], [34.9, 149.0], [35.0, 149.0], [35.1, 149.0], [35.2, 149.0], [35.3, 149.0], [35.4, 149.0], [35.5, 150.0], [35.6, 150.0], [35.7, 150.0], [35.8, 150.0], [35.9, 150.0], [36.0, 150.0], [36.1, 150.0], [36.2, 150.0], [36.3, 150.0], [36.4, 150.0], [36.5, 150.0], [36.6, 150.0], [36.7, 150.0], [36.8, 150.0], [36.9, 150.0], [37.0, 150.0], [37.1, 150.0], [37.2, 150.0], [37.3, 150.0], [37.4, 150.0], [37.5, 150.0], [37.6, 150.0], [37.7, 151.0], [37.8, 151.0], [37.9, 151.0], [38.0, 151.0], [38.1, 151.0], [38.2, 151.0], [38.3, 151.0], [38.4, 151.0], [38.5, 151.0], [38.6, 151.0], [38.7, 151.0], [38.8, 151.0], [38.9, 151.0], [39.0, 151.0], [39.1, 151.0], [39.2, 151.0], [39.3, 151.0], [39.4, 151.0], [39.5, 151.0], [39.6, 151.0], [39.7, 152.0], [39.8, 152.0], [39.9, 152.0], [40.0, 152.0], [40.1, 152.0], [40.2, 152.0], [40.3, 152.0], [40.4, 152.0], [40.5, 152.0], [40.6, 152.0], [40.7, 152.0], [40.8, 152.0], [40.9, 152.0], [41.0, 152.0], [41.1, 152.0], [41.2, 152.0], [41.3, 152.0], [41.4, 153.0], [41.5, 153.0], [41.6, 153.0], [41.7, 153.0], [41.8, 153.0], [41.9, 153.0], [42.0, 153.0], [42.1, 153.0], [42.2, 153.0], [42.3, 153.0], [42.4, 153.0], [42.5, 153.0], [42.6, 153.0], [42.7, 153.0], [42.8, 153.0], [42.9, 153.0], [43.0, 154.0], [43.1, 154.0], [43.2, 154.0], [43.3, 154.0], [43.4, 154.0], [43.5, 154.0], [43.6, 154.0], [43.7, 154.0], [43.8, 154.0], [43.9, 154.0], [44.0, 154.0], [44.1, 154.0], [44.2, 154.0], [44.3, 154.0], [44.4, 155.0], [44.5, 155.0], [44.6, 155.0], [44.7, 155.0], [44.8, 155.0], [44.9, 155.0], [45.0, 155.0], [45.1, 155.0], [45.2, 155.0], [45.3, 155.0], [45.4, 155.0], [45.5, 155.0], [45.6, 155.0], [45.7, 155.0], [45.8, 156.0], [45.9, 156.0], [46.0, 156.0], [46.1, 156.0], [46.2, 156.0], [46.3, 156.0], [46.4, 156.0], [46.5, 156.0], [46.6, 156.0], [46.7, 156.0], [46.8, 156.0], [46.9, 156.0], [47.0, 156.0], [47.1, 157.0], [47.2, 157.0], [47.3, 157.0], [47.4, 157.0], [47.5, 157.0], [47.6, 157.0], [47.7, 157.0], [47.8, 157.0], [47.9, 157.0], [48.0, 157.0], [48.1, 157.0], [48.2, 157.0], [48.3, 157.0], [48.4, 157.0], [48.5, 157.0], [48.6, 158.0], [48.7, 158.0], [48.8, 158.0], [48.9, 158.0], [49.0, 158.0], [49.1, 158.0], [49.2, 158.0], [49.3, 158.0], [49.4, 158.0], [49.5, 158.0], [49.6, 158.0], [49.7, 158.0], [49.8, 158.0], [49.9, 159.0], [50.0, 159.0], [50.1, 159.0], [50.2, 159.0], [50.3, 159.0], [50.4, 159.0], [50.5, 159.0], [50.6, 159.0], [50.7, 159.0], [50.8, 159.0], [50.9, 159.0], [51.0, 159.0], [51.1, 159.0], [51.2, 160.0], [51.3, 160.0], [51.4, 160.0], [51.5, 160.0], [51.6, 160.0], [51.7, 160.0], [51.8, 160.0], [51.9, 160.0], [52.0, 160.0], [52.1, 160.0], [52.2, 160.0], [52.3, 161.0], [52.4, 161.0], [52.5, 161.0], [52.6, 161.0], [52.7, 161.0], [52.8, 161.0], [52.9, 161.0], [53.0, 161.0], [53.1, 161.0], [53.2, 161.0], [53.3, 161.0], [53.4, 161.0], [53.5, 162.0], [53.6, 162.0], [53.7, 162.0], [53.8, 162.0], [53.9, 162.0], [54.0, 162.0], [54.1, 162.0], [54.2, 162.0], [54.3, 162.0], [54.4, 162.0], [54.5, 162.0], [54.6, 162.0], [54.7, 163.0], [54.8, 163.0], [54.9, 163.0], [55.0, 163.0], [55.1, 163.0], [55.2, 163.0], [55.3, 163.0], [55.4, 163.0], [55.5, 163.0], [55.6, 163.0], [55.7, 164.0], [55.8, 164.0], [55.9, 164.0], [56.0, 164.0], [56.1, 164.0], [56.2, 164.0], [56.3, 164.0], [56.4, 164.0], [56.5, 164.0], [56.6, 165.0], [56.7, 165.0], [56.8, 165.0], [56.9, 165.0], [57.0, 165.0], [57.1, 165.0], [57.2, 165.0], [57.3, 165.0], [57.4, 165.0], [57.5, 165.0], [57.6, 165.0], [57.7, 166.0], [57.8, 166.0], [57.9, 166.0], [58.0, 166.0], [58.1, 166.0], [58.2, 166.0], [58.3, 166.0], [58.4, 166.0], [58.5, 166.0], [58.6, 166.0], [58.7, 167.0], [58.8, 167.0], [58.9, 167.0], [59.0, 167.0], [59.1, 167.0], [59.2, 167.0], [59.3, 167.0], [59.4, 167.0], [59.5, 167.0], [59.6, 167.0], [59.7, 167.0], [59.8, 168.0], [59.9, 168.0], [60.0, 168.0], [60.1, 168.0], [60.2, 168.0], [60.3, 168.0], [60.4, 168.0], [60.5, 168.0], [60.6, 168.0], [60.7, 168.0], [60.8, 169.0], [60.9, 169.0], [61.0, 169.0], [61.1, 169.0], [61.2, 169.0], [61.3, 169.0], [61.4, 169.0], [61.5, 169.0], [61.6, 169.0], [61.7, 169.0], [61.8, 169.0], [61.9, 169.0], [62.0, 170.0], [62.1, 170.0], [62.2, 170.0], [62.3, 170.0], [62.4, 170.0], [62.5, 170.0], [62.6, 170.0], [62.7, 170.0], [62.8, 170.0], [62.9, 170.0], [63.0, 170.0], [63.1, 171.0], [63.2, 171.0], [63.3, 171.0], [63.4, 171.0], [63.5, 171.0], [63.6, 171.0], [63.7, 171.0], [63.8, 171.0], [63.9, 171.0], [64.0, 171.0], [64.1, 171.0], [64.2, 172.0], [64.3, 172.0], [64.4, 172.0], [64.5, 172.0], [64.6, 172.0], [64.7, 172.0], [64.8, 172.0], [64.9, 172.0], [65.0, 172.0], [65.1, 172.0], [65.2, 173.0], [65.3, 173.0], [65.4, 173.0], [65.5, 173.0], [65.6, 173.0], [65.7, 173.0], [65.8, 173.0], [65.9, 173.0], [66.0, 173.0], [66.1, 173.0], [66.2, 174.0], [66.3, 174.0], [66.4, 174.0], [66.5, 174.0], [66.6, 174.0], [66.7, 174.0], [66.8, 174.0], [66.9, 174.0], [67.0, 174.0], [67.1, 174.0], [67.2, 175.0], [67.3, 175.0], [67.4, 175.0], [67.5, 175.0], [67.6, 175.0], [67.7, 175.0], [67.8, 175.0], [67.9, 175.0], [68.0, 175.0], [68.1, 175.0], [68.2, 176.0], [68.3, 176.0], [68.4, 176.0], [68.5, 176.0], [68.6, 176.0], [68.7, 176.0], [68.8, 176.0], [68.9, 176.0], [69.0, 176.0], [69.1, 176.0], [69.2, 176.0], [69.3, 176.0], [69.4, 177.0], [69.5, 177.0], [69.6, 177.0], [69.7, 177.0], [69.8, 177.0], [69.9, 177.0], [70.0, 177.0], [70.1, 177.0], [70.2, 177.0], [70.3, 177.0], [70.4, 177.0], [70.5, 177.0], [70.6, 178.0], [70.7, 178.0], [70.8, 178.0], [70.9, 178.0], [71.0, 178.0], [71.1, 178.0], [71.2, 178.0], [71.3, 178.0], [71.4, 178.0], [71.5, 178.0], [71.6, 178.0], [71.7, 178.0], [71.8, 178.0], [71.9, 178.0], [72.0, 179.0], [72.1, 179.0], [72.2, 179.0], [72.3, 179.0], [72.4, 179.0], [72.5, 179.0], [72.6, 179.0], [72.7, 179.0], [72.8, 179.0], [72.9, 179.0], [73.0, 179.0], [73.1, 179.0], [73.2, 179.0], [73.3, 180.0], [73.4, 180.0], [73.5, 180.0], [73.6, 180.0], [73.7, 180.0], [73.8, 180.0], [73.9, 180.0], [74.0, 180.0], [74.1, 180.0], [74.2, 180.0], [74.3, 180.0], [74.4, 180.0], [74.5, 180.0], [74.6, 180.0], [74.7, 181.0], [74.8, 181.0], [74.9, 181.0], [75.0, 181.0], [75.1, 181.0], [75.2, 181.0], [75.3, 181.0], [75.4, 181.0], [75.5, 181.0], [75.6, 181.0], [75.7, 181.0], [75.8, 181.0], [75.9, 181.0], [76.0, 181.0], [76.1, 182.0], [76.2, 182.0], [76.3, 182.0], [76.4, 182.0], [76.5, 182.0], [76.6, 182.0], [76.7, 182.0], [76.8, 182.0], [76.9, 182.0], [77.0, 182.0], [77.1, 182.0], [77.2, 182.0], [77.3, 183.0], [77.4, 183.0], [77.5, 183.0], [77.6, 183.0], [77.7, 183.0], [77.8, 183.0], [77.9, 183.0], [78.0, 183.0], [78.1, 183.0], [78.2, 183.0], [78.3, 183.0], [78.4, 183.0], [78.5, 183.0], [78.6, 184.0], [78.7, 184.0], [78.8, 184.0], [78.9, 184.0], [79.0, 184.0], [79.1, 184.0], [79.2, 184.0], [79.3, 184.0], [79.4, 184.0], [79.5, 184.0], [79.6, 184.0], [79.7, 184.0], [79.8, 184.0], [79.9, 185.0], [80.0, 185.0], [80.1, 185.0], [80.2, 185.0], [80.3, 185.0], [80.4, 185.0], [80.5, 185.0], [80.6, 185.0], [80.7, 185.0], [80.8, 185.0], [80.9, 185.0], [81.0, 186.0], [81.1, 186.0], [81.2, 186.0], [81.3, 186.0], [81.4, 186.0], [81.5, 186.0], [81.6, 186.0], [81.7, 186.0], [81.8, 186.0], [81.9, 187.0], [82.0, 187.0], [82.1, 187.0], [82.2, 187.0], [82.3, 187.0], [82.4, 187.0], [82.5, 187.0], [82.6, 187.0], [82.7, 187.0], [82.8, 188.0], [82.9, 188.0], [83.0, 188.0], [83.1, 188.0], [83.2, 188.0], [83.3, 188.0], [83.4, 188.0], [83.5, 188.0], [83.6, 188.0], [83.7, 189.0], [83.8, 189.0], [83.9, 189.0], [84.0, 189.0], [84.1, 189.0], [84.2, 189.0], [84.3, 189.0], [84.4, 189.0], [84.5, 190.0], [84.6, 190.0], [84.7, 190.0], [84.8, 190.0], [84.9, 190.0], [85.0, 190.0], [85.1, 190.0], [85.2, 190.0], [85.3, 191.0], [85.4, 191.0], [85.5, 191.0], [85.6, 191.0], [85.7, 191.0], [85.8, 191.0], [85.9, 191.0], [86.0, 192.0], [86.1, 192.0], [86.2, 192.0], [86.3, 192.0], [86.4, 192.0], [86.5, 192.0], [86.6, 192.0], [86.7, 193.0], [86.8, 193.0], [86.9, 193.0], [87.0, 193.0], [87.1, 193.0], [87.2, 193.0], [87.3, 194.0], [87.4, 194.0], [87.5, 194.0], [87.6, 194.0], [87.7, 194.0], [87.8, 194.0], [87.9, 195.0], [88.0, 195.0], [88.1, 195.0], [88.2, 195.0], [88.3, 195.0], [88.4, 195.0], [88.5, 196.0], [88.6, 196.0], [88.7, 196.0], [88.8, 196.0], [88.9, 196.0], [89.0, 196.0], [89.1, 196.0], [89.2, 197.0], [89.3, 197.0], [89.4, 197.0], [89.5, 197.0], [89.6, 197.0], [89.7, 198.0], [89.8, 198.0], [89.9, 198.0], [90.0, 198.0], [90.1, 198.0], [90.2, 199.0], [90.3, 199.0], [90.4, 199.0], [90.5, 199.0], [90.6, 200.0], [90.7, 200.0], [90.8, 200.0], [90.9, 200.0], [91.0, 200.0], [91.1, 201.0], [91.2, 201.0], [91.3, 201.0], [91.4, 201.0], [91.5, 202.0], [91.6, 202.0], [91.7, 202.0], [91.8, 203.0], [91.9, 203.0], [92.0, 203.0], [92.1, 204.0], [92.2, 204.0], [92.3, 205.0], [92.4, 205.0], [92.5, 205.0], [92.6, 205.0], [92.7, 206.0], [92.8, 206.0], [92.9, 207.0], [93.0, 207.0], [93.1, 207.0], [93.2, 207.0], [93.3, 208.0], [93.4, 208.0], [93.5, 208.0], [93.6, 209.0], [93.7, 209.0], [93.8, 210.0], [93.9, 210.0], [94.0, 211.0], [94.1, 211.0], [94.2, 212.0], [94.3, 212.0], [94.4, 213.0], [94.5, 213.0], [94.6, 214.0], [94.7, 214.0], [94.8, 214.0], [94.9, 215.0], [95.0, 215.0], [95.1, 216.0], [95.2, 216.0], [95.3, 217.0], [95.4, 217.0], [95.5, 218.0], [95.6, 219.0], [95.7, 219.0], [95.8, 220.0], [95.9, 221.0], [96.0, 221.0], [96.1, 222.0], [96.2, 223.0], [96.3, 223.0], [96.4, 223.0], [96.5, 224.0], [96.6, 224.0], [96.7, 225.0], [96.8, 226.0], [96.9, 226.0], [97.0, 227.0], [97.1, 227.0], [97.2, 228.0], [97.3, 229.0], [97.4, 230.0], [97.5, 231.0], [97.6, 232.0], [97.7, 232.0], [97.8, 233.0], [97.9, 234.0], [98.0, 235.0], [98.1, 235.0], [98.2, 236.0], [98.3, 237.0], [98.4, 238.0], [98.5, 240.0], [98.6, 241.0], [98.7, 243.0], [98.8, 244.0], [98.9, 247.0], [99.0, 249.0], [99.1, 252.0], [99.2, 255.0], [99.3, 261.0], [99.4, 268.0], [99.5, 276.0], [99.6, 286.0], [99.7, 300.0], [99.8, 321.0], [99.9, 350.0], [100.0, 1329.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 899917.0, "series": [{"data": [[0.0, 5963.0], [300.0, 2670.0], [600.0, 2.0], [1300.0, 2.0], [700.0, 26.0], [200.0, 91106.0], [400.0, 298.0], [100.0, 899917.0], [500.0, 16.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 999955.0, "series": [{"data": [[0.0, 999955.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 45.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1854.9956329042084, "minX": 1.5855825E12, "maxY": 2000.0, "series": [{"data": [[1.58558262E12, 1945.435854785599], [1.58558256E12, 2000.0], [1.5855825E12, 1854.9956329042084]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558262E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 612.5, "series": [{"data": [[2.0, 2.0], [3.0, 2.0], [6.0, 3.0], [8.0, 2.0], [9.0, 2.0], [10.0, 3.0], [13.0, 3.0], [14.0, 3.0], [15.0, 4.333333333333333], [18.0, 4.0], [19.0, 4.333333333333333], [21.0, 5.0], [25.0, 6.0], [26.0, 4.5], [27.0, 5.5], [30.0, 6.0], [31.0, 6.0], [32.0, 5.666666666666667], [35.0, 5.0], [36.0, 5.0], [39.0, 7.0], [43.0, 7.0], [42.0, 7.0], [47.0, 8.0], [46.0, 8.0], [49.0, 8.0], [48.0, 8.0], [52.0, 8.0], [55.0, 8.0], [54.0, 8.0], [56.0, 8.0], [61.0, 10.0], [60.0, 10.0], [62.0, 10.0], [66.0, 10.166666666666666], [64.0, 10.0], [70.0, 12.0], [69.0, 12.0], [75.0, 12.333333333333334], [73.0, 12.0], [79.0, 12.0], [78.0, 12.0], [77.0, 11.571428571428571], [76.0, 12.0], [80.0, 13.0], [87.0, 13.333333333333334], [86.0, 12.666666666666666], [84.0, 14.0], [90.0, 14.0], [89.0, 14.0], [88.0, 13.0], [95.0, 14.0], [94.0, 15.0], [93.0, 14.333333333333334], [92.0, 14.0], [96.0, 15.0], [101.0, 13.0], [107.0, 13.0], [106.0, 14.333333333333334], [105.0, 13.0], [104.0, 13.0], [111.0, 17.0], [110.0, 17.0], [109.0, 15.5], [113.0, 17.0], [112.0, 17.0], [118.0, 15.0], [117.0, 15.0], [123.0, 16.0], [122.0, 16.0], [120.0, 15.75], [127.0, 16.0], [126.0, 16.0], [135.0, 19.0], [133.0, 19.0], [131.0, 20.0], [130.0, 18.0], [129.0, 20.0], [128.0, 17.333333333333332], [136.0, 19.0], [151.0, 18.0], [150.0, 17.875], [147.0, 18.0], [159.0, 23.0], [158.0, 19.666666666666668], [156.0, 22.0], [154.0, 18.0], [153.0, 18.0], [152.0, 18.0], [167.0, 22.0], [165.0, 22.5], [163.0, 23.5], [161.0, 23.0], [160.0, 23.0], [175.0, 21.0], [173.0, 21.0], [170.0, 22.0], [169.0, 22.0], [168.0, 22.0], [183.0, 21.0], [182.0, 21.0], [180.0, 21.0], [178.0, 21.0], [177.0, 20.714285714285715], [176.0, 20.0], [191.0, 21.0], [190.0, 21.0], [188.0, 23.5], [187.0, 22.0], [186.0, 21.0], [185.0, 21.0], [184.0, 21.0], [199.0, 22.666666666666668], [197.0, 24.5], [196.0, 24.25], [195.0, 25.5], [194.0, 25.666666666666668], [193.0, 25.333333333333332], [206.0, 22.0], [205.0, 22.6], [203.0, 22.0], [201.0, 22.0], [214.0, 23.0], [213.0, 23.0], [212.0, 23.0], [211.0, 23.0], [209.0, 23.0], [208.0, 23.0], [223.0, 28.0], [221.0, 27.333333333333332], [220.0, 25.25], [218.0, 23.6], [217.0, 26.5], [216.0, 23.0], [231.0, 28.0], [230.0, 28.0], [229.0, 28.0], [228.0, 28.2], [227.0, 28.0], [225.0, 28.333333333333332], [224.0, 28.666666666666668], [239.0, 25.0], [238.0, 25.0], [237.0, 25.0], [235.0, 29.0], [234.0, 28.5], [233.0, 28.6], [232.0, 28.0], [246.0, 26.0], [245.0, 25.5], [244.0, 25.0], [242.0, 25.0], [241.0, 25.0], [255.0, 31.0], [252.0, 30.75], [251.0, 28.0], [250.0, 25.0], [249.0, 25.6], [248.0, 26.0], [270.0, 28.0], [271.0, 28.0], [269.0, 28.0], [268.0, 28.0], [267.0, 28.0], [265.0, 28.0], [264.0, 28.0], [262.0, 29.533333333333335], [258.0, 31.0], [257.0, 31.0], [256.0, 31.0], [260.0, 31.0], [274.0, 27.833333333333336], [286.0, 34.375], [284.0, 30.25], [273.0, 28.0], [272.0, 28.0], [283.0, 28.0], [282.0, 28.0], [280.0, 28.0], [279.0, 28.0], [278.0, 28.0], [277.0, 28.0], [276.0, 28.0], [300.0, 171.16666666666666], [296.0, 308.0], [294.0, 305.5], [293.0, 30.571428571428573], [299.0, 167.0], [303.0, 31.0], [301.0, 31.0], [298.0, 31.0], [297.0, 30.75], [295.0, 30.333333333333332], [317.0, 253.0], [316.0, 244.85714285714286], [306.0, 31.0], [305.0, 31.0], [318.0, 96.2], [319.0, 37.5], [314.0, 37.0], [313.0, 37.0], [312.0, 36.8], [311.0, 33.5], [310.0, 33.5], [308.0, 31.0], [321.0, 259.25], [320.0, 87.83333333333333], [322.0, 218.0], [323.0, 155.2], [324.0, 216.4], [325.0, 341.85714285714283], [326.0, 192.25], [327.0, 149.0], [328.0, 341.25], [335.0, 33.333333333333336], [334.0, 33.5], [332.0, 347.2], [333.0, 150.7142857142857], [329.0, 350.25], [330.0, 325.3333333333333], [331.0, 347.0], [350.0, 33.0], [351.0, 34.0], [349.0, 33.0], [348.0, 33.0], [346.0, 34.0], [345.0, 34.0], [344.0, 33.875], [343.0, 33.25], [337.0, 33.0], [336.0, 33.2], [339.0, 33.0], [338.0, 33.0], [342.0, 33.0], [341.0, 33.0], [340.0, 33.0], [365.0, 36.0], [366.0, 36.0], [364.0, 36.333333333333336], [354.0, 37.0], [353.0, 34.0], [352.0, 34.0], [363.0, 36.0], [362.0, 36.0], [361.0, 36.0], [360.0, 36.0], [359.0, 36.125], [357.0, 36.0], [381.0, 234.63333333333338], [371.0, 237.25000000000003], [383.0, 335.57142857142856], [380.0, 36.0], [378.0, 36.0], [377.0, 36.66666666666667], [376.0, 37.0], [375.0, 36.6], [368.0, 37.0], [370.0, 36.0], [369.0, 36.27777777777778], [373.0, 36.0], [372.0, 36.0], [386.0, 377.8], [384.0, 263.4761904761904], [385.0, 38.0], [387.0, 82.36842105263159], [396.0, 277.1111111111111], [397.0, 146.55000000000004], [398.0, 186.58333333333334], [399.0, 38.0], [388.0, 247.37500000000003], [389.0, 309.16666666666663], [390.0, 378.8], [391.0, 38.0], [392.0, 159.66666666666666], [393.0, 149.5], [394.0, 319.16666666666663], [395.0, 486.0], [401.0, 454.22222222222223], [400.0, 327.61538461538464], [403.0, 208.75], [402.0, 38.0], [412.0, 378.4545454545455], [414.0, 67.0], [415.0, 324.2307692307692], [405.0, 351.66666666666663], [406.0, 206.62500000000003], [407.0, 83.75], [408.0, 373.0], [409.0, 369.0], [410.0, 205.14285714285717], [411.0, 246.0], [418.0, 351.0], [416.0, 154.0], [417.0, 41.0], [419.0, 228.75], [420.0, 87.91666666666667], [421.0, 202.11111111111111], [422.0, 99.00000000000001], [423.0, 40.875], [429.0, 34.375], [425.0, 35.666666666666664], [424.0, 41.0], [428.0, 34.2], [427.0, 34.2], [426.0, 34.333333333333336], [445.0, 36.0], [446.0, 39.4], [444.0, 36.0], [435.0, 34.583333333333336], [434.0, 35.333333333333336], [433.0, 36.0], [432.0, 35.2], [443.0, 35.8], [442.0, 35.666666666666664], [441.0, 35.0], [440.0, 35.0], [439.0, 35.0], [437.0, 35.0], [436.0, 35.0], [462.0, 45.333333333333336], [463.0, 45.333333333333336], [460.0, 45.25], [451.0, 46.44444444444444], [449.0, 45.800000000000004], [448.0, 45.0], [459.0, 45.0], [458.0, 45.0], [457.0, 46.0], [455.0, 46.0], [454.0, 46.0], [452.0, 47.0], [478.0, 47.75], [479.0, 47.0], [477.0, 47.0], [476.0, 47.0], [475.0, 47.333333333333336], [474.0, 45.0], [473.0, 46.125], [472.0, 45.5], [471.0, 45.85714285714286], [465.0, 46.0], [464.0, 46.0], [467.0, 46.0], [466.0, 46.0], [470.0, 46.0], [469.0, 46.0], [493.0, 40.0], [495.0, 44.136363636363626], [492.0, 40.33333333333333], [483.0, 46.53333333333333], [482.0, 47.050000000000004], [481.0, 46.888888888888886], [480.0, 47.0], [491.0, 40.0], [490.0, 40.0], [489.0, 40.0], [487.0, 45.6], [486.0, 47.0], [485.0, 47.0], [484.0, 46.6], [510.0, 40.0], [511.0, 40.0], [509.0, 40.2], [508.0, 47.32], [507.0, 49.0], [506.0, 48.2], [505.0, 48.14285714285714], [504.0, 48.0], [503.0, 48.0], [499.0, 48.849999999999994], [498.0, 49.0], [496.0, 48.36363636363637], [500.0, 47.875], [536.0, 172.66666666666666], [518.0, 612.5], [516.0, 41.0], [514.0, 39.714285714285715], [512.0, 40.57142857142858], [526.0, 200.05555555555557], [538.0, 431.0], [540.0, 375.0], [542.0, 329.55555555555554], [528.0, 439.2857142857143], [530.0, 277.09999999999997], [532.0, 270.09523809523813], [534.0, 286.50000000000006], [520.0, 430.8571428571429], [522.0, 92.09523809523812], [524.0, 480.8], [546.0, 179.28571428571428], [572.0, 50.15384615384615], [544.0, 337.125], [548.0, 347.0], [550.0, 50.0], [568.0, 51.0], [570.0, 50.714285714285715], [554.0, 105.18181818181817], [552.0, 46.49999999999999], [556.0, 49.75], [558.0, 50.0], [560.0, 50.0], [562.0, 50.0], [566.0, 50.0], [574.0, 50.0], [600.0, 52.0], [590.0, 182.16666666666663], [580.0, 206.05], [582.0, 393.0], [592.0, 65.42857142857143], [606.0, 139.5], [604.0, 314.4444444444445], [602.0, 247.92857142857147], [594.0, 125.71428571428571], [596.0, 248.38095238095244], [598.0, 198.28571428571428], [584.0, 219.5], [588.0, 43.0], [576.0, 50.111111111111114], [578.0, 49.22222222222222], [610.0, 182.76923076923077], [608.0, 221.83333333333334], [622.0, 200.5], [620.0, 246.54545454545448], [612.0, 391.8], [614.0, 140.07500000000005], [624.0, 46.54545454545455], [626.0, 45.0], [628.0, 56.83333333333333], [630.0, 56.6], [638.0, 56.0], [634.0, 56.18181818181819], [632.0, 56.583333333333336], [616.0, 389.25], [618.0, 220.20000000000002], [644.0, 46.54545454545454], [668.0, 48.25], [646.0, 46.0], [664.0, 49.0], [666.0, 48.5], [648.0, 314.42857142857144], [650.0, 249.99999999999997], [652.0, 228.375], [642.0, 56.92857142857142], [640.0, 56.4], [654.0, 58.0], [656.0, 57.63636363636364], [658.0, 58.44444444444444], [660.0, 58.25], [662.0, 55.54545454545454], [670.0, 50.833333333333336], [672.0, 59.0], [696.0, 316.0], [684.0, 141.43999999999997], [680.0, 68.2], [682.0, 122.8], [686.0, 334.57142857142856], [674.0, 59.5], [676.0, 60.38095238095238], [678.0, 61.78571428571428], [698.0, 214.23076923076925], [700.0, 63.0], [702.0, 270.45454545454544], [688.0, 142.14705882352942], [690.0, 311.72727272727275], [692.0, 316.6666666666667], [694.0, 154.24137931034485], [710.0, 55.0], [728.0, 198.73333333333335], [704.0, 279.22727272727275], [706.0, 326.40909090909093], [708.0, 228.0], [716.0, 111.8], [718.0, 52.42857142857143], [720.0, 56.42857142857142], [722.0, 53.333333333333336], [726.0, 58.06666666666666], [734.0, 252.53846153846152], [732.0, 166.77777777777783], [730.0, 299.2307692307692], [738.0, 195.5333333333334], [736.0, 181.4705882352941], [750.0, 165.375], [748.0, 275.3333333333333], [746.0, 111.39999999999999], [740.0, 152.55555555555554], [742.0, 165.45], [752.0, 186.2], [766.0, 69.88888888888889], [764.0, 69.28571428571429], [762.0, 70.0], [760.0, 68.0], [754.0, 141.73913043478257], [756.0, 54.916666666666664], [758.0, 287.83333333333337], [744.0, 282.40909090909093], [792.0, 58.888888888888886], [784.0, 166.64999999999995], [786.0, 273.8], [788.0, 229.0], [790.0, 126.6666666666667], [768.0, 70.0], [770.0, 69.31578947368423], [772.0, 59.0], [774.0, 59.22222222222222], [782.0, 57.5], [780.0, 58.5], [776.0, 58.0], [796.0, 59.0], [794.0, 59.0], [798.0, 75.0], [828.0, 62.74999999999999], [830.0, 68.0], [816.0, 62.833333333333336], [818.0, 62.0], [820.0, 61.25], [826.0, 62.0], [824.0, 61.5], [806.0, 75.625], [804.0, 77.0], [802.0, 74.91304347826087], [800.0, 74.16666666666667], [814.0, 63.83333333333333], [810.0, 61.0], [808.0, 61.84615384615385], [822.0, 62.8], [856.0, 227.8461538461538], [838.0, 75.34285714285711], [836.0, 76.0], [834.0, 75.0], [832.0, 75.5], [858.0, 247.83333333333337], [860.0, 236.7], [862.0, 133.8], [848.0, 275.1111111111111], [850.0, 166.0], [852.0, 244.99999999999997], [854.0, 244.09090909090907], [840.0, 131.00000000000003], [842.0, 363.55555555555554], [844.0, 239.375], [846.0, 225.55], [868.0, 243.49999999999997], [892.0, 66.0], [864.0, 200.66666666666669], [870.0, 77.11764705882354], [888.0, 66.33333333333333], [890.0, 65.66666666666667], [872.0, 208.25], [874.0, 234.4], [876.0, 79.76923076923077], [878.0, 79.90909090909089], [894.0, 357.14285714285717], [880.0, 80.0], [882.0, 80.0], [884.0, 80.25], [886.0, 80.0], [898.0, 338.6666666666667], [896.0, 276.2307692307692], [910.0, 107.36842105263156], [908.0, 303.45454545454544], [906.0, 288.53846153846143], [900.0, 139.95454545454544], [902.0, 268.75], [912.0, 336.02631578947376], [920.0, 86.00000000000001], [922.0, 92.25], [924.0, 81.24999999999999], [926.0, 73.38888888888887], [914.0, 233.69999999999996], [916.0, 215.59999999999997], [918.0, 88.8], [904.0, 105.31428571428572], [932.0, 90.16666666666667], [942.0, 255.85714285714286], [940.0, 90.875], [936.0, 89.77777777777777], [944.0, 232.68421052631578], [952.0, 272.8823529411764], [934.0, 91.0], [930.0, 89.33333333333333], [954.0, 77.0], [956.0, 78.71428571428571], [958.0, 79.26666666666667], [946.0, 269.9285714285714], [948.0, 277.69230769230774], [950.0, 210.73913043478262], [984.0, 82.11111111111111], [966.0, 81.19047619047616], [964.0, 79.46666666666667], [962.0, 79.0], [960.0, 79.2], [986.0, 89.80000000000001], [988.0, 82.0], [990.0, 82.14285714285715], [976.0, 218.86111111111111], [978.0, 130.96491228070172], [980.0, 96.6], [982.0, 176.59459459459455], [968.0, 251.04999999999998], [970.0, 255.88000000000008], [972.0, 208.84615384615387], [974.0, 222.86666666666667], [994.0, 81.0], [1016.0, 83.0], [1004.0, 138.83333333333334], [1000.0, 82.0], [1002.0, 236.74999999999997], [992.0, 81.11111111111113], [996.0, 83.0], [998.0, 82.5], [1006.0, 82.10000000000001], [1018.0, 83.375], [1008.0, 82.38461538461539], [1012.0, 83.07142857142857], [1010.0, 83.0], [1014.0, 82.0], [1022.0, 83.62500000000001], [1020.0, 83.5], [1024.0, 84.0], [1072.0, 193.6], [1048.0, 215.45588235294116], [1044.0, 90.4], [1040.0, 83.57142857142857], [1052.0, 272.2894736842106], [1028.0, 92.0], [1032.0, 104.33333333333334], [1036.0, 104.0], [1080.0, 209.2444444444444], [1076.0, 95.99999999999999], [1084.0, 188.326923076923], [1056.0, 284.8771929824561], [1064.0, 258.14492753623193], [1100.0, 137.20000000000005], [1092.0, 225.3181818181818], [1088.0, 173.52777777777783], [1096.0, 208.34375], [1140.0, 149.0], [1144.0, 148.83333333333334], [1148.0, 187.22077922077915], [1132.0, 148.0], [1128.0, 147.5], [1124.0, 148.15384615384616], [1120.0, 146.91666666666666], [1112.0, 254.5641025641025], [1108.0, 128.56666666666663], [1104.0, 137.25000000000003], [1116.0, 228.0], [1208.0, 163.0], [1152.0, 176.77611940298507], [1156.0, 192.82758620689654], [1188.0, 239.04], [1184.0, 136.0], [1212.0, 162.0], [1204.0, 125.66666666666666], [1200.0, 188.29629629629633], [1164.0, 152.83333333333334], [1160.0, 152.43333333333334], [1192.0, 199.53623188405794], [1196.0, 199.4], [1176.0, 147.29999999999998], [1172.0, 134.0], [1168.0, 141.0], [1180.0, 135.0], [1224.0, 153.21052631578948], [1244.0, 146.46153846153842], [1236.0, 161.0], [1232.0, 130.0], [1220.0, 215.21951219512204], [1228.0, 152.58823529411765], [1264.0, 221.0], [1272.0, 239.23809523809524], [1268.0, 136.0909090909091], [1276.0, 136.14285714285714], [1248.0, 229.94736842105266], [1252.0, 194.93333333333328], [1256.0, 202.53030303030306], [1260.0, 160.0], [1284.0, 181.41463414634148], [1288.0, 176.69696969696972], [1280.0, 178.91176470588235], [1308.0, 151.16666666666666], [1304.0, 136.0], [1300.0, 134.8095238095238], [1296.0, 157.66666666666666], [1292.0, 183.64444444444442], [1332.0, 135.08333333333334], [1328.0, 135.25000000000003], [1336.0, 173.1538461538462], [1340.0, 169.0480769230769], [1312.0, 161.71052631578942], [1316.0, 222.75], [1324.0, 135.0], [1320.0, 135.91666666666666], [1356.0, 134.84999999999997], [1344.0, 171.41935483870964], [1348.0, 135.0], [1352.0, 135.0], [1392.0, 139.0588235294118], [1372.0, 175.5], [1368.0, 169.70000000000002], [1396.0, 167.30434782608697], [1400.0, 164.92307692307696], [1404.0, 176.5], [1388.0, 139.16666666666666], [1384.0, 139.5], [1380.0, 175.66666666666666], [1360.0, 134.41666666666669], [1364.0, 211.49999999999997], [1460.0, 175.3392857142857], [1420.0, 149.11111111111111], [1416.0, 148.0], [1412.0, 148.2], [1408.0, 148.0], [1456.0, 208.3181818181818], [1464.0, 178.93333333333334], [1468.0, 201.62318840579707], [1444.0, 207.0952380952381], [1440.0, 174.57894736842107], [1448.0, 174.2857142857143], [1452.0, 175.0], [1424.0, 178.21428571428572], [1428.0, 179.9375], [1432.0, 149.33333333333334], [1436.0, 174.95833333333334], [1480.0, 155.25], [1476.0, 208.24999999999997], [1484.0, 156.0], [1524.0, 158.0], [1520.0, 158.0], [1528.0, 158.0], [1532.0, 158.0], [1472.0, 155.25], [1500.0, 156.16666666666666], [1496.0, 156.25], [1492.0, 155.66666666666666], [1488.0, 156.0], [1504.0, 204.12500000000006], [1508.0, 218.00000000000003], [1512.0, 195.31249999999997], [1516.0, 158.16666666666666], [1548.0, 208.625], [1540.0, 214.0], [1544.0, 208.49999999999997], [1552.0, 209.1818181818182], [1560.0, 169.66666666666666], [1536.0, 211.0], [1568.0, 202.5], [1596.0, 167.4], [1592.0, 255.41935483870964], [1584.0, 251.73076923076923], [1588.0, 166.5], [1572.0, 223.51428571428573], [1576.0, 216.7391304347826], [1580.0, 165.25], [1600.0, 169.0], [1648.0, 214.125], [1616.0, 207.5], [1624.0, 170.0], [1628.0, 169.47619047619048], [1604.0, 257.0], [1608.0, 228.79999999999993], [1652.0, 217.57954545454538], [1656.0, 170.22222222222223], [1660.0, 173.5], [1640.0, 246.5681818181818], [1636.0, 169.99999999999997], [1632.0, 170.375], [1644.0, 199.08333333333334], [1676.0, 171.14285714285717], [1720.0, 215.48387096774192], [1664.0, 169.8], [1668.0, 169.2], [1672.0, 170.4], [1692.0, 171.4], [1688.0, 207.0289855072464], [1712.0, 222.69230769230768], [1716.0, 228.67391304347822], [1724.0, 217.49999999999997], [1696.0, 191.5], [1700.0, 171.88888888888889], [1704.0, 216.18421052631584], [1680.0, 199.71428571428572], [1684.0, 201.49315068493152], [1780.0, 184.0], [1756.0, 223.34065934065927], [1732.0, 241.05263157894737], [1760.0, 219.14285714285714], [1788.0, 185.19047619047623], [1784.0, 188.0], [1776.0, 189.46153846153845], [1740.0, 205.17142857142863], [1736.0, 223.0], [1764.0, 223.625], [1768.0, 223.33333333333334], [1772.0, 227.99999999999997], [1748.0, 267.9166666666667], [1744.0, 222.0], [1752.0, 224.85106382978722], [1728.0, 223.03846153846158], [1804.0, 220.8], [1800.0, 285.5223880597014], [1792.0, 180.66666666666666], [1816.0, 172.0], [1820.0, 149.2941176470588], [1832.0, 148.1818181818182], [1828.0, 151.5625], [1824.0, 154.0], [1852.0, 147.33333333333334], [1848.0, 152.43750000000003], [1844.0, 249.85714285714286], [1840.0, 259.20000000000005], [1836.0, 237.9642857142858], [1808.0, 186.33333333333334], [1812.0, 218.34615384615384], [1904.0, 153.43478260869568], [1856.0, 148.4], [1884.0, 180.25], [1880.0, 197.96874999999997], [1860.0, 153.0], [1888.0, 216.57142857142858], [1916.0, 72.05555555555551], [1912.0, 57.63636363636363], [1908.0, 187.5762711864407], [1868.0, 143.047619047619], [1864.0, 152.73529411764707], [1892.0, 94.18181818181817], [1900.0, 91.375], [1896.0, 93.1290322580645], [1876.0, 289.7375000000001], [1936.0, 250.54545454545453], [1976.0, 205.11764705882354], [1980.0, 284.3934426229509], [1988.0, 200.1317365269461], [1984.0, 195.07058823529414], [2000.0, 164.19575772297426], [1992.0, 172.02409638554204], [1996.0, 172.1875], [1029.0, 93.75], [1081.0, 168.45454545454547], [1053.0, 247.61290322580646], [1045.0, 96.12500000000001], [1041.0, 83.84615384615385], [1049.0, 204.4814814814814], [1077.0, 91.83333333333334], [1073.0, 97.125], [1025.0, 84.66666666666666], [1033.0, 104.0], [1037.0, 104.33333333333334], [1085.0, 224.1632653061224], [1057.0, 232.05102040816328], [1065.0, 145.89189189189196], [1061.0, 88.0], [1069.0, 89.33333333333333], [1141.0, 148.85714285714286], [1145.0, 238.3617021276596], [1137.0, 148.0], [1101.0, 137.125], [1097.0, 103.75], [1093.0, 108.125], [1089.0, 103.02702702702702], [1149.0, 192.0], [1133.0, 148.0], [1129.0, 148.20000000000002], [1125.0, 147.66666666666666], [1121.0, 147.54545454545453], [1113.0, 219.56521739130432], [1105.0, 137.53333333333333], [1117.0, 173.03846153846152], [1201.0, 206.5138888888889], [1189.0, 230.6346153846154], [1153.0, 148.88888888888889], [1157.0, 171.99999999999997], [1165.0, 147.65384615384613], [1161.0, 152.5], [1205.0, 125.82608695652173], [1209.0, 162.66666666666669], [1213.0, 162.64285714285714], [1185.0, 135.35714285714286], [1193.0, 193.3030303030303], [1173.0, 134.0], [1169.0, 140.0], [1177.0, 151.1470588235294], [1181.0, 140.85], [1221.0, 214.65909090909088], [1225.0, 213.9230769230769], [1217.0, 162.45454545454547], [1245.0, 135.0], [1241.0, 160.9090909090909], [1237.0, 161.0], [1233.0, 157.8], [1273.0, 193.0], [1265.0, 136.0], [1229.0, 130.0], [1277.0, 194.33333333333331], [1249.0, 195.58823529411762], [1253.0, 190.0769230769231], [1257.0, 205.08695652173913], [1261.0, 135.71794871794867], [1285.0, 178.55072463768116], [1289.0, 176.71428571428572], [1309.0, 174.74999999999997], [1305.0, 135.0], [1301.0, 135.0], [1297.0, 157.0], [1281.0, 148.875], [1293.0, 216.10606060606057], [1333.0, 203.15555555555554], [1329.0, 135.1], [1337.0, 159.67796610169492], [1341.0, 162.00000000000003], [1313.0, 154.50000000000003], [1317.0, 194.72727272727272], [1321.0, 135.0], [1325.0, 135.0], [1345.0, 170.5], [1373.0, 179.6666666666666], [1369.0, 170.47826086956522], [1365.0, 183.70588235294122], [1393.0, 181.71153846153848], [1357.0, 134.83333333333334], [1353.0, 135.0], [1349.0, 134.46153846153845], [1397.0, 169.4074074074074], [1401.0, 179.0], [1405.0, 178.25], [1381.0, 179.84000000000003], [1377.0, 175.6], [1389.0, 139.1], [1385.0, 139.0], [1361.0, 134.8695652173913], [1469.0, 170.34615384615384], [1457.0, 207.99999999999997], [1461.0, 189.11111111111111], [1465.0, 163.8], [1441.0, 205.0], [1453.0, 174.75], [1449.0, 174.33333333333331], [1445.0, 175.07142857142858], [1425.0, 189.42857142857142], [1429.0, 176.31764705882355], [1433.0, 163.10714285714283], [1409.0, 149.0], [1413.0, 148.53846153846152], [1417.0, 148.0], [1421.0, 148.2], [1437.0, 175.0], [1485.0, 155.52631578947367], [1481.0, 200.91525423728814], [1521.0, 158.5], [1525.0, 158.4583333333333], [1529.0, 160.72727272727272], [1533.0, 183.83333333333334], [1477.0, 166.44117647058823], [1473.0, 155.33333333333331], [1501.0, 156.7142857142857], [1497.0, 156.38095238095238], [1493.0, 156.0], [1489.0, 156.0], [1505.0, 220.82978723404253], [1509.0, 204.72727272727272], [1513.0, 222.125], [1517.0, 157.5], [1541.0, 218.6923076923077], [1585.0, 211.25714285714287], [1537.0, 223.85483870967744], [1557.0, 233.28571428571428], [1553.0, 168.6], [1561.0, 169.27777777777777], [1565.0, 170.0], [1545.0, 207.7142857142857], [1593.0, 167.14285714285714], [1569.0, 203.22222222222223], [1597.0, 168.14285714285714], [1573.0, 217.85714285714283], [1577.0, 213.6470588235294], [1581.0, 165.66666666666666], [1609.0, 210.74137931034483], [1613.0, 192.1923076923077], [1605.0, 255.5714285714286], [1629.0, 228.62222222222218], [1625.0, 169.7], [1621.0, 170.75], [1617.0, 210.43333333333334], [1601.0, 169.25], [1649.0, 209.89285714285717], [1657.0, 211.03174603174602], [1633.0, 169.52173913043478], [1637.0, 168.71428571428572], [1641.0, 257.0], [1645.0, 209.55555555555554], [1673.0, 170.33333333333334], [1693.0, 233.0], [1677.0, 261.28125], [1669.0, 170.0], [1665.0, 169.75], [1689.0, 199.49999999999997], [1713.0, 254.81481481481487], [1717.0, 219.99999999999994], [1721.0, 225.62857142857146], [1697.0, 171.0], [1701.0, 171.7], [1705.0, 222.91666666666666], [1709.0, 222.75], [1725.0, 222.8], [1681.0, 192.11627906976744], [1685.0, 195.7920792079208], [1785.0, 183.50000000000003], [1781.0, 184.15384615384613], [1789.0, 176.5], [1777.0, 184.55555555555554], [1741.0, 204.5], [1737.0, 223.28], [1761.0, 221.2659574468085], [1769.0, 229.33333333333334], [1773.0, 210.0], [1749.0, 259.9361702127659], [1745.0, 222.16666666666666], [1753.0, 217.30303030303034], [1757.0, 222.93333333333334], [1733.0, 223.0], [1729.0, 222.85714285714286], [1801.0, 201.84848484848487], [1797.0, 184.25], [1793.0, 181.0], [1813.0, 203.5925925925926], [1817.0, 180.85714285714286], [1821.0, 153.42857142857144], [1805.0, 224.0], [1833.0, 203.63636363636365], [1829.0, 147.0], [1825.0, 157.64285714285717], [1853.0, 148.07142857142856], [1849.0, 243.52941176470588], [1845.0, 244.72527472527472], [1841.0, 272.2278481012659], [1837.0, 225.0714285714285], [1809.0, 179.66666666666666], [1857.0, 222.24999999999997], [1881.0, 235.89795918367344], [1877.0, 206.4814814814815], [1885.0, 149.9130434782609], [1861.0, 153.14285714285714], [1917.0, 139.7], [1913.0, 48.58064516129032], [1909.0, 212.74999999999997], [1869.0, 144.2], [1865.0, 150.43333333333328], [1905.0, 185.8947368421053], [1889.0, 244.44680851063828], [1893.0, 127.47058823529409], [1901.0, 190.53125000000003], [1897.0, 91.63636363636364], [1873.0, 153.70000000000002], [1933.0, 256.23809523809524], [1937.0, 257.9642857142857], [1941.0, 246.75], [1945.0, 249.0], [1977.0, 277.26315789473693], [1981.0, 282.25], [1985.0, 209.9861111111113], [1989.0, 214.9117647058823], [1993.0, 224.1877394636015], [1997.0, 204.40614334470988], [519.0, 280.58823529411757], [523.0, 520.5454545454546], [517.0, 426.25], [515.0, 40.0], [513.0, 40.1], [527.0, 284.0], [537.0, 304.6875], [539.0, 196.5], [541.0, 183.375], [543.0, 240.84615384615378], [529.0, 382.2857142857143], [531.0, 239.0], [533.0, 381.6666666666667], [535.0, 419.75], [521.0, 434.0000000000001], [525.0, 473.83333333333337], [547.0, 408.23076923076917], [545.0, 83.47368421052632], [549.0, 127.0], [551.0, 363.44444444444446], [569.0, 50.6], [573.0, 50.0], [553.0, 41.0], [555.0, 49.0], [557.0, 50.166666666666664], [559.0, 50.0], [575.0, 50.5], [561.0, 50.0], [565.0, 50.333333333333336], [563.0, 50.0], [567.0, 50.8], [605.0, 353.2142857142857], [583.0, 346.42857142857144], [581.0, 337.16666666666663], [607.0, 389.25], [603.0, 178.5], [601.0, 396.8], [593.0, 312.125], [595.0, 395.0], [597.0, 214.94736842105272], [599.0, 325.1], [585.0, 235.0909090909091], [589.0, 246.49999999999997], [587.0, 42.6], [591.0, 235.06666666666672], [577.0, 50.4], [579.0, 50.0], [611.0, 223.5769230769231], [615.0, 105.54545454545453], [623.0, 45.166666666666664], [621.0, 354.3333333333333], [619.0, 342.87500000000006], [609.0, 108.66666666666666], [613.0, 117.0], [639.0, 56.5], [625.0, 45.0], [627.0, 53.125], [631.0, 57.111111111111114], [637.0, 56.55], [635.0, 56.0], [633.0, 56.36363636363637], [617.0, 44.37499999999999], [645.0, 139.3333333333333], [651.0, 260.75], [647.0, 365.7142857142857], [665.0, 47.875], [667.0, 48.2], [669.0, 54.0], [649.0, 130.49999999999997], [653.0, 149.33333333333331], [655.0, 58.3], [643.0, 46.5], [641.0, 57.09090909090909], [671.0, 53.38461538461539], [657.0, 58.0], [659.0, 59.0], [661.0, 58.16666666666667], [663.0, 49.44444444444444], [687.0, 68.46666666666665], [681.0, 332.22222222222223], [683.0, 177.07142857142853], [685.0, 171.3571428571429], [673.0, 59.0], [675.0, 59.444444444444436], [677.0, 60.19047619047619], [697.0, 249.923076923077], [699.0, 192.11111111111111], [701.0, 268.5652173913044], [703.0, 122.3076923076923], [689.0, 151.5], [691.0, 99.66666666666664], [693.0, 163.53333333333333], [695.0, 225.8666666666667], [707.0, 212.34615384615373], [705.0, 154.00000000000006], [709.0, 62.23076923076924], [713.0, 331.62500000000006], [717.0, 162.20833333333337], [719.0, 52.6], [727.0, 145.5862068965517], [735.0, 111.05263157894737], [721.0, 58.96153846153846], [725.0, 53.5], [723.0, 53.0], [733.0, 282.6190476190476], [731.0, 171.65384615384616], [729.0, 300.5], [739.0, 89.46153846153847], [751.0, 278.25], [749.0, 194.375], [747.0, 245.33333333333334], [737.0, 136.4883720930233], [741.0, 283.18749999999994], [743.0, 194.87499999999997], [767.0, 70.5], [763.0, 69.9], [761.0, 70.3529411764706], [753.0, 209.20000000000002], [755.0, 55.81818181818183], [757.0, 58.83333333333333], [759.0, 196.41666666666666], [745.0, 275.0], [793.0, 174.5], [799.0, 74.62500000000003], [787.0, 322.19047619047615], [785.0, 331.3333333333333], [789.0, 136.16666666666669], [791.0, 288.0], [783.0, 59.0], [769.0, 69.25], [771.0, 62.555555555555564], [773.0, 59.5], [775.0, 58.0], [779.0, 59.0], [777.0, 58.35714285714287], [797.0, 61.35714285714287], [825.0, 62.0], [831.0, 71.875], [817.0, 62.0], [819.0, 62.142857142857146], [821.0, 61.833333333333336], [829.0, 63.0], [805.0, 75.0], [803.0, 74.72727272727272], [815.0, 63.63636363636363], [813.0, 64.0], [811.0, 61.0], [823.0, 62.333333333333336], [837.0, 75.89999999999999], [847.0, 278.14814814814815], [843.0, 243.23529411764707], [839.0, 279.2857142857143], [835.0, 75.71428571428571], [833.0, 75.61111111111109], [857.0, 313.4285714285714], [859.0, 186.43750000000003], [861.0, 267.35999999999996], [863.0, 113.73333333333333], [849.0, 208.91666666666666], [851.0, 110.11538461538463], [853.0, 351.76190476190476], [855.0, 62.769230769230774], [841.0, 318.99999999999994], [845.0, 280.6086956521739], [867.0, 225.24999999999997], [865.0, 64.0], [869.0, 64.0], [871.0, 79.45454545454544], [889.0, 65.75], [891.0, 66.0], [873.0, 80.0], [875.0, 197.23076923076923], [877.0, 79.5], [895.0, 295.1111111111111], [881.0, 80.25], [883.0, 80.0], [885.0, 79.5], [887.0, 78.26666666666668], [893.0, 66.06666666666665], [899.0, 226.75], [911.0, 187.7], [909.0, 323.6], [907.0, 149.80645161290323], [897.0, 254.15789473684208], [901.0, 259.7857142857143], [903.0, 185.22222222222223], [921.0, 284.80357142857144], [923.0, 86.83333333333334], [925.0, 72.75], [927.0, 89.46666666666668], [913.0, 149.54545454545453], [915.0, 166.59523809523807], [917.0, 269.2500000000001], [919.0, 89.0], [905.0, 262.3571428571429], [943.0, 373.8], [957.0, 78.3], [945.0, 182.0], [941.0, 90.2], [939.0, 90.41666666666667], [937.0, 90.28571428571429], [935.0, 89.87499999999999], [933.0, 90.2777777777778], [931.0, 89.6], [929.0, 89.75000000000001], [953.0, 78.10000000000001], [955.0, 78.31818181818181], [959.0, 79.25], [947.0, 208.7692307692308], [949.0, 296.50000000000006], [951.0, 144.24], [965.0, 79.66666666666667], [975.0, 228.8372093023256], [971.0, 243.69333333333347], [967.0, 210.87500000000003], [961.0, 79.125], [985.0, 259.92], [987.0, 82.0], [991.0, 82.57142857142857], [977.0, 208.8076923076923], [979.0, 155.29999999999998], [981.0, 258.6666666666667], [983.0, 215.04347826086956], [969.0, 235.25], [973.0, 243.0], [993.0, 81.71428571428572], [1001.0, 212.98076923076917], [1003.0, 228.9333333333333], [1007.0, 130.0], [995.0, 82.0], [997.0, 82.2], [999.0, 81.85714285714285], [1005.0, 82.8], [1017.0, 83.80769230769232], [1019.0, 83.0], [1023.0, 84.33333333333333], [1009.0, 83.0], [1015.0, 82.77777777777777], [1021.0, 83.6], [1026.0, 84.28571428571429], [1050.0, 293.9117647058823], [1046.0, 96.83333333333336], [1042.0, 84.0], [1030.0, 104.0], [1038.0, 105.0], [1074.0, 97.0], [1082.0, 215.03076923076924], [1086.0, 216.34545454545454], [1058.0, 180.99999999999997], [1062.0, 247.82142857142856], [1070.0, 90.0], [1066.0, 88.66666666666667], [1102.0, 137.0], [1146.0, 194.69230769230768], [1090.0, 102.75], [1094.0, 104.0], [1098.0, 104.625], [1138.0, 148.0], [1142.0, 149.21428571428575], [1150.0, 190.8840579710145], [1134.0, 148.6], [1130.0, 148.5], [1126.0, 147.875], [1122.0, 147.72727272727272], [1110.0, 121.44117647058825], [1114.0, 212.02499999999998], [1118.0, 147.0], [1206.0, 125.8076923076923], [1158.0, 169.33333333333331], [1154.0, 189.66666666666666], [1182.0, 244.73333333333335], [1186.0, 135.0], [1214.0, 162.10000000000002], [1210.0, 162.72727272727272], [1202.0, 187.3913043478261], [1166.0, 140.18181818181822], [1162.0, 153.0], [1190.0, 214.79999999999998], [1194.0, 206.25000000000003], [1198.0, 135.84999999999997], [1174.0, 134.40000000000006], [1170.0, 138.33333333333337], [1178.0, 134.33333333333334], [1222.0, 175.16666666666666], [1218.0, 233.76923076923077], [1246.0, 135.5], [1242.0, 160.20000000000002], [1238.0, 160.5], [1234.0, 160.46153846153848], [1226.0, 130.0], [1266.0, 137.14285714285714], [1274.0, 135.87096774193546], [1278.0, 197.42276422764226], [1250.0, 181.67391304347828], [1254.0, 196.94444444444446], [1258.0, 183.29333333333335], [1262.0, 199.70833333333331], [1286.0, 178.8181818181818], [1282.0, 150.0], [1310.0, 225.21212121212122], [1306.0, 135.0], [1302.0, 135.52631578947367], [1298.0, 157.0], [1290.0, 181.06896551724142], [1334.0, 186.97368421052636], [1330.0, 135.0], [1294.0, 157.0], [1338.0, 167.54054054054055], [1342.0, 135.0], [1314.0, 157.44444444444446], [1318.0, 234.75609756097558], [1322.0, 135.1], [1358.0, 134.5], [1394.0, 163.93548387096772], [1346.0, 134.5], [1350.0, 135.0], [1354.0, 134.0], [1374.0, 177.25], [1370.0, 174.21052631578948], [1398.0, 168.3050847457628], [1402.0, 178.7], [1382.0, 199.75], [1390.0, 139.3571428571429], [1386.0, 139.07142857142858], [1406.0, 169.5], [1362.0, 183.1224489795919], [1366.0, 177.70491803278688], [1458.0, 183.25531914893614], [1422.0, 206.39999999999998], [1418.0, 148.25], [1414.0, 148.33333333333334], [1410.0, 147.83333333333331], [1462.0, 182.59183673469394], [1466.0, 155.7], [1442.0, 174.54545454545453], [1446.0, 175.0], [1450.0, 174.69230769230768], [1454.0, 174.76923076923077], [1470.0, 155.0], [1426.0, 179.21951219512192], [1430.0, 181.97222222222217], [1434.0, 173.7428571428571], [1438.0, 174.66666666666666], [1482.0, 155.5625], [1526.0, 158.5], [1534.0, 250.52941176470583], [1478.0, 163.95999999999998], [1486.0, 155.57142857142858], [1530.0, 158.5], [1502.0, 174.1818181818182], [1474.0, 154.75], [1498.0, 155.57142857142858], [1494.0, 155.725], [1490.0, 156.0], [1506.0, 219.19642857142858], [1510.0, 161.53846153846152], [1514.0, 186.9], [1518.0, 184.1764705882353], [1542.0, 208.0], [1546.0, 232.509090909091], [1554.0, 168.25], [1558.0, 168.99999999999997], [1566.0, 183.2], [1562.0, 169.21052631578948], [1538.0, 217.13636363636363], [1550.0, 227.7692307692308], [1570.0, 260.80952380952374], [1598.0, 168.05882352941177], [1594.0, 167.2], [1590.0, 166.86206896551724], [1586.0, 166.13636363636365], [1574.0, 226.9727272727272], [1578.0, 218.80303030303034], [1582.0, 233.82539682539687], [1610.0, 199.87096774193546], [1606.0, 190.22222222222223], [1602.0, 248.65625], [1618.0, 194.64285714285714], [1622.0, 169.6923076923077], [1630.0, 169.72727272727272], [1614.0, 210.2549019607843], [1650.0, 180.28571428571428], [1654.0, 220.9787234042553], [1662.0, 170.29999999999998], [1638.0, 169.5], [1642.0, 211.71428571428575], [1646.0, 222.13207547169813], [1678.0, 223.48780487804876], [1694.0, 203.4761904761905], [1666.0, 170.0], [1670.0, 170.42857142857142], [1690.0, 170.875], [1686.0, 192.65384615384613], [1714.0, 239.40476190476195], [1718.0, 222.85294117647052], [1722.0, 216.12500000000003], [1726.0, 237.60377358490564], [1698.0, 186.29166666666666], [1702.0, 174.42105263157896], [1710.0, 222.8], [1706.0, 223.0], [1682.0, 189.66666666666669], [1790.0, 176.0], [1778.0, 183.2857142857143], [1762.0, 222.63636363636365], [1786.0, 188.71428571428572], [1742.0, 205.0], [1738.0, 223.18750000000003], [1734.0, 223.3181818181818], [1766.0, 227.23999999999998], [1770.0, 245.28358208955217], [1774.0, 223.8181818181818], [1746.0, 226.75], [1750.0, 259.52941176470586], [1754.0, 254.25], [1758.0, 225.48275862068965], [1730.0, 223.0769230769231], [1798.0, 183.25], [1802.0, 223.60000000000005], [1794.0, 181.75], [1814.0, 176.8], [1818.0, 152.53846153846155], [1822.0, 151.0], [1806.0, 211.23809523809524], [1830.0, 157.0], [1854.0, 148.0], [1846.0, 150.39130434782606], [1850.0, 208.37931034482756], [1842.0, 265.7575757575758], [1834.0, 290.27272727272725], [1838.0, 212.96774193548384], [1810.0, 181.1], [1862.0, 286.00000000000006], [1886.0, 202.96969696969694], [1882.0, 248.84375000000006], [1858.0, 243.8157894736842], [1914.0, 186.125], [1910.0, 75.52631578947368], [1906.0, 195.56179775280913], [1870.0, 145.0], [1866.0, 150.16666666666666], [1890.0, 202.83333333333334], [1894.0, 228.4587155963302], [1898.0, 93.14285714285714], [1902.0, 153.03225806451613], [1874.0, 224.91836734693885], [1878.0, 212.85714285714286], [1934.0, 252.84374999999997], [1974.0, 8.0], [1946.0, 23.0], [1922.0, 37.0], [1978.0, 253.18518518518516], [1982.0, 256.69593147751556], [1954.0, 20.25], [1966.0, 13.545454545454545], [1986.0, 200.41071428571436], [1990.0, 224.07831325301197], [1994.0, 201.6140350877193], [1998.0, 199.16945606694568], [1055.0, 89.57142857142857], [1047.0, 183.99999999999997], [1043.0, 87.25], [1051.0, 157.29999999999998], [1079.0, 141.60000000000002], [1075.0, 103.0], [1027.0, 84.0], [1031.0, 104.05], [1035.0, 104.10000000000001], [1039.0, 99.49999999999999], [1083.0, 209.00000000000006], [1087.0, 186.17073170731706], [1063.0, 88.5], [1059.0, 88.22222222222223], [1067.0, 89.2], [1071.0, 90.5], [1099.0, 111.85714285714285], [1143.0, 149.0], [1119.0, 207.41666666666666], [1115.0, 193.10638297872336], [1139.0, 148.3], [1103.0, 137.0], [1095.0, 104.0], [1091.0, 106.26666666666667], [1147.0, 183.11111111111106], [1151.0, 192.49180327868856], [1135.0, 148.73333333333332], [1131.0, 147.79999999999995], [1127.0, 148.04761904761904], [1123.0, 147.88888888888889], [1107.0, 137.46153846153848], [1207.0, 144.33333333333334], [1155.0, 184.87499999999994], [1167.0, 141.0], [1163.0, 152.375], [1159.0, 152.55555555555554], [1203.0, 125.5], [1187.0, 135.625], [1211.0, 162.6], [1191.0, 217.4705882352941], [1195.0, 215.14999999999998], [1199.0, 166.64615384615388], [1175.0, 175.54545454545453], [1179.0, 135.1578947368421], [1183.0, 135.4], [1223.0, 219.85185185185188], [1219.0, 227.54545454545453], [1247.0, 136.125], [1243.0, 160.5], [1239.0, 160.33333333333334], [1235.0, 160.83333333333334], [1271.0, 136.1], [1267.0, 136.0], [1231.0, 130.0], [1275.0, 136.0], [1279.0, 143.05555555555554], [1251.0, 194.1702127659574], [1255.0, 196.40000000000006], [1259.0, 196.25], [1263.0, 177.37931034482753], [1283.0, 167.04838709677426], [1311.0, 176.63157894736844], [1307.0, 143.25], [1303.0, 136.0], [1299.0, 156.42857142857142], [1287.0, 159.34615384615384], [1291.0, 161.99999999999997], [1295.0, 156.8181818181818], [1335.0, 173.00000000000003], [1339.0, 153.8095238095238], [1343.0, 162.2], [1315.0, 135.66666666666666], [1319.0, 183.47058823529414], [1323.0, 135.0], [1359.0, 134.63333333333333], [1395.0, 166.4313725490196], [1371.0, 191.67999999999995], [1375.0, 176.42857142857142], [1347.0, 171.15151515151516], [1355.0, 134.33333333333334], [1399.0, 175.24324324324323], [1403.0, 178.75], [1379.0, 176.11764705882354], [1383.0, 175.57142857142858], [1407.0, 148.0], [1363.0, 207.66666666666663], [1367.0, 169.24444444444444], [1463.0, 182.19354838709683], [1459.0, 183.8], [1427.0, 174.87692307692308], [1423.0, 209.80645161290323], [1467.0, 154.0], [1471.0, 155.0], [1455.0, 217.66666666666666], [1451.0, 174.49999999999994], [1447.0, 174.875], [1443.0, 174.23076923076925], [1431.0, 149.13636363636365], [1439.0, 176.0], [1411.0, 148.0], [1415.0, 148.0], [1419.0, 148.2037037037037], [1435.0, 174.0], [1483.0, 155.0], [1527.0, 158.25], [1535.0, 248.26923076923072], [1479.0, 155.0], [1523.0, 157.5], [1531.0, 158.0], [1503.0, 236.984375], [1475.0, 155.46666666666667], [1495.0, 155.8], [1507.0, 209.7523809523809], [1511.0, 157.2962962962963], [1519.0, 158.0], [1515.0, 158.16666666666669], [1567.0, 186.66666666666669], [1547.0, 227.47368421052633], [1555.0, 168.8], [1559.0, 169.0], [1563.0, 169.95454545454544], [1539.0, 224.2457627118644], [1543.0, 227.64102564102566], [1551.0, 247.60465116279073], [1591.0, 227.79411764705878], [1587.0, 166.50000000000003], [1595.0, 167.2857142857143], [1599.0, 168.2], [1571.0, 229.09302325581396], [1575.0, 203.0], [1579.0, 222.55555555555554], [1583.0, 221.8235294117647], [1631.0, 169.71428571428572], [1619.0, 209.26923076923077], [1627.0, 169.25], [1623.0, 170.25], [1603.0, 216.65217391304347], [1607.0, 239.64583333333337], [1611.0, 201.91428571428574], [1615.0, 201.8039215686275], [1655.0, 169.60869565217394], [1651.0, 169.8], [1663.0, 170.14285714285714], [1635.0, 170.6], [1639.0, 170.04000000000002], [1659.0, 171.0], [1643.0, 209.05769230769232], [1647.0, 203.01041666666663], [1671.0, 169.86363636363635], [1715.0, 242.96428571428578], [1687.0, 208.59302325581388], [1683.0, 206.93749999999997], [1667.0, 170.0], [1691.0, 182.5], [1679.0, 208.31111111111113], [1719.0, 221.6153846153846], [1723.0, 223.25], [1727.0, 222.5], [1699.0, 171.54545454545456], [1703.0, 172.0], [1707.0, 223.36363636363637], [1711.0, 223.0], [1779.0, 193.0], [1755.0, 221.74242424242428], [1751.0, 238.1538461538462], [1735.0, 233.0], [1791.0, 185.5], [1787.0, 183.66666666666666], [1783.0, 183.04761904761904], [1743.0, 217.0], [1767.0, 225.63157894736844], [1763.0, 227.0], [1771.0, 210.0], [1775.0, 188.0], [1747.0, 235.0], [1759.0, 220.00000000000003], [1731.0, 222.85714285714286], [1803.0, 245.50000000000003], [1807.0, 245.6619718309859], [1799.0, 186.33333333333334], [1795.0, 181.9], [1815.0, 176.9375], [1823.0, 151.16666666666666], [1831.0, 147.0], [1827.0, 152.85714285714286], [1851.0, 237.6111111111111], [1855.0, 148.08333333333337], [1847.0, 152.804347826087], [1843.0, 261.08219178082186], [1835.0, 295.60784313725486], [1839.0, 264.3888888888889], [1811.0, 236.76595744680859], [1907.0, 239.06976744186048], [1911.0, 57.99999999999999], [1863.0, 252.42372881355928], [1887.0, 257.2823529411764], [1883.0, 238.45348837209295], [1859.0, 150.3870967741935], [1919.0, 38.8125], [1915.0, 81.05128205128206], [1871.0, 152.4516129032258], [1867.0, 148.89473684210523], [1891.0, 94.925], [1895.0, 127.13333333333331], [1899.0, 92.47058823529412], [1903.0, 255.31481481481484], [1875.0, 207.07246376811597], [1879.0, 283.1162790697674], [1931.0, 32.66666666666667], [1923.0, 37.16666666666667], [1935.0, 249.56862745098036], [1975.0, 8.0], [1939.0, 59.333333333333336], [1979.0, 269.87500000000006], [1983.0, 184.23376623376626], [1967.0, 12.0], [1991.0, 180.9082969432315], [1987.0, 241.18897637795266], [1995.0, 193.78787878787884], [1999.0, 229.36666666666667], [1.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1979.9805270000393, 165.02507200000096]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 105730.88333333333, "minX": 1.5855825E12, "maxY": 1568426.6666666667, "series": [{"data": [[1.58558262E12, 348730.31666666665], [1.58558256E12, 1262093.3333333333], [1.5855825E12, 105730.88333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58558262E12, 433499.73333333334], [1.58558256E12, 1568426.6666666667], [1.5855825E12, 131406.93333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558262E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 159.45045594799285, "minX": 1.5855825E12, "maxY": 206.4261084143706, "series": [{"data": [[1.58558262E12, 159.45045594799285], [1.58558256E12, 163.09715995647164], [1.5855825E12, 206.4261084143706]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558262E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 159.44814299001632, "minX": 1.5855825E12, "maxY": 206.41477669367092, "series": [{"data": [[1.58558262E12, 159.44814299001632], [1.58558256E12, 163.09463955385982], [1.5855825E12, 206.41477669367092]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558262E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.08902919740358006, "minX": 1.5855825E12, "maxY": 0.3367858824293374, "series": [{"data": [[1.58558262E12, 0.08902919740358006], [1.58558256E12, 0.09267410228509244], [1.5855825E12, 0.3367858824293374]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558262E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.5855825E12, "maxY": 1329.0, "series": [{"data": [[1.58558262E12, 358.0], [1.58558256E12, 257.0], [1.5855825E12, 1329.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58558262E12, 2.0], [1.58558256E12, 103.0], [1.5855825E12, 98.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58558262E12, 221.0], [1.58558256E12, 227.0], [1.5855825E12, 229.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58558262E12, 349.0], [1.58558256E12, 250.0], [1.5855825E12, 259.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58558262E12, 234.0], [1.58558256E12, 239.0], [1.5855825E12, 242.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558262E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 67.0, "minX": 1013.0, "maxY": 384.0, "series": [{"data": [[1013.0, 384.0], [3654.0, 256.0], [6757.0, 214.0], [7187.0, 67.0], [8339.0, 229.0], [9647.0, 207.0], [9701.0, 172.0], [9917.0, 195.0], [10179.0, 182.0], [10004.0, 190.0], [10096.0, 197.0], [10204.0, 199.0], [9850.0, 189.0], [10192.0, 188.0], [10684.0, 182.0], [10576.0, 182.0], [10403.0, 193.0], [10464.0, 194.0], [10417.0, 182.0], [10740.0, 189.0], [10953.0, 180.0], [11232.0, 181.0], [11210.0, 181.0], [10756.0, 194.0], [10988.0, 177.0], [11047.0, 182.0], [11317.0, 176.0], [11624.0, 177.0], [11670.0, 171.0], [11331.0, 179.0], [11756.0, 161.0], [11757.0, 166.0], [12251.0, 151.0], [12287.0, 165.0], [11806.0, 174.0], [12227.0, 151.0], [12326.0, 148.0], [12766.0, 149.0], [12472.0, 160.0], [12551.0, 162.0], [12548.0, 154.0], [12520.0, 150.0], [12645.0, 155.0], [12779.0, 149.0], [12794.0, 151.0], [12300.0, 159.0], [12880.0, 145.0], [12932.0, 157.0], [12944.0, 151.0], [12974.0, 149.0], [12979.0, 157.0], [13180.0, 144.0], [13179.0, 151.0], [13164.0, 141.0], [12917.0, 149.0], [12907.0, 157.0], [13228.0, 154.0], [13262.0, 150.0], [13058.0, 147.0], [13211.0, 151.0], [13213.0, 150.0], [13071.0, 143.0], [12866.0, 151.0], [12822.0, 160.0], [12821.0, 157.0], [13135.0, 149.0], [13087.0, 150.0], [13118.0, 149.0], [13132.0, 142.0], [13138.0, 151.0], [13003.0, 145.0], [13022.0, 146.0], [13038.0, 147.0], [12808.0, 157.0], [12812.0, 149.0], [13046.0, 156.0], [12819.0, 146.0], [13384.0, 148.0], [13317.0, 140.0], [13323.0, 154.0], [13721.0, 149.0], [13794.0, 151.0], [13327.0, 146.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 13794.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 67.0, "minX": 1013.0, "maxY": 384.0, "series": [{"data": [[1013.0, 384.0], [3654.0, 256.0], [6757.0, 214.0], [7187.0, 67.0], [8339.0, 229.0], [9647.0, 207.0], [9701.0, 172.0], [9917.0, 195.0], [10179.0, 182.0], [10004.0, 190.0], [10096.0, 197.0], [10204.0, 199.0], [9850.0, 189.0], [10192.0, 188.0], [10684.0, 182.0], [10576.0, 182.0], [10403.0, 193.0], [10464.0, 194.0], [10417.0, 182.0], [10740.0, 189.0], [10953.0, 180.0], [11232.0, 181.0], [11210.0, 181.0], [10756.0, 194.0], [10988.0, 177.0], [11047.0, 182.0], [11317.0, 176.0], [11624.0, 177.0], [11670.0, 171.0], [11331.0, 179.0], [11756.0, 161.0], [11757.0, 166.0], [12251.0, 151.0], [12287.0, 165.0], [11806.0, 174.0], [12227.0, 151.0], [12326.0, 148.0], [12766.0, 149.0], [12472.0, 160.0], [12551.0, 162.0], [12548.0, 154.0], [12520.0, 150.0], [12645.0, 155.0], [12779.0, 149.0], [12794.0, 151.0], [12300.0, 159.0], [12880.0, 145.0], [12932.0, 157.0], [12944.0, 151.0], [12974.0, 149.0], [12979.0, 157.0], [13180.0, 144.0], [13179.0, 151.0], [13164.0, 141.0], [12917.0, 149.0], [12907.0, 157.0], [13228.0, 154.0], [13262.0, 150.0], [13058.0, 147.0], [13211.0, 151.0], [13213.0, 150.0], [13071.0, 143.0], [12866.0, 151.0], [12822.0, 160.0], [12821.0, 157.0], [13135.0, 149.0], [13087.0, 150.0], [13118.0, 149.0], [13132.0, 142.0], [13138.0, 151.0], [13003.0, 145.0], [13022.0, 146.0], [13038.0, 147.0], [12808.0, 157.0], [12812.0, 149.0], [13046.0, 156.0], [12819.0, 146.0], [13384.0, 148.0], [13317.0, 140.0], [13323.0, 154.0], [13721.0, 149.0], [13794.0, 151.0], [13327.0, 146.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 13794.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1059.95, "minX": 1.5855825E12, "maxY": 12253.333333333334, "series": [{"data": [[1.58558262E12, 3353.383333333333], [1.58558256E12, 12253.333333333334], [1.5855825E12, 1059.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558262E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1026.6166666666666, "minX": 1.5855825E12, "maxY": 12253.333333333334, "series": [{"data": [[1.58558262E12, 3386.7166666666667], [1.58558256E12, 12253.333333333334], [1.5855825E12, 1026.6166666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58558262E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1026.6166666666666, "minX": 1.5855825E12, "maxY": 12253.333333333334, "series": [{"data": [[1.58558262E12, 3386.7166666666667], [1.58558256E12, 12253.333333333334], [1.5855825E12, 1026.6166666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558262E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1026.6166666666666, "minX": 1.5855825E12, "maxY": 12253.333333333334, "series": [{"data": [[1.58558262E12, 3386.7166666666667], [1.58558256E12, 12253.333333333334], [1.5855825E12, 1026.6166666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58558262E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

