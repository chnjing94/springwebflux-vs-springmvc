/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 668.0, "series": [{"data": [[0.0, 5.0], [0.1, 79.0], [0.2, 103.0], [0.3, 123.0], [0.4, 150.0], [0.5, 161.0], [0.6, 166.0], [0.7, 172.0], [0.8, 177.0], [0.9, 181.0], [1.0, 188.0], [1.1, 192.0], [1.2, 197.0], [1.3, 203.0], [1.4, 210.0], [1.5, 215.0], [1.6, 218.0], [1.7, 219.0], [1.8, 220.0], [1.9, 221.0], [2.0, 221.0], [2.1, 222.0], [2.2, 223.0], [2.3, 223.0], [2.4, 223.0], [2.5, 224.0], [2.6, 224.0], [2.7, 225.0], [2.8, 225.0], [2.9, 225.0], [3.0, 226.0], [3.1, 226.0], [3.2, 226.0], [3.3, 227.0], [3.4, 227.0], [3.5, 227.0], [3.6, 228.0], [3.7, 228.0], [3.8, 228.0], [3.9, 228.0], [4.0, 229.0], [4.1, 229.0], [4.2, 229.0], [4.3, 229.0], [4.4, 229.0], [4.5, 230.0], [4.6, 230.0], [4.7, 230.0], [4.8, 230.0], [4.9, 230.0], [5.0, 231.0], [5.1, 231.0], [5.2, 231.0], [5.3, 231.0], [5.4, 231.0], [5.5, 231.0], [5.6, 231.0], [5.7, 232.0], [5.8, 232.0], [5.9, 232.0], [6.0, 232.0], [6.1, 232.0], [6.2, 232.0], [6.3, 233.0], [6.4, 233.0], [6.5, 233.0], [6.6, 233.0], [6.7, 233.0], [6.8, 233.0], [6.9, 234.0], [7.0, 234.0], [7.1, 234.0], [7.2, 234.0], [7.3, 234.0], [7.4, 235.0], [7.5, 235.0], [7.6, 235.0], [7.7, 235.0], [7.8, 236.0], [7.9, 236.0], [8.0, 236.0], [8.1, 236.0], [8.2, 236.0], [8.3, 237.0], [8.4, 237.0], [8.5, 237.0], [8.6, 237.0], [8.7, 237.0], [8.8, 238.0], [8.9, 238.0], [9.0, 238.0], [9.1, 238.0], [9.2, 238.0], [9.3, 239.0], [9.4, 239.0], [9.5, 239.0], [9.6, 239.0], [9.7, 239.0], [9.8, 240.0], [9.9, 240.0], [10.0, 240.0], [10.1, 240.0], [10.2, 241.0], [10.3, 241.0], [10.4, 241.0], [10.5, 241.0], [10.6, 242.0], [10.7, 242.0], [10.8, 242.0], [10.9, 242.0], [11.0, 242.0], [11.1, 243.0], [11.2, 243.0], [11.3, 243.0], [11.4, 243.0], [11.5, 243.0], [11.6, 244.0], [11.7, 244.0], [11.8, 244.0], [11.9, 244.0], [12.0, 244.0], [12.1, 245.0], [12.2, 245.0], [12.3, 245.0], [12.4, 245.0], [12.5, 245.0], [12.6, 246.0], [12.7, 246.0], [12.8, 246.0], [12.9, 246.0], [13.0, 247.0], [13.1, 247.0], [13.2, 247.0], [13.3, 247.0], [13.4, 248.0], [13.5, 248.0], [13.6, 248.0], [13.7, 248.0], [13.8, 249.0], [13.9, 249.0], [14.0, 249.0], [14.1, 249.0], [14.2, 250.0], [14.3, 250.0], [14.4, 250.0], [14.5, 250.0], [14.6, 250.0], [14.7, 251.0], [14.8, 251.0], [14.9, 251.0], [15.0, 251.0], [15.1, 252.0], [15.2, 252.0], [15.3, 252.0], [15.4, 252.0], [15.5, 252.0], [15.6, 253.0], [15.7, 253.0], [15.8, 253.0], [15.9, 253.0], [16.0, 254.0], [16.1, 254.0], [16.2, 254.0], [16.3, 254.0], [16.4, 254.0], [16.5, 255.0], [16.6, 255.0], [16.7, 255.0], [16.8, 255.0], [16.9, 255.0], [17.0, 256.0], [17.1, 256.0], [17.2, 256.0], [17.3, 256.0], [17.4, 256.0], [17.5, 257.0], [17.6, 257.0], [17.7, 257.0], [17.8, 257.0], [17.9, 257.0], [18.0, 258.0], [18.1, 258.0], [18.2, 258.0], [18.3, 258.0], [18.4, 258.0], [18.5, 259.0], [18.6, 259.0], [18.7, 259.0], [18.8, 259.0], [18.9, 259.0], [19.0, 260.0], [19.1, 260.0], [19.2, 260.0], [19.3, 260.0], [19.4, 260.0], [19.5, 261.0], [19.6, 261.0], [19.7, 261.0], [19.8, 261.0], [19.9, 261.0], [20.0, 262.0], [20.1, 262.0], [20.2, 262.0], [20.3, 262.0], [20.4, 262.0], [20.5, 263.0], [20.6, 263.0], [20.7, 263.0], [20.8, 263.0], [20.9, 264.0], [21.0, 264.0], [21.1, 264.0], [21.2, 264.0], [21.3, 264.0], [21.4, 265.0], [21.5, 265.0], [21.6, 265.0], [21.7, 265.0], [21.8, 265.0], [21.9, 266.0], [22.0, 266.0], [22.1, 266.0], [22.2, 266.0], [22.3, 266.0], [22.4, 267.0], [22.5, 267.0], [22.6, 267.0], [22.7, 267.0], [22.8, 267.0], [22.9, 267.0], [23.0, 268.0], [23.1, 268.0], [23.2, 268.0], [23.3, 268.0], [23.4, 268.0], [23.5, 269.0], [23.6, 269.0], [23.7, 269.0], [23.8, 269.0], [23.9, 270.0], [24.0, 270.0], [24.1, 270.0], [24.2, 270.0], [24.3, 270.0], [24.4, 271.0], [24.5, 271.0], [24.6, 271.0], [24.7, 271.0], [24.8, 271.0], [24.9, 272.0], [25.0, 272.0], [25.1, 272.0], [25.2, 272.0], [25.3, 272.0], [25.4, 273.0], [25.5, 273.0], [25.6, 273.0], [25.7, 273.0], [25.8, 273.0], [25.9, 274.0], [26.0, 274.0], [26.1, 274.0], [26.2, 274.0], [26.3, 274.0], [26.4, 275.0], [26.5, 275.0], [26.6, 275.0], [26.7, 275.0], [26.8, 276.0], [26.9, 276.0], [27.0, 276.0], [27.1, 276.0], [27.2, 276.0], [27.3, 277.0], [27.4, 277.0], [27.5, 277.0], [27.6, 277.0], [27.7, 277.0], [27.8, 278.0], [27.9, 278.0], [28.0, 278.0], [28.1, 278.0], [28.2, 278.0], [28.3, 279.0], [28.4, 279.0], [28.5, 279.0], [28.6, 279.0], [28.7, 279.0], [28.8, 280.0], [28.9, 280.0], [29.0, 280.0], [29.1, 280.0], [29.2, 280.0], [29.3, 281.0], [29.4, 281.0], [29.5, 281.0], [29.6, 281.0], [29.7, 281.0], [29.8, 282.0], [29.9, 282.0], [30.0, 282.0], [30.1, 282.0], [30.2, 282.0], [30.3, 283.0], [30.4, 283.0], [30.5, 283.0], [30.6, 283.0], [30.7, 284.0], [30.8, 284.0], [30.9, 284.0], [31.0, 284.0], [31.1, 284.0], [31.2, 285.0], [31.3, 285.0], [31.4, 285.0], [31.5, 285.0], [31.6, 285.0], [31.7, 286.0], [31.8, 286.0], [31.9, 286.0], [32.0, 286.0], [32.1, 286.0], [32.2, 287.0], [32.3, 287.0], [32.4, 287.0], [32.5, 287.0], [32.6, 287.0], [32.7, 288.0], [32.8, 288.0], [32.9, 288.0], [33.0, 288.0], [33.1, 288.0], [33.2, 289.0], [33.3, 289.0], [33.4, 289.0], [33.5, 289.0], [33.6, 289.0], [33.7, 290.0], [33.8, 290.0], [33.9, 290.0], [34.0, 290.0], [34.1, 290.0], [34.2, 291.0], [34.3, 291.0], [34.4, 291.0], [34.5, 291.0], [34.6, 292.0], [34.7, 292.0], [34.8, 292.0], [34.9, 292.0], [35.0, 292.0], [35.1, 293.0], [35.2, 293.0], [35.3, 293.0], [35.4, 293.0], [35.5, 294.0], [35.6, 294.0], [35.7, 294.0], [35.8, 294.0], [35.9, 294.0], [36.0, 295.0], [36.1, 295.0], [36.2, 295.0], [36.3, 295.0], [36.4, 295.0], [36.5, 296.0], [36.6, 296.0], [36.7, 296.0], [36.8, 296.0], [36.9, 296.0], [37.0, 297.0], [37.1, 297.0], [37.2, 297.0], [37.3, 297.0], [37.4, 297.0], [37.5, 297.0], [37.6, 298.0], [37.7, 298.0], [37.8, 298.0], [37.9, 298.0], [38.0, 298.0], [38.1, 299.0], [38.2, 299.0], [38.3, 299.0], [38.4, 299.0], [38.5, 299.0], [38.6, 299.0], [38.7, 300.0], [38.8, 300.0], [38.9, 300.0], [39.0, 300.0], [39.1, 300.0], [39.2, 301.0], [39.3, 301.0], [39.4, 301.0], [39.5, 301.0], [39.6, 301.0], [39.7, 301.0], [39.8, 302.0], [39.9, 302.0], [40.0, 302.0], [40.1, 302.0], [40.2, 302.0], [40.3, 302.0], [40.4, 303.0], [40.5, 303.0], [40.6, 303.0], [40.7, 303.0], [40.8, 303.0], [40.9, 303.0], [41.0, 304.0], [41.1, 304.0], [41.2, 304.0], [41.3, 304.0], [41.4, 304.0], [41.5, 304.0], [41.6, 305.0], [41.7, 305.0], [41.8, 305.0], [41.9, 305.0], [42.0, 305.0], [42.1, 306.0], [42.2, 306.0], [42.3, 306.0], [42.4, 306.0], [42.5, 306.0], [42.6, 306.0], [42.7, 307.0], [42.8, 307.0], [42.9, 307.0], [43.0, 307.0], [43.1, 307.0], [43.2, 307.0], [43.3, 308.0], [43.4, 308.0], [43.5, 308.0], [43.6, 308.0], [43.7, 308.0], [43.8, 308.0], [43.9, 309.0], [44.0, 309.0], [44.1, 309.0], [44.2, 309.0], [44.3, 309.0], [44.4, 309.0], [44.5, 309.0], [44.6, 310.0], [44.7, 310.0], [44.8, 310.0], [44.9, 310.0], [45.0, 310.0], [45.1, 310.0], [45.2, 311.0], [45.3, 311.0], [45.4, 311.0], [45.5, 311.0], [45.6, 311.0], [45.7, 311.0], [45.8, 311.0], [45.9, 312.0], [46.0, 312.0], [46.1, 312.0], [46.2, 312.0], [46.3, 312.0], [46.4, 312.0], [46.5, 312.0], [46.6, 313.0], [46.7, 313.0], [46.8, 313.0], [46.9, 313.0], [47.0, 313.0], [47.1, 313.0], [47.2, 313.0], [47.3, 313.0], [47.4, 314.0], [47.5, 314.0], [47.6, 314.0], [47.7, 314.0], [47.8, 314.0], [47.9, 314.0], [48.0, 314.0], [48.1, 315.0], [48.2, 315.0], [48.3, 315.0], [48.4, 315.0], [48.5, 315.0], [48.6, 315.0], [48.7, 315.0], [48.8, 316.0], [48.9, 316.0], [49.0, 316.0], [49.1, 316.0], [49.2, 316.0], [49.3, 316.0], [49.4, 317.0], [49.5, 317.0], [49.6, 317.0], [49.7, 317.0], [49.8, 317.0], [49.9, 317.0], [50.0, 317.0], [50.1, 318.0], [50.2, 318.0], [50.3, 318.0], [50.4, 318.0], [50.5, 318.0], [50.6, 318.0], [50.7, 318.0], [50.8, 318.0], [50.9, 319.0], [51.0, 319.0], [51.1, 319.0], [51.2, 319.0], [51.3, 319.0], [51.4, 319.0], [51.5, 319.0], [51.6, 320.0], [51.7, 320.0], [51.8, 320.0], [51.9, 320.0], [52.0, 320.0], [52.1, 320.0], [52.2, 320.0], [52.3, 321.0], [52.4, 321.0], [52.5, 321.0], [52.6, 321.0], [52.7, 321.0], [52.8, 321.0], [52.9, 321.0], [53.0, 322.0], [53.1, 322.0], [53.2, 322.0], [53.3, 322.0], [53.4, 322.0], [53.5, 322.0], [53.6, 322.0], [53.7, 323.0], [53.8, 323.0], [53.9, 323.0], [54.0, 323.0], [54.1, 323.0], [54.2, 323.0], [54.3, 323.0], [54.4, 323.0], [54.5, 323.0], [54.6, 324.0], [54.7, 324.0], [54.8, 324.0], [54.9, 324.0], [55.0, 324.0], [55.1, 324.0], [55.2, 324.0], [55.3, 324.0], [55.4, 324.0], [55.5, 325.0], [55.6, 325.0], [55.7, 325.0], [55.8, 325.0], [55.9, 325.0], [56.0, 325.0], [56.1, 325.0], [56.2, 325.0], [56.3, 325.0], [56.4, 326.0], [56.5, 326.0], [56.6, 326.0], [56.7, 326.0], [56.8, 326.0], [56.9, 326.0], [57.0, 326.0], [57.1, 326.0], [57.2, 326.0], [57.3, 327.0], [57.4, 327.0], [57.5, 327.0], [57.6, 327.0], [57.7, 327.0], [57.8, 327.0], [57.9, 327.0], [58.0, 327.0], [58.1, 327.0], [58.2, 328.0], [58.3, 328.0], [58.4, 328.0], [58.5, 328.0], [58.6, 328.0], [58.7, 328.0], [58.8, 328.0], [58.9, 328.0], [59.0, 328.0], [59.1, 328.0], [59.2, 329.0], [59.3, 329.0], [59.4, 329.0], [59.5, 329.0], [59.6, 329.0], [59.7, 329.0], [59.8, 329.0], [59.9, 329.0], [60.0, 329.0], [60.1, 329.0], [60.2, 329.0], [60.3, 330.0], [60.4, 330.0], [60.5, 330.0], [60.6, 330.0], [60.7, 330.0], [60.8, 330.0], [60.9, 330.0], [61.0, 330.0], [61.1, 330.0], [61.2, 330.0], [61.3, 330.0], [61.4, 330.0], [61.5, 331.0], [61.6, 331.0], [61.7, 331.0], [61.8, 331.0], [61.9, 331.0], [62.0, 331.0], [62.1, 331.0], [62.2, 331.0], [62.3, 331.0], [62.4, 331.0], [62.5, 331.0], [62.6, 331.0], [62.7, 331.0], [62.8, 332.0], [62.9, 332.0], [63.0, 332.0], [63.1, 332.0], [63.2, 332.0], [63.3, 332.0], [63.4, 332.0], [63.5, 332.0], [63.6, 332.0], [63.7, 332.0], [63.8, 332.0], [63.9, 332.0], [64.0, 332.0], [64.1, 332.0], [64.2, 332.0], [64.3, 332.0], [64.4, 333.0], [64.5, 333.0], [64.6, 333.0], [64.7, 333.0], [64.8, 333.0], [64.9, 333.0], [65.0, 333.0], [65.1, 333.0], [65.2, 333.0], [65.3, 333.0], [65.4, 333.0], [65.5, 333.0], [65.6, 333.0], [65.7, 333.0], [65.8, 333.0], [65.9, 333.0], [66.0, 333.0], [66.1, 334.0], [66.2, 334.0], [66.3, 334.0], [66.4, 334.0], [66.5, 334.0], [66.6, 334.0], [66.7, 334.0], [66.8, 334.0], [66.9, 334.0], [67.0, 334.0], [67.1, 334.0], [67.2, 334.0], [67.3, 334.0], [67.4, 334.0], [67.5, 334.0], [67.6, 334.0], [67.7, 334.0], [67.8, 334.0], [67.9, 334.0], [68.0, 335.0], [68.1, 335.0], [68.2, 335.0], [68.3, 335.0], [68.4, 335.0], [68.5, 335.0], [68.6, 335.0], [68.7, 335.0], [68.8, 335.0], [68.9, 335.0], [69.0, 335.0], [69.1, 335.0], [69.2, 335.0], [69.3, 335.0], [69.4, 335.0], [69.5, 335.0], [69.6, 335.0], [69.7, 335.0], [69.8, 335.0], [69.9, 336.0], [70.0, 336.0], [70.1, 336.0], [70.2, 336.0], [70.3, 336.0], [70.4, 336.0], [70.5, 336.0], [70.6, 336.0], [70.7, 336.0], [70.8, 336.0], [70.9, 336.0], [71.0, 336.0], [71.1, 336.0], [71.2, 336.0], [71.3, 336.0], [71.4, 336.0], [71.5, 336.0], [71.6, 336.0], [71.7, 336.0], [71.8, 336.0], [71.9, 337.0], [72.0, 337.0], [72.1, 337.0], [72.2, 337.0], [72.3, 337.0], [72.4, 337.0], [72.5, 337.0], [72.6, 337.0], [72.7, 337.0], [72.8, 337.0], [72.9, 337.0], [73.0, 337.0], [73.1, 337.0], [73.2, 337.0], [73.3, 337.0], [73.4, 337.0], [73.5, 337.0], [73.6, 337.0], [73.7, 337.0], [73.8, 337.0], [73.9, 337.0], [74.0, 338.0], [74.1, 338.0], [74.2, 338.0], [74.3, 338.0], [74.4, 338.0], [74.5, 338.0], [74.6, 338.0], [74.7, 338.0], [74.8, 338.0], [74.9, 338.0], [75.0, 338.0], [75.1, 338.0], [75.2, 338.0], [75.3, 338.0], [75.4, 338.0], [75.5, 338.0], [75.6, 338.0], [75.7, 338.0], [75.8, 338.0], [75.9, 338.0], [76.0, 338.0], [76.1, 338.0], [76.2, 338.0], [76.3, 339.0], [76.4, 339.0], [76.5, 339.0], [76.6, 339.0], [76.7, 339.0], [76.8, 339.0], [76.9, 339.0], [77.0, 339.0], [77.1, 339.0], [77.2, 339.0], [77.3, 339.0], [77.4, 339.0], [77.5, 339.0], [77.6, 339.0], [77.7, 339.0], [77.8, 339.0], [77.9, 339.0], [78.0, 339.0], [78.1, 339.0], [78.2, 339.0], [78.3, 339.0], [78.4, 339.0], [78.5, 339.0], [78.6, 339.0], [78.7, 339.0], [78.8, 340.0], [78.9, 340.0], [79.0, 340.0], [79.1, 340.0], [79.2, 340.0], [79.3, 340.0], [79.4, 340.0], [79.5, 340.0], [79.6, 340.0], [79.7, 340.0], [79.8, 340.0], [79.9, 340.0], [80.0, 340.0], [80.1, 340.0], [80.2, 340.0], [80.3, 340.0], [80.4, 340.0], [80.5, 340.0], [80.6, 340.0], [80.7, 340.0], [80.8, 340.0], [80.9, 340.0], [81.0, 340.0], [81.1, 340.0], [81.2, 341.0], [81.3, 341.0], [81.4, 341.0], [81.5, 341.0], [81.6, 341.0], [81.7, 341.0], [81.8, 341.0], [81.9, 341.0], [82.0, 341.0], [82.1, 341.0], [82.2, 341.0], [82.3, 341.0], [82.4, 341.0], [82.5, 341.0], [82.6, 341.0], [82.7, 341.0], [82.8, 341.0], [82.9, 341.0], [83.0, 341.0], [83.1, 341.0], [83.2, 341.0], [83.3, 341.0], [83.4, 341.0], [83.5, 341.0], [83.6, 341.0], [83.7, 341.0], [83.8, 342.0], [83.9, 342.0], [84.0, 342.0], [84.1, 342.0], [84.2, 342.0], [84.3, 342.0], [84.4, 342.0], [84.5, 342.0], [84.6, 342.0], [84.7, 342.0], [84.8, 342.0], [84.9, 342.0], [85.0, 342.0], [85.1, 342.0], [85.2, 342.0], [85.3, 342.0], [85.4, 342.0], [85.5, 342.0], [85.6, 342.0], [85.7, 342.0], [85.8, 342.0], [85.9, 342.0], [86.0, 342.0], [86.1, 342.0], [86.2, 343.0], [86.3, 343.0], [86.4, 343.0], [86.5, 343.0], [86.6, 343.0], [86.7, 343.0], [86.8, 343.0], [86.9, 343.0], [87.0, 343.0], [87.1, 343.0], [87.2, 343.0], [87.3, 343.0], [87.4, 343.0], [87.5, 343.0], [87.6, 343.0], [87.7, 343.0], [87.8, 343.0], [87.9, 343.0], [88.0, 343.0], [88.1, 343.0], [88.2, 343.0], [88.3, 343.0], [88.4, 344.0], [88.5, 344.0], [88.6, 344.0], [88.7, 344.0], [88.8, 344.0], [88.9, 344.0], [89.0, 344.0], [89.1, 344.0], [89.2, 344.0], [89.3, 344.0], [89.4, 344.0], [89.5, 344.0], [89.6, 344.0], [89.7, 344.0], [89.8, 344.0], [89.9, 344.0], [90.0, 344.0], [90.1, 344.0], [90.2, 344.0], [90.3, 345.0], [90.4, 345.0], [90.5, 345.0], [90.6, 345.0], [90.7, 345.0], [90.8, 345.0], [90.9, 345.0], [91.0, 345.0], [91.1, 345.0], [91.2, 345.0], [91.3, 345.0], [91.4, 345.0], [91.5, 345.0], [91.6, 345.0], [91.7, 345.0], [91.8, 345.0], [91.9, 345.0], [92.0, 346.0], [92.1, 346.0], [92.2, 346.0], [92.3, 346.0], [92.4, 346.0], [92.5, 346.0], [92.6, 346.0], [92.7, 346.0], [92.8, 346.0], [92.9, 346.0], [93.0, 346.0], [93.1, 346.0], [93.2, 346.0], [93.3, 347.0], [93.4, 347.0], [93.5, 347.0], [93.6, 347.0], [93.7, 347.0], [93.8, 347.0], [93.9, 347.0], [94.0, 347.0], [94.1, 347.0], [94.2, 347.0], [94.3, 347.0], [94.4, 347.0], [94.5, 348.0], [94.6, 348.0], [94.7, 348.0], [94.8, 348.0], [94.9, 348.0], [95.0, 348.0], [95.1, 348.0], [95.2, 348.0], [95.3, 348.0], [95.4, 348.0], [95.5, 349.0], [95.6, 349.0], [95.7, 349.0], [95.8, 349.0], [95.9, 349.0], [96.0, 349.0], [96.1, 349.0], [96.2, 349.0], [96.3, 350.0], [96.4, 350.0], [96.5, 350.0], [96.6, 350.0], [96.7, 350.0], [96.8, 350.0], [96.9, 351.0], [97.0, 351.0], [97.1, 351.0], [97.2, 351.0], [97.3, 351.0], [97.4, 351.0], [97.5, 352.0], [97.6, 352.0], [97.7, 352.0], [97.8, 352.0], [97.9, 353.0], [98.0, 353.0], [98.1, 353.0], [98.2, 353.0], [98.3, 354.0], [98.4, 354.0], [98.5, 354.0], [98.6, 354.0], [98.7, 355.0], [98.8, 355.0], [98.9, 355.0], [99.0, 356.0], [99.1, 356.0], [99.2, 357.0], [99.3, 358.0], [99.4, 358.0], [99.5, 359.0], [99.6, 361.0], [99.7, 362.0], [99.8, 363.0], [99.9, 381.0], [100.0, 668.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 80.0, "minX": 0.0, "maxY": 613114.0, "series": [{"data": [[0.0, 1719.0], [300.0, 613114.0], [600.0, 178.0], [200.0, 373605.0], [100.0, 10745.0], [400.0, 559.0], [500.0, 80.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 254.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 999746.0, "series": [{"data": [[0.0, 999746.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 254.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 996.9146757679194, "minX": 1.58558472E12, "maxY": 2000.0, "series": [{"data": [[1.58558484E12, 2000.0], [1.58558478E12, 1994.8496066542023], [1.58558472E12, 996.9146757679194], [1.5855849E12, 1938.1956055039248]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855849E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 595.391304347826, "series": [{"data": [[2.0, 5.0], [3.0, 17.0], [4.0, 10.0], [5.0, 10.0], [6.0, 11.0], [8.0, 13.0], [10.0, 14.0], [11.0, 14.0], [12.0, 15.0], [14.0, 16.0], [16.0, 16.666666666666668], [18.0, 16.0], [19.0, 17.0], [20.0, 17.0], [21.0, 18.0], [22.0, 18.0], [23.0, 18.0], [24.0, 17.0], [26.0, 18.333333333333332], [30.0, 18.0], [32.0, 20.2], [35.0, 19.0], [37.0, 19.0], [36.0, 19.0], [39.0, 19.5], [38.0, 19.0], [41.0, 19.0], [43.0, 21.0], [47.0, 22.0], [46.0, 21.6], [51.0, 23.0], [53.0, 22.6], [55.0, 25.0], [56.0, 25.0], [61.0, 24.0], [60.0, 24.0], [62.0, 24.0], [65.0, 25.0], [64.0, 24.0], [71.0, 25.5], [70.0, 25.0], [68.0, 26.0], [75.0, 26.0], [74.0, 25.0], [73.0, 26.0], [72.0, 26.0], [77.0, 26.0], [76.0, 33.0], [83.0, 27.0], [81.0, 30.25], [86.0, 30.0], [85.0, 27.0], [89.0, 29.0], [88.0, 29.0], [95.0, 31.0], [93.0, 29.5], [92.0, 29.0], [99.0, 30.0], [97.0, 30.0], [96.0, 31.0], [103.0, 30.0], [102.0, 31.0], [101.0, 30.0], [107.0, 31.0], [106.0, 31.0], [104.0, 32.5], [115.0, 34.0], [114.0, 32.0], [117.0, 34.37499999999999], [123.0, 35.0], [127.0, 35.0], [126.0, 35.25], [124.0, 35.0], [135.0, 36.5], [134.0, 36.333333333333336], [132.0, 36.0], [131.0, 37.0], [130.0, 37.5], [129.0, 32.0], [128.0, 34.0], [141.0, 38.5], [139.0, 37.5], [138.0, 40.0], [137.0, 38.0], [136.0, 37.0], [151.0, 42.0], [150.0, 39.0], [149.0, 38.0], [148.0, 38.4], [147.0, 39.0], [146.0, 38.0], [145.0, 38.0], [144.0, 37.5], [158.0, 40.0], [156.0, 40.5], [155.0, 40.142857142857146], [154.0, 40.0], [153.0, 39.8], [152.0, 39.5], [167.0, 42.333333333333336], [166.0, 41.0], [165.0, 41.0], [164.0, 41.8], [163.0, 40.0], [162.0, 40.625], [161.0, 40.0], [175.0, 42.0], [174.0, 43.8], [171.0, 42.0], [169.0, 42.0], [181.0, 45.333333333333336], [180.0, 42.5], [179.0, 42.0], [178.0, 43.0], [177.0, 41.666666666666664], [176.0, 41.5], [190.0, 42.833333333333336], [187.0, 42.0], [186.0, 42.8], [185.0, 43.25], [199.0, 42.0], [198.0, 43.0], [197.0, 43.0], [196.0, 42.0], [195.0, 43.0], [194.0, 43.0], [192.0, 46.5], [206.0, 47.0], [205.0, 44.75], [204.0, 44.0], [202.0, 44.769230769230774], [200.0, 43.0], [215.0, 45.0], [214.0, 45.5], [213.0, 45.5], [212.0, 45.0], [211.0, 45.0], [210.0, 45.0], [208.0, 45.333333333333336], [223.0, 47.0], [222.0, 46.0], [221.0, 45.0], [219.0, 45.5], [217.0, 44.5], [216.0, 46.0], [231.0, 45.0], [229.0, 45.0], [228.0, 45.0], [227.0, 46.0], [226.0, 45.83333333333333], [225.0, 45.0], [224.0, 46.0], [239.0, 47.0], [238.0, 46.0], [236.0, 46.2], [234.0, 46.0], [233.0, 47.0], [232.0, 45.0], [247.0, 47.0], [245.0, 45.5], [244.0, 45.0], [243.0, 45.5], [240.0, 46.0], [255.0, 47.0], [252.0, 45.0], [251.0, 45.666666666666664], [250.0, 46.0], [249.0, 46.0], [248.0, 46.0], [270.0, 47.0], [271.0, 47.0], [268.0, 48.0], [259.0, 46.83333333333333], [257.0, 47.0], [267.0, 45.83333333333333], [265.0, 46.75], [264.0, 46.8], [263.0, 45.333333333333336], [262.0, 45.0], [261.0, 46.0], [260.0, 46.83333333333333], [286.0, 47.6], [287.0, 48.666666666666664], [285.0, 46.0], [284.0, 47.0], [283.0, 47.0], [282.0, 47.0], [281.0, 47.333333333333336], [280.0, 47.0], [278.0, 47.0], [273.0, 46.0], [272.0, 47.0], [275.0, 48.0], [274.0, 48.0], [277.0, 47.0], [276.0, 46.0], [302.0, 49.0], [303.0, 49.0], [301.0, 49.0], [300.0, 50.0], [299.0, 49.5], [298.0, 50.5], [297.0, 49.333333333333336], [296.0, 48.6], [295.0, 49.5], [289.0, 48.0], [288.0, 48.0], [291.0, 47.5], [290.0, 48.0], [294.0, 48.66666666666667], [293.0, 49.0], [292.0, 48.333333333333336], [318.0, 52.0], [319.0, 54.5], [317.0, 54.0], [306.0, 52.0], [305.0, 50.0], [304.0, 50.0], [315.0, 52.0], [314.0, 51.0], [313.0, 50.5], [312.0, 50.37500000000001], [310.0, 50.0], [308.0, 49.83333333333333], [334.0, 52.66666666666667], [335.0, 53.666666666666664], [333.0, 51.5], [332.0, 53.5], [331.0, 54.5], [330.0, 54.0], [329.0, 53.0], [328.0, 53.0], [327.0, 53.0], [321.0, 52.5], [323.0, 51.9], [322.0, 52.45454545454545], [326.0, 53.33333333333333], [325.0, 53.0], [348.0, 55.666666666666664], [351.0, 59.07692307692308], [350.0, 57.5], [349.0, 55.0], [347.0, 55.2], [343.0, 56.0], [337.0, 53.0], [341.0, 56.25], [340.0, 55.57142857142857], [339.0, 53.5], [338.0, 53.16666666666667], [366.0, 62.0], [367.0, 61.666666666666664], [365.0, 61.0], [355.0, 58.3], [354.0, 58.57142857142858], [353.0, 57.16666666666667], [352.0, 57.333333333333336], [363.0, 61.866666666666674], [362.0, 59.176470588235304], [361.0, 60.8], [360.0, 59.0], [359.0, 59.0], [358.0, 59.5], [357.0, 59.0], [382.0, 71.2], [383.0, 72.66666666666667], [381.0, 70.25], [371.0, 64.0], [370.0, 61.0], [369.0, 63.8], [368.0, 66.0], [379.0, 69.23076923076924], [378.0, 70.42857142857143], [377.0, 71.5], [376.0, 68.0], [375.0, 65.0], [374.0, 67.16666666666667], [373.0, 65.0], [372.0, 64.0], [398.0, 77.4], [399.0, 78.16666666666667], [397.0, 75.22222222222223], [396.0, 79.33333333333331], [395.0, 77.0], [394.0, 76.0], [393.0, 75.2], [392.0, 75.0], [391.0, 76.33333333333334], [385.0, 74.25000000000001], [384.0, 76.66666666666667], [387.0, 75.4666666666667], [386.0, 74.0], [390.0, 74.75], [389.0, 76.0], [388.0, 74.0], [414.0, 81.5], [415.0, 82.5], [413.0, 80.75000000000001], [412.0, 79.5], [411.0, 80.5], [410.0, 80.4], [409.0, 79.0], [408.0, 78.0], [407.0, 78.4375], [401.0, 76.8], [400.0, 77.0], [403.0, 76.2], [402.0, 77.625], [406.0, 77.5], [405.0, 76.25], [404.0, 75.28571428571429], [430.0, 88.3529411764706], [431.0, 88.5], [429.0, 87.0], [428.0, 86.75], [427.0, 86.0], [426.0, 86.5], [425.0, 87.0], [424.0, 86.64285714285714], [423.0, 85.6], [416.0, 82.5], [418.0, 85.33333333333333], [417.0, 83.66666666666666], [422.0, 85.0], [420.0, 83.64285714285714], [446.0, 109.0], [447.0, 109.33333333333333], [445.0, 108.33333333333333], [444.0, 110.9], [443.0, 107.57142857142857], [442.0, 101.75], [441.0, 98.25], [440.0, 99.0], [439.0, 93.5], [433.0, 88.16666666666667], [435.0, 90.8], [434.0, 89.0], [437.0, 91.6], [436.0, 91.0], [461.0, 294.87499999999994], [457.0, 253.91111111111113], [458.0, 115.99999999999999], [460.0, 147.7142857142857], [451.0, 111.0], [450.0, 109.0], [449.0, 109.33333333333333], [448.0, 109.0], [462.0, 301.7567567567568], [463.0, 385.07692307692304], [459.0, 111.0], [456.0, 113.66666666666667], [455.0, 111.33333333333334], [453.0, 110.0], [452.0, 110.25], [466.0, 341.1428571428571], [464.0, 249.80000000000004], [465.0, 110.5], [467.0, 242.81249999999997], [476.0, 403.7647058823529], [477.0, 321.15384615384613], [478.0, 495.9583333333334], [479.0, 415.8846153846155], [468.0, 125.15], [469.0, 245.71428571428572], [470.0, 206.72727272727272], [471.0, 129.66666666666669], [472.0, 328.21739130434787], [473.0, 212.58620689655172], [474.0, 447.3913043478261], [475.0, 533.7777777777778], [481.0, 412.95652173913044], [480.0, 558.0400000000001], [482.0, 595.391304347826], [483.0, 426.1333333333333], [484.0, 448.5], [485.0, 80.5], [486.0, 473.888888888889], [487.0, 313.4000000000001], [488.0, 484.6666666666667], [494.0, 94.14285714285715], [495.0, 119.25], [492.0, 107.77777777777777], [493.0, 91.5], [489.0, 111.05882352941177], [491.0, 113.0], [490.0, 112.66666666666667], [496.0, 85.5], [499.0, 118.57894736842104], [498.0, 122.25], [497.0, 122.81818181818183], [508.0, 93.5], [509.0, 87.0], [510.0, 117.55555555555556], [511.0, 119.73333333333333], [500.0, 117.3], [501.0, 101.0], [502.0, 104.16666666666667], [503.0, 111.0], [504.0, 112.66666666666667], [505.0, 118.42857142857143], [507.0, 119.4], [506.0, 122.76190476190476], [514.0, 123.0], [512.0, 112.5], [526.0, 122.8], [524.0, 127.2], [516.0, 115.66666666666667], [518.0, 121.14285714285715], [528.0, 125.66666666666667], [542.0, 135.75], [540.0, 142.83333333333334], [538.0, 133.0], [536.0, 128.72727272727272], [530.0, 126.44444444444444], [532.0, 127.07692307692311], [534.0, 129.57142857142856], [520.0, 118.7], [522.0, 119.5], [546.0, 141.28571428571422], [544.0, 131.66666666666666], [558.0, 124.30769230769229], [554.0, 123.28571428571428], [556.0, 120.75], [548.0, 148.33333333333337], [550.0, 145.6], [560.0, 143.0], [574.0, 162.2941176470588], [572.0, 134.16666666666666], [570.0, 149.77777777777777], [568.0, 178.6], [562.0, 106.28571428571429], [564.0, 163.2857142857143], [566.0, 130.16666666666666], [552.0, 145.8], [578.0, 151.75], [576.0, 154.00000000000003], [590.0, 172.125], [588.0, 143.66666666666666], [586.0, 178.14285714285714], [580.0, 151.33333333333331], [582.0, 180.2], [592.0, 156.53846153846152], [606.0, 169.8], [604.0, 162.00000000000003], [602.0, 180.5], [600.0, 186.16666666666666], [594.0, 164.88888888888889], [596.0, 131.75000000000003], [598.0, 180.1176470588235], [584.0, 191.27272727272725], [610.0, 182.49999999999997], [608.0, 155.05882352941174], [622.0, 168.71428571428572], [620.0, 164.125], [618.0, 109.86666666666666], [612.0, 148.28571428571428], [614.0, 148.09090909090907], [624.0, 101.5], [638.0, 159.69230769230768], [636.0, 134.25], [634.0, 169.5], [632.0, 141.0], [626.0, 119.0], [628.0, 133.83333333333334], [630.0, 102.5], [616.0, 146.66666666666666], [642.0, 124.28571428571429], [640.0, 176.57142857142856], [652.0, 93.0], [654.0, 120.3809523809524], [650.0, 186.33333333333331], [644.0, 151.0], [646.0, 144.41666666666666], [656.0, 131.16666666666666], [670.0, 111.5], [668.0, 173.2], [664.0, 94.44444444444444], [666.0, 162.0769230769231], [658.0, 116.4], [660.0, 118.76666666666664], [662.0, 143.14814814814812], [648.0, 148.55555555555554], [674.0, 177.83333333333334], [672.0, 171.44444444444446], [684.0, 135.64000000000001], [686.0, 109.42857142857143], [682.0, 149.29411764705878], [676.0, 123.83333333333333], [678.0, 161.11111111111111], [688.0, 203.1538461538462], [702.0, 175.10344827586206], [700.0, 214.5], [698.0, 173.25], [696.0, 155.0], [690.0, 135.7037037037037], [692.0, 123.0], [694.0, 160.58823529411768], [680.0, 151.00000000000003], [706.0, 163.2], [728.0, 220.94117647058823], [704.0, 189.27272727272725], [708.0, 144.83333333333334], [730.0, 133.38888888888889], [732.0, 214.7272727272727], [734.0, 216.11764705882354], [716.0, 98.8], [714.0, 99.33333333333333], [712.0, 99.66666666666667], [718.0, 138.10000000000002], [720.0, 167.99999999999997], [722.0, 226.0], [724.0, 171.62499999999994], [726.0, 148.25], [740.0, 157.33333333333331], [738.0, 143.76190476190476], [736.0, 133.22222222222223], [750.0, 143.42857142857144], [748.0, 208.1875], [742.0, 102.0], [752.0, 102.0], [764.0, 111.0], [766.0, 183.38888888888886], [762.0, 181.66666666666663], [760.0, 202.5], [754.0, 130.04347826086956], [756.0, 139.65384615384613], [758.0, 197.61111111111111], [744.0, 204.7894736842105], [746.0, 117.33333333333333], [770.0, 183.87499999999997], [768.0, 206.5], [780.0, 188.66666666666666], [778.0, 123.1111111111111], [772.0, 130.60000000000002], [774.0, 203.88888888888889], [784.0, 197.75], [798.0, 179.375], [794.0, 148.3], [796.0, 209.33333333333331], [792.0, 211.55555555555554], [786.0, 158.42857142857142], [788.0, 115.0], [790.0, 160.81081081081078], [776.0, 133.75], [802.0, 187.33333333333334], [800.0, 188.3846153846154], [814.0, 146.11764705882356], [812.0, 194.75], [810.0, 179.33333333333331], [804.0, 153.58181818181825], [806.0, 150.9090909090909], [816.0, 192.88888888888889], [830.0, 150.37037037037035], [828.0, 164.54545454545456], [826.0, 186.1739130434782], [824.0, 191.41666666666669], [818.0, 140.73333333333335], [820.0, 183.58823529411765], [822.0, 170.42857142857142], [808.0, 181.20000000000005], [834.0, 184.04000000000005], [832.0, 181.29411764705878], [846.0, 171.39999999999998], [844.0, 182.70000000000002], [842.0, 174.0], [836.0, 154.26086956521735], [838.0, 186.16666666666666], [848.0, 163.28571428571425], [862.0, 171.45454545454544], [860.0, 158.43478260869566], [858.0, 166.66666666666677], [856.0, 162.13043478260875], [850.0, 166.35714285714283], [852.0, 167.5], [854.0, 163.81249999999997], [840.0, 155.69444444444446], [868.0, 179.33333333333334], [870.0, 176.78947368421055], [864.0, 163.42857142857142], [878.0, 172.60000000000002], [876.0, 178.41176470588235], [866.0, 176.0], [888.0, 163.9333333333333], [890.0, 165.27272727272728], [892.0, 166.0], [894.0, 161.83333333333334], [880.0, 175.64705882352942], [882.0, 173.67741935483872], [884.0, 167.67999999999998], [886.0, 172.18181818181816], [872.0, 168.21428571428572], [874.0, 174.36111111111111], [898.0, 164.9130434782609], [896.0, 164.82142857142856], [910.0, 165.5], [908.0, 172.20000000000002], [906.0, 165.8235294117647], [900.0, 166.3548387096774], [902.0, 160.79999999999998], [912.0, 164.4], [926.0, 165.5], [924.0, 172.23076923076923], [922.0, 170.6153846153846], [920.0, 168.57142857142856], [914.0, 170.46153846153845], [916.0, 162.1875], [918.0, 164.77777777777777], [904.0, 164.20833333333334], [930.0, 170.125], [928.0, 169.84848484848487], [942.0, 165.76923076923077], [940.0, 166.81818181818184], [938.0, 164.07692307692307], [932.0, 168.18750000000003], [934.0, 166.45833333333334], [944.0, 168.25], [958.0, 166.59183673469386], [956.0, 159.00000000000003], [954.0, 165.71428571428572], [952.0, 165.71428571428572], [946.0, 159.37500000000003], [948.0, 160.60714285714292], [950.0, 162.2307692307692], [936.0, 168.72727272727272], [962.0, 155.20833333333331], [960.0, 152.36363636363637], [974.0, 159.9259259259259], [972.0, 160.04000000000002], [970.0, 154.1111111111111], [964.0, 165.22727272727275], [966.0, 163.30769230769232], [976.0, 160.59999999999994], [990.0, 179.1111111111111], [988.0, 179.25], [986.0, 166.24528301886795], [978.0, 151.5], [980.0, 164.78378378378378], [982.0, 168.35483870967738], [968.0, 153.35294117647058], [994.0, 180.375], [992.0, 172.12500000000003], [1006.0, 192.75000000000003], [1004.0, 186.65217391304353], [996.0, 186.2], [998.0, 181.83333333333334], [1016.0, 173.0], [1018.0, 173.65217391304344], [1020.0, 174.2222222222222], [1022.0, 170.90909090909088], [1008.0, 178.9047619047619], [1010.0, 176.24999999999997], [1012.0, 169.12500000000003], [1014.0, 175.41176470588238], [1000.0, 180.75], [1002.0, 180.73529411764707], [1028.0, 172.15625], [1024.0, 170.81818181818184], [1052.0, 167.1], [1048.0, 175.00000000000003], [1044.0, 182.64285714285714], [1040.0, 171.61111111111111], [1032.0, 172.11111111111111], [1036.0, 177.51851851851853], [1056.0, 182.5], [1084.0, 174.00000000000003], [1080.0, 168.53125], [1076.0, 181.5], [1072.0, 173.3], [1060.0, 178.1538461538462], [1064.0, 185.30434782608694], [1068.0, 134.22727272727272], [1088.0, 183.14285714285717], [1092.0, 183.1], [1116.0, 199.54838709677415], [1112.0, 195.85714285714286], [1108.0, 198.76923076923077], [1104.0, 201.2], [1096.0, 194.8888888888889], [1100.0, 196.59999999999997], [1120.0, 208.51785714285714], [1148.0, 214.83999999999997], [1144.0, 212.0555555555556], [1140.0, 212.4375], [1136.0, 212.18750000000003], [1124.0, 201.47368421052633], [1128.0, 204.93939393939388], [1132.0, 208.57142857142856], [1156.0, 215.11111111111111], [1152.0, 220.35294117647055], [1180.0, 231.91666666666669], [1176.0, 225.69230769230768], [1172.0, 223.27586206896555], [1168.0, 220.15384615384616], [1160.0, 222.99999999999997], [1164.0, 220.64705882352942], [1184.0, 232.4], [1212.0, 221.66666666666666], [1208.0, 223.73684210526318], [1204.0, 222.5], [1200.0, 223.86956521739125], [1188.0, 224.99999999999997], [1192.0, 232.33333333333334], [1196.0, 222.42105263157896], [1216.0, 222.07142857142856], [1224.0, 235.6], [1228.0, 229.47499999999994], [1220.0, 229.72727272727272], [1244.0, 240.1818181818182], [1240.0, 241.49999999999997], [1236.0, 222.53846153846155], [1232.0, 229.65714285714287], [1248.0, 231.35714285714286], [1276.0, 245.2], [1272.0, 245.2], [1268.0, 236.8947368421053], [1264.0, 235.76470588235296], [1252.0, 231.99999999999997], [1256.0, 238.53333333333333], [1260.0, 235.1153846153846], [1284.0, 245.2333333333333], [1292.0, 238.3428571428571], [1280.0, 242.68421052631578], [1308.0, 241.1063829787234], [1304.0, 241.53571428571428], [1300.0, 239.93750000000003], [1288.0, 243.42307692307696], [1328.0, 243.2142857142857], [1332.0, 250.2857142857143], [1336.0, 249.1818181818182], [1340.0, 252.63636363636363], [1312.0, 243.85185185185185], [1316.0, 244.20000000000007], [1320.0, 252.0], [1324.0, 232.8571428571429], [1296.0, 238.10810810810807], [1348.0, 246.33333333333331], [1356.0, 249.05263157894737], [1344.0, 252.31250000000006], [1372.0, 242.36363636363635], [1368.0, 243.24999999999997], [1364.0, 249.79999999999998], [1352.0, 243.11111111111111], [1392.0, 255.07407407407416], [1396.0, 253.88095238095244], [1400.0, 262.35999999999996], [1404.0, 252.15384615384613], [1376.0, 248.64705882352936], [1380.0, 246.1923076923077], [1384.0, 244.94871794871793], [1388.0, 242.25000000000003], [1360.0, 240.3888888888889], [1412.0, 252.85714285714283], [1420.0, 269.09999999999997], [1408.0, 248.84999999999997], [1432.0, 270.9523809523809], [1436.0, 281.87499999999994], [1428.0, 274.5909090909091], [1416.0, 266.3870967741936], [1456.0, 289.75000000000006], [1460.0, 295.33333333333337], [1464.0, 290.4285714285715], [1468.0, 281.368932038835], [1440.0, 263.6875], [1444.0, 271.33783783783775], [1448.0, 289.36363636363643], [1452.0, 273.2142857142857], [1424.0, 277.77777777777777], [1476.0, 289.23529411764713], [1472.0, 303.75], [1500.0, 289.6470588235294], [1496.0, 293.84615384615387], [1492.0, 297.96875], [1480.0, 288.43749999999994], [1484.0, 293.9333333333334], [1504.0, 289.7272727272727], [1532.0, 273.27777777777777], [1528.0, 290.02222222222224], [1524.0, 294.1511627906975], [1520.0, 272.7777777777778], [1508.0, 288.87499999999994], [1512.0, 286.3999999999999], [1516.0, 284.2068965517241], [1488.0, 303.0], [1540.0, 277.0], [1536.0, 262.2727272727273], [1564.0, 228.13333333333335], [1560.0, 189.0], [1556.0, 232.73333333333335], [1544.0, 267.5], [1548.0, 225.70967741935485], [1568.0, 241.18749999999997], [1596.0, 196.59999999999997], [1592.0, 202.20000000000002], [1588.0, 219.0], [1584.0, 206.4], [1572.0, 203.85185185185188], [1576.0, 243.57894736842113], [1580.0, 214.61111111111111], [1552.0, 197.78571428571428], [1604.0, 227.75], [1600.0, 193.8421052631579], [1628.0, 191.62962962962962], [1624.0, 199.21875], [1620.0, 201.75], [1608.0, 201.9230769230769], [1612.0, 195.64285714285705], [1632.0, 187.1034482758621], [1660.0, 268.22222222222223], [1656.0, 173.80769230769232], [1652.0, 195.19230769230765], [1648.0, 201.49999999999997], [1636.0, 208.2142857142857], [1640.0, 198.78048780487805], [1644.0, 285.1764705882353], [1616.0, 201.06249999999997], [1668.0, 275.2195121951219], [1664.0, 238.29999999999998], [1692.0, 191.3157894736842], [1688.0, 328.84615384615387], [1684.0, 178.99999999999997], [1672.0, 206.03448275862073], [1676.0, 173.41379310344826], [1696.0, 187.74999999999997], [1724.0, 213.75], [1720.0, 222.6875], [1716.0, 217.56000000000003], [1712.0, 247.125], [1700.0, 224.39473684210526], [1704.0, 220.14285714285714], [1708.0, 286.6], [1680.0, 193.52173913043475], [1732.0, 256.3333333333333], [1728.0, 310.2857142857143], [1756.0, 265.7142857142857], [1752.0, 264.9090909090909], [1748.0, 231.2], [1736.0, 288.2857142857143], [1740.0, 231.36363636363635], [1760.0, 243.46666666666667], [1788.0, 286.3636363636363], [1784.0, 293.8333333333333], [1780.0, 276.86666666666673], [1776.0, 279.57142857142856], [1764.0, 273.50000000000006], [1768.0, 249.44444444444446], [1772.0, 309.58333333333337], [1744.0, 237.0625], [1796.0, 285.65217391304344], [1792.0, 285.625], [1820.0, 304.17241379310354], [1816.0, 292.6842105263159], [1812.0, 304.75], [1800.0, 301.6666666666667], [1804.0, 311.48], [1824.0, 339.5], [1852.0, 312.11764705882354], [1848.0, 308.7647058823529], [1844.0, 316.83333333333337], [1840.0, 305.0740740740741], [1828.0, 314.14285714285717], [1832.0, 315.8571428571429], [1836.0, 327.0769230769231], [1808.0, 316.2222222222222], [1868.0, 365.85], [1856.0, 327.3333333333333], [1860.0, 490.2321428571429], [1864.0, 455.9599999999999], [1884.0, 312.5], [1888.0, 382.16216216216213], [1916.0, 328.25925925925935], [1912.0, 375.96000000000004], [1908.0, 357.2499999999999], [1904.0, 360.1369863013698], [1892.0, 303.6666666666667], [1896.0, 352.3636363636364], [1900.0, 313.3076923076923], [1872.0, 310.4166666666667], [1876.0, 321.57894736842104], [1880.0, 389.64000000000004], [1932.0, 309.83333333333337], [1924.0, 325.35483870967744], [1920.0, 379.75], [1948.0, 345.99999999999994], [1944.0, 298.7142857142858], [1928.0, 319.62500000000006], [1968.0, 267.34999999999997], [1972.0, 267.09090909090907], [1976.0, 301.9655172413793], [1980.0, 324.59999999999997], [1952.0, 296.4545454545455], [1956.0, 294.89473684210526], [1960.0, 310.1111111111111], [1964.0, 276.0], [1936.0, 298.0322580645161], [1940.0, 283.75], [1984.0, 284.4], [1988.0, 316.40277777777766], [1992.0, 304.9000000000001], [1996.0, 325.7320574162679], [2000.0, 305.87286342244454], [1025.0, 185.66666666666666], [1053.0, 187.8571428571429], [1049.0, 187.65853658536585], [1045.0, 171.40909090909096], [1041.0, 178.30769230769238], [1029.0, 183.4], [1033.0, 167.7777777777778], [1037.0, 173.90909090909088], [1085.0, 184.66666666666663], [1081.0, 194.15789473684202], [1077.0, 193.6969696969697], [1073.0, 146.0], [1057.0, 191.11999999999998], [1061.0, 176.85714285714286], [1065.0, 165.95454545454547], [1069.0, 156.0625], [1097.0, 194.4], [1101.0, 202.45454545454544], [1093.0, 193.78787878787875], [1117.0, 204.71428571428572], [1113.0, 203.30769230769232], [1109.0, 199.04761904761904], [1105.0, 198.625], [1089.0, 200.33333333333334], [1149.0, 213.82051282051276], [1145.0, 214.57142857142858], [1141.0, 212.2857142857143], [1137.0, 209.72413793103445], [1121.0, 197.22580645161287], [1125.0, 206.44117647058823], [1129.0, 208.20000000000005], [1133.0, 212.60000000000002], [1153.0, 214.6315789473684], [1181.0, 221.70000000000002], [1177.0, 226.9615384615384], [1173.0, 224.53333333333333], [1169.0, 217.33333333333334], [1157.0, 214.5], [1161.0, 215.0], [1165.0, 216.0178571428571], [1213.0, 225.81818181818184], [1209.0, 221.0526315789474], [1205.0, 224.8064516129033], [1201.0, 225.13333333333333], [1185.0, 225.25], [1189.0, 220.2444444444444], [1193.0, 225.1], [1197.0, 219.66666666666666], [1217.0, 228.58333333333331], [1245.0, 234.39285714285714], [1241.0, 228.20454545454552], [1237.0, 233.99999999999997], [1233.0, 228.1219512195122], [1221.0, 225.56521739130432], [1225.0, 231.5], [1229.0, 222.99999999999997], [1249.0, 235.21052631578948], [1277.0, 241.8372093023256], [1273.0, 233.00000000000003], [1269.0, 240.28571428571425], [1265.0, 235.8571428571429], [1253.0, 233.5], [1257.0, 243.8666666666667], [1261.0, 228.49999999999997], [1285.0, 237.5185185185185], [1281.0, 242.45161290322577], [1309.0, 245.07999999999998], [1305.0, 238.3548387096774], [1301.0, 235.95454545454547], [1289.0, 247.15384615384616], [1293.0, 241.67999999999995], [1313.0, 238.8888888888889], [1341.0, 253.20000000000002], [1337.0, 245.32], [1333.0, 250.35714285714283], [1329.0, 248.3571428571429], [1317.0, 240.07142857142856], [1321.0, 244.27272727272725], [1325.0, 238.7014925373135], [1297.0, 236.00000000000003], [1349.0, 248.63636363636363], [1345.0, 248.28571428571428], [1373.0, 249.45454545454547], [1369.0, 248.13793103448273], [1353.0, 243.18421052631584], [1357.0, 245.45454545454547], [1377.0, 250.5], [1401.0, 255.96774193548382], [1405.0, 258.74074074074076], [1393.0, 250.0], [1397.0, 260.6666666666667], [1381.0, 247.58], [1385.0, 258.99999999999994], [1389.0, 243.55555555555554], [1361.0, 239.72727272727272], [1365.0, 244.43396226415098], [1421.0, 266.73333333333335], [1413.0, 269.05882352941177], [1437.0, 271.57142857142856], [1433.0, 274.9655172413793], [1429.0, 273.53846153846155], [1417.0, 268.625], [1457.0, 279.24242424242425], [1461.0, 270.21739130434787], [1465.0, 283.4375], [1469.0, 285.0], [1441.0, 275.1212121212122], [1445.0, 283.0645161290322], [1449.0, 270.0], [1453.0, 277.4838709677419], [1425.0, 269.2467532467533], [1477.0, 300.0], [1473.0, 291.875], [1501.0, 293.5428571428572], [1497.0, 293.5333333333334], [1493.0, 289.16666666666663], [1481.0, 291.5714285714286], [1485.0, 289.1052631578948], [1505.0, 291.11538461538464], [1533.0, 312.94000000000005], [1529.0, 293.17708333333326], [1525.0, 269.57894736842104], [1521.0, 259.99999999999994], [1509.0, 294.8695652173913], [1513.0, 295.88235294117646], [1517.0, 286.99999999999983], [1489.0, 299.6190476190476], [1541.0, 264.53124999999994], [1537.0, 263.0], [1565.0, 214.50000000000003], [1561.0, 243.6111111111111], [1557.0, 196.49999999999997], [1545.0, 236.88235294117646], [1549.0, 212.4117647058823], [1569.0, 217.72727272727275], [1597.0, 194.50909090909093], [1593.0, 206.9655172413793], [1589.0, 201.95833333333331], [1585.0, 251.0666666666667], [1573.0, 200.04347826086956], [1577.0, 226.68627450980392], [1581.0, 229.95454545454544], [1553.0, 204.34782608695653], [1605.0, 235.75675675675672], [1601.0, 214.90322580645167], [1629.0, 191.7142857142857], [1625.0, 200.91111111111115], [1621.0, 207.0], [1609.0, 195.5714285714286], [1613.0, 184.20000000000002], [1633.0, 192.32142857142853], [1661.0, 196.0], [1657.0, 177.65217391304347], [1653.0, 252.29166666666669], [1649.0, 218.0], [1637.0, 211.77272727272728], [1641.0, 230.81249999999997], [1645.0, 273.4324324324324], [1617.0, 216.06976744186048], [1669.0, 256.7692307692308], [1665.0, 179.625], [1693.0, 268.61111111111114], [1689.0, 203.30769230769232], [1685.0, 216.8125], [1673.0, 202.66666666666669], [1677.0, 186.10000000000005], [1697.0, 194.54999999999998], [1725.0, 322.6666666666667], [1721.0, 215.1538461538462], [1717.0, 306.0], [1713.0, 285.8333333333333], [1701.0, 209.07999999999998], [1705.0, 257.16666666666663], [1709.0, 253.07142857142858], [1681.0, 255.16666666666663], [1733.0, 259.46153846153845], [1729.0, 231.57142857142858], [1757.0, 245.60000000000002], [1753.0, 245.3571428571429], [1737.0, 219.6153846153846], [1741.0, 244.54545454545456], [1761.0, 283.08333333333337], [1789.0, 297.3636363636364], [1785.0, 271.375], [1781.0, 261.90000000000003], [1777.0, 273.6666666666667], [1765.0, 286.0], [1769.0, 273.6666666666667], [1773.0, 276.5833333333333], [1745.0, 340.5], [1749.0, 310.0], [1797.0, 299.8], [1793.0, 296.8636363636363], [1821.0, 313.5], [1817.0, 292.83333333333326], [1813.0, 319.3], [1801.0, 289.58823529411757], [1805.0, 302.5263157894737], [1841.0, 305.8], [1845.0, 310.7], [1849.0, 301.3333333333333], [1853.0, 310.61904761904765], [1825.0, 311.80645161290323], [1829.0, 316.0], [1833.0, 305.5], [1837.0, 321.33333333333337], [1809.0, 293.7407407407407], [1869.0, 317.4736842105263], [1865.0, 427.2558139534884], [1857.0, 383.42857142857144], [1861.0, 489.2857142857143], [1885.0, 361.31250000000006], [1881.0, 407.5079365079364], [1905.0, 325.7647058823529], [1909.0, 287.037037037037], [1913.0, 304.7272727272727], [1917.0, 363.8333333333333], [1889.0, 404.57142857142856], [1893.0, 401.80000000000007], [1897.0, 335.04999999999995], [1901.0, 303.3333333333333], [1873.0, 313.6], [1877.0, 385.64285714285705], [1929.0, 275.14814814814815], [1925.0, 282.33333333333337], [1921.0, 392.4], [1949.0, 275.1666666666667], [1945.0, 272.5], [1933.0, 287.67499999999995], [1953.0, 316.7692307692308], [1981.0, 289.22222222222223], [1977.0, 270.5], [1973.0, 292.0], [1969.0, 274.3043478260869], [1957.0, 283.7142857142857], [1961.0, 263.9], [1965.0, 272.90000000000003], [1937.0, 269.25000000000006], [1941.0, 267.80000000000007], [1985.0, 309.62], [1989.0, 269.0399999999999], [1993.0, 334.0555555555555], [1997.0, 308.46153846153857], [519.0, 109.83333333333333], [513.0, 116.0], [525.0, 125.33333333333333], [527.0, 126.0909090909091], [515.0, 114.0], [543.0, 125.24999999999997], [541.0, 134.78571428571428], [539.0, 134.76470588235293], [537.0, 129.5], [529.0, 125.07692307692308], [531.0, 127.125], [533.0, 129.5], [535.0, 132.8181818181818], [521.0, 115.0], [523.0, 124.0], [547.0, 141.8461538461538], [559.0, 140.91666666666666], [557.0, 159.0], [555.0, 106.0], [545.0, 147.3], [549.0, 131.5], [551.0, 135.1764705882353], [575.0, 171.4], [573.0, 146.58333333333337], [571.0, 132.22222222222223], [569.0, 127.0], [561.0, 128.85714285714286], [563.0, 162.3636363636364], [565.0, 171.0], [567.0, 169.375], [553.0, 151.57142857142858], [579.0, 154.88888888888889], [591.0, 169.58333333333334], [589.0, 187.00000000000003], [587.0, 176.875], [577.0, 149.875], [581.0, 183.28571428571428], [583.0, 160.8421052631579], [607.0, 163.12499999999997], [605.0, 216.5], [603.0, 135.3529411764706], [601.0, 214.25], [593.0, 176.5], [595.0, 131.5], [597.0, 177.44444444444446], [599.0, 148.9333333333333], [585.0, 179.75], [611.0, 183.77777777777774], [623.0, 155.60000000000002], [621.0, 171.57142857142856], [619.0, 144.49999999999997], [609.0, 184.7], [613.0, 164.54545454545453], [615.0, 159.76923076923077], [625.0, 166.07142857142853], [639.0, 146.53333333333336], [637.0, 166.66666666666669], [635.0, 130.66666666666666], [633.0, 163.33333333333334], [627.0, 141.33333333333331], [629.0, 160.42857142857144], [631.0, 103.66666666666667], [617.0, 158.875], [643.0, 117.0], [655.0, 135.8], [653.0, 167.72727272727272], [651.0, 142.66666666666666], [641.0, 161.66666666666666], [645.0, 145.33333333333334], [647.0, 141.29411764705878], [671.0, 110.83333333333334], [669.0, 146.36842105263156], [667.0, 135.6], [665.0, 149.47058823529412], [657.0, 152.14285714285714], [659.0, 142.76923076923077], [661.0, 137.71428571428572], [663.0, 156.8], [649.0, 182.0], [675.0, 190.5], [687.0, 161.54545454545456], [685.0, 93.75], [683.0, 173.0], [673.0, 131.53846153846152], [677.0, 166.8], [679.0, 189.8181818181818], [703.0, 123.14814814814815], [701.0, 181.375], [699.0, 115.33333333333334], [697.0, 154.5], [689.0, 142.44444444444446], [691.0, 109.53333333333333], [693.0, 96.72727272727272], [695.0, 143.57142857142858], [681.0, 133.4], [711.0, 100.5], [705.0, 149.9230769230769], [707.0, 180.5], [709.0, 99.85714285714285], [729.0, 134.64285714285717], [731.0, 139.0625], [733.0, 127.5], [735.0, 167.37499999999997], [717.0, 184.16666666666666], [715.0, 99.2], [713.0, 100.0], [719.0, 182.07142857142856], [721.0, 224.94117647058823], [723.0, 173.0], [725.0, 224.83333333333334], [727.0, 148.92307692307693], [741.0, 133.47619047619048], [743.0, 204.30434782608697], [737.0, 100.33333333333333], [751.0, 141.93749999999997], [749.0, 190.57142857142858], [739.0, 216.00000000000003], [753.0, 201.8181818181818], [767.0, 182.6], [765.0, 133.78571428571425], [763.0, 163.46153846153848], [761.0, 120.05263157894737], [755.0, 173.9090909090909], [757.0, 157.9], [759.0, 149.0], [745.0, 130.57142857142858], [747.0, 106.85000000000001], [771.0, 131.66666666666669], [775.0, 203.66666666666666], [781.0, 113.375], [783.0, 128.95], [779.0, 159.64285714285717], [769.0, 153.6], [773.0, 143.55263157894734], [799.0, 178.9090909090909], [797.0, 131.44444444444446], [795.0, 122.0], [793.0, 151.2962962962963], [785.0, 207.17647058823533], [787.0, 116.0], [789.0, 115.0], [791.0, 155.78571428571428], [777.0, 184.44444444444446], [803.0, 142.11111111111111], [815.0, 145.25], [813.0, 152.87499999999997], [811.0, 182.66666666666666], [801.0, 138.2], [805.0, 190.52], [807.0, 183.95], [831.0, 186.36842105263156], [829.0, 164.05555555555554], [827.0, 160.5], [825.0, 179.72727272727275], [817.0, 168.90476190476193], [819.0, 175.66666666666666], [821.0, 154.7], [823.0, 178.77777777777777], [809.0, 177.0], [835.0, 157.03846153846155], [847.0, 164.37931034482762], [845.0, 177.88888888888889], [843.0, 176.72], [833.0, 191.06666666666666], [837.0, 185.69565217391306], [839.0, 172.77777777777777], [863.0, 161.77777777777777], [861.0, 164.77142857142857], [859.0, 161.83333333333331], [857.0, 163.38095238095238], [849.0, 176.5], [851.0, 168.11111111111111], [853.0, 161.07142857142856], [855.0, 157.92857142857142], [841.0, 180.875], [867.0, 175.88888888888889], [865.0, 173.94444444444443], [879.0, 169.29166666666669], [877.0, 177.61904761904762], [875.0, 172.91666666666666], [869.0, 164.96296296296296], [871.0, 175.14285714285722], [889.0, 164.32142857142856], [891.0, 164.7777777777778], [893.0, 165.17777777777775], [895.0, 164.75000000000003], [881.0, 176.70000000000002], [883.0, 168.9714285714286], [885.0, 165.66666666666666], [887.0, 163.81249999999997], [873.0, 166.33333333333334], [899.0, 160.45454545454544], [911.0, 166.83333333333337], [909.0, 168.33333333333331], [907.0, 165.10344827586212], [897.0, 164.42105263157893], [901.0, 160.0], [903.0, 164.26666666666665], [927.0, 167.0625], [925.0, 172.41379310344828], [923.0, 167.35483870967744], [921.0, 169.7857142857143], [913.0, 172.02941176470588], [915.0, 167.5], [917.0, 166.86666666666667], [919.0, 166.0], [905.0, 168.66666666666666], [931.0, 166.83333333333334], [943.0, 161.35294117647058], [941.0, 165.88235294117646], [939.0, 168.74074074074076], [929.0, 167.875], [933.0, 170.7931034482759], [935.0, 164.6], [959.0, 161.6969696969697], [957.0, 166.03124999999997], [955.0, 153.9090909090909], [953.0, 166.79999999999998], [945.0, 170.24000000000004], [947.0, 167.10526315789474], [949.0, 161.75757575757572], [951.0, 163.2619047619048], [937.0, 166.51851851851856], [963.0, 156.72727272727275], [975.0, 158.46666666666667], [973.0, 158.76470588235293], [971.0, 168.77464788732397], [961.0, 165.58333333333334], [965.0, 159.9], [967.0, 173.25806451612905], [991.0, 180.0], [989.0, 176.16666666666669], [987.0, 178.81818181818184], [985.0, 173.45833333333331], [977.0, 161.2941176470588], [979.0, 173.89999999999998], [981.0, 167.0909090909091], [983.0, 159.28571428571428], [969.0, 165.00000000000003], [997.0, 186.57142857142858], [993.0, 171.6984126984127], [1007.0, 176.8], [1005.0, 195.0], [1003.0, 182.5], [995.0, 180.47916666666666], [999.0, 190.7142857142857], [1017.0, 172.72000000000003], [1019.0, 170.47368421052633], [1021.0, 182.28000000000003], [1023.0, 182.75], [1009.0, 190.9], [1011.0, 169.19047619047618], [1013.0, 174.33333333333334], [1015.0, 179.25925925925927], [1001.0, 183.14705882352942], [1030.0, 177.67857142857147], [1026.0, 183.77551020408166], [1054.0, 178.5333333333333], [1050.0, 185.4516129032258], [1046.0, 186.5348837209302], [1042.0, 181.23404255319156], [1034.0, 173.88571428571427], [1038.0, 169.50000000000003], [1086.0, 187.16129032258064], [1082.0, 193.64864864864862], [1078.0, 198.66666666666666], [1074.0, 171.3125], [1058.0, 176.26315789473685], [1062.0, 180.11428571428573], [1066.0, 137.16666666666669], [1070.0, 174.32000000000002], [1094.0, 193.54838709677415], [1090.0, 199.88888888888889], [1118.0, 202.6923076923077], [1114.0, 205.0], [1110.0, 203.98275862068968], [1106.0, 193.61904761904756], [1098.0, 185.00000000000003], [1102.0, 188.75000000000003], [1150.0, 213.6], [1146.0, 212.94736842105263], [1142.0, 214.00000000000003], [1138.0, 207.23529411764704], [1122.0, 199.0], [1126.0, 207.54054054054055], [1130.0, 204.76470588235293], [1134.0, 203.625], [1158.0, 214.84615384615384], [1154.0, 215.09090909090912], [1182.0, 219.07692307692307], [1178.0, 221.8157894736842], [1174.0, 225.8], [1170.0, 220.79999999999998], [1162.0, 214.11111111111111], [1166.0, 216.0], [1214.0, 221.12499999999997], [1210.0, 221.62962962962965], [1206.0, 225.86363636363637], [1202.0, 230.8095238095238], [1186.0, 228.5], [1190.0, 225.32432432432438], [1194.0, 235.8181818181818], [1198.0, 225.08333333333334], [1218.0, 229.0], [1246.0, 243.81818181818178], [1242.0, 230.75], [1238.0, 229.9722222222222], [1234.0, 233.14285714285714], [1222.0, 223.25], [1226.0, 234.375], [1230.0, 228.6190476190476], [1278.0, 242.05882352941174], [1274.0, 237.49999999999997], [1270.0, 238.12500000000003], [1266.0, 244.5], [1250.0, 235.89999999999998], [1254.0, 244.9], [1258.0, 226.09090909090907], [1262.0, 247.88888888888889], [1286.0, 242.6], [1282.0, 237.83333333333331], [1310.0, 246.5], [1306.0, 240.79999999999998], [1302.0, 239.1904761904762], [1290.0, 246.8], [1294.0, 235.6842105263158], [1330.0, 248.0909090909091], [1334.0, 249.7857142857143], [1338.0, 255.66666666666666], [1342.0, 245.53658536585365], [1314.0, 254.14285714285714], [1318.0, 241.86666666666662], [1322.0, 247.0], [1326.0, 250.89473684210526], [1298.0, 237.77272727272728], [1350.0, 247.36363636363637], [1346.0, 243.0], [1374.0, 252.29411764705878], [1370.0, 244.48387096774198], [1366.0, 244.92592592592592], [1354.0, 240.2608695652174], [1358.0, 240.22222222222223], [1394.0, 252.27027027027034], [1398.0, 256.27272727272725], [1402.0, 270.6296296296297], [1406.0, 262.2962962962963], [1378.0, 251.44444444444446], [1382.0, 247.45238095238093], [1386.0, 253.54545454545456], [1390.0, 251.17647058823528], [1362.0, 245.12], [1414.0, 260.7], [1410.0, 259.9], [1438.0, 271.7333333333333], [1434.0, 266.6], [1430.0, 275.0], [1418.0, 272.9333333333333], [1422.0, 272.46153846153845], [1458.0, 277.8181818181818], [1462.0, 283.84], [1466.0, 279.2608695652174], [1470.0, 290.9111111111112], [1442.0, 294.41666666666663], [1446.0, 296.24999999999994], [1450.0, 286.17391304347825], [1454.0, 295.84210526315786], [1426.0, 269.0000000000001], [1478.0, 302.7142857142858], [1502.0, 290.32258064516134], [1498.0, 292.49999999999994], [1494.0, 292.38888888888886], [1474.0, 297.45714285714286], [1482.0, 291.6829268292683], [1486.0, 295.31578947368416], [1534.0, 256.38095238095235], [1530.0, 314.56666666666666], [1526.0, 289.2692307692307], [1522.0, 282.97727272727286], [1506.0, 291.35999999999996], [1510.0, 290.54545454545456], [1514.0, 296.98245614035096], [1518.0, 289.15000000000003], [1490.0, 300.4615384615385], [1542.0, 261.0909090909091], [1566.0, 230.7], [1562.0, 214.62499999999997], [1558.0, 257.09523809523813], [1538.0, 268.3636363636364], [1546.0, 250.44444444444446], [1550.0, 221.96296296296296], [1598.0, 215.54545454545456], [1594.0, 210.96969696969697], [1590.0, 239.53125000000003], [1586.0, 204.20833333333337], [1570.0, 234.4444444444444], [1574.0, 243.95000000000002], [1578.0, 222.62962962962962], [1582.0, 259.93103448275866], [1554.0, 196.42857142857142], [1606.0, 194.81818181818184], [1630.0, 187.09523809523807], [1626.0, 201.78431372549022], [1622.0, 206.25757575757578], [1602.0, 192.63636363636365], [1610.0, 182.29629629629628], [1614.0, 187.28260869565216], [1662.0, 240.44444444444446], [1658.0, 180.65714285714287], [1654.0, 207.60000000000005], [1650.0, 207.7391304347826], [1634.0, 227.1891891891892], [1638.0, 216.04000000000002], [1642.0, 243.44444444444443], [1646.0, 256.72727272727275], [1618.0, 208.375], [1670.0, 223.10000000000002], [1694.0, 223.16666666666666], [1690.0, 195.6428571428571], [1686.0, 248.99999999999997], [1666.0, 216.9], [1674.0, 209.62068965517238], [1678.0, 194.94117647058826], [1726.0, 326.44444444444446], [1722.0, 217.24999999999997], [1718.0, 227.53333333333336], [1714.0, 216.41666666666669], [1698.0, 215.57142857142858], [1702.0, 187.9333333333333], [1706.0, 237.70000000000002], [1710.0, 278.2], [1682.0, 282.5], [1734.0, 315.1304347826087], [1758.0, 249.71428571428572], [1754.0, 278.1875], [1750.0, 230.83333333333334], [1730.0, 246.64705882352942], [1738.0, 269.89473684210526], [1742.0, 251.0], [1790.0, 273.0909090909091], [1786.0, 294.70588235294116], [1782.0, 303.875], [1778.0, 328.3636363636364], [1762.0, 307.8], [1766.0, 286.4], [1770.0, 250.5], [1774.0, 286.3333333333333], [1746.0, 241.0434782608696], [1798.0, 306.0555555555555], [1822.0, 302.88235294117646], [1818.0, 312.37142857142857], [1814.0, 289.5161290322581], [1794.0, 334.77777777777777], [1802.0, 296.2], [1806.0, 299.58064516129036], [1826.0, 313.2], [1854.0, 313.84210526315775], [1850.0, 299.72222222222223], [1846.0, 305.53571428571433], [1842.0, 307.0416666666667], [1830.0, 311.3076923076923], [1834.0, 307.41025641025635], [1838.0, 316.5454545454545], [1810.0, 314.4285714285714], [1866.0, 324.0], [1878.0, 315.8888888888889], [1858.0, 443.75], [1862.0, 489.4], [1886.0, 318.25], [1870.0, 403.47368421052636], [1918.0, 281.5], [1914.0, 356.59999999999997], [1910.0, 318.6857142857143], [1906.0, 290.0769230769231], [1890.0, 338.71874999999994], [1894.0, 305.625], [1898.0, 369.75], [1902.0, 307.4242424242425], [1874.0, 413.99999999999994], [1882.0, 425.08000000000004], [1926.0, 277.7391304347826], [1922.0, 280.33333333333337], [1950.0, 277.1428571428571], [1946.0, 296.0833333333333], [1942.0, 270.78124999999994], [1930.0, 275.85294117647067], [1934.0, 346.3571428571429], [1970.0, 282.57142857142856], [1974.0, 292.8571428571429], [1978.0, 297.40000000000003], [1982.0, 309.72727272727275], [1954.0, 275.8285714285714], [1958.0, 270.65217391304344], [1962.0, 269.6666666666667], [1966.0, 276.1111111111111], [1938.0, 380.0], [1986.0, 303.0975609756097], [1994.0, 288.7931034482758], [1998.0, 335.65306122449], [1990.0, 336.8], [1031.0, 181.72727272727275], [1035.0, 173.34482758620692], [1027.0, 179.82608695652172], [1055.0, 190.33333333333334], [1051.0, 177.60000000000002], [1047.0, 176.45454545454547], [1043.0, 180.6315789473684], [1039.0, 178.20512820512826], [1087.0, 189.90624999999997], [1083.0, 194.47222222222223], [1079.0, 177.8], [1075.0, 159.5], [1059.0, 181.6], [1063.0, 176.33333333333334], [1067.0, 192.6153846153846], [1071.0, 166.79310344827584], [1091.0, 189.99999999999997], [1119.0, 200.48387096774192], [1115.0, 206.25000000000003], [1111.0, 202.42857142857144], [1107.0, 203.8095238095238], [1095.0, 200.06666666666666], [1099.0, 183.68421052631575], [1103.0, 192.2631578947368], [1151.0, 215.76470588235293], [1147.0, 213.10714285714286], [1143.0, 215.42857142857147], [1139.0, 215.45652173913047], [1123.0, 210.24999999999997], [1127.0, 198.1], [1131.0, 210.35714285714283], [1135.0, 210.8095238095238], [1159.0, 217.15625000000009], [1163.0, 214.25], [1155.0, 217.28571428571428], [1183.0, 219.58695652173907], [1179.0, 221.8235294117647], [1175.0, 222.2857142857143], [1171.0, 222.69999999999996], [1167.0, 215.18181818181822], [1215.0, 221.58208955223876], [1211.0, 218.14893617021272], [1207.0, 226.38461538461542], [1203.0, 224.40625], [1187.0, 230.66666666666669], [1191.0, 228.4], [1195.0, 233.3181818181818], [1199.0, 225.0], [1223.0, 225.54639175257748], [1247.0, 232.8], [1243.0, 231.88235294117644], [1239.0, 223.2121212121212], [1235.0, 229.71428571428572], [1219.0, 220.94736842105266], [1227.0, 236.66666666666669], [1231.0, 227.84905660377362], [1279.0, 242.36842105263156], [1275.0, 246.64285714285714], [1271.0, 235.4390243902439], [1267.0, 236.22222222222226], [1251.0, 246.42857142857142], [1255.0, 232.39583333333334], [1259.0, 231.0], [1263.0, 242.44444444444446], [1287.0, 243.73684210526318], [1311.0, 246.5], [1307.0, 244.91666666666669], [1303.0, 246.36363636363637], [1283.0, 247.47619047619048], [1291.0, 244.72222222222226], [1295.0, 239.7368421052632], [1343.0, 251.94117647058823], [1339.0, 251.16666666666666], [1335.0, 251.94444444444443], [1331.0, 257.5], [1315.0, 241.47619047619045], [1319.0, 239.9047619047619], [1323.0, 238.04761904761907], [1327.0, 238.50000000000003], [1299.0, 240.54545454545453], [1351.0, 244.88571428571424], [1375.0, 244.8181818181818], [1371.0, 249.33333333333334], [1367.0, 247.43243243243248], [1347.0, 248.96875000000006], [1355.0, 247.0], [1359.0, 242.08333333333337], [1407.0, 255.4264705882353], [1399.0, 252.67857142857144], [1403.0, 252.52173913043478], [1395.0, 261.1818181818182], [1379.0, 257.8333333333333], [1383.0, 247.0], [1387.0, 242.0], [1391.0, 244.86486486486493], [1363.0, 242.29411764705878], [1415.0, 255.0], [1411.0, 254.74074074074073], [1435.0, 266.78571428571433], [1431.0, 271.7906976744187], [1419.0, 274.38461538461536], [1423.0, 269.5555555555556], [1459.0, 294.77777777777777], [1463.0, 288.14285714285717], [1467.0, 280.5227272727273], [1471.0, 287.6842105263158], [1443.0, 275.8666666666666], [1447.0, 273.375], [1451.0, 281.05263157894734], [1455.0, 272.3958333333332], [1427.0, 273.50000000000006], [1479.0, 294.5744680851062], [1503.0, 292.5581395348837], [1499.0, 293.125], [1495.0, 294.61904761904765], [1475.0, 287.0], [1483.0, 297.54545454545456], [1487.0, 297.37499999999994], [1535.0, 317.89583333333337], [1531.0, 286.88235294117635], [1527.0, 294.6666666666667], [1523.0, 286.1818181818182], [1507.0, 287.8666666666666], [1511.0, 292.7999999999999], [1515.0, 292.5072463768115], [1519.0, 283.9298245614037], [1491.0, 290.9259259259259], [1543.0, 239.08695652173913], [1567.0, 235.44444444444446], [1563.0, 292.5185185185186], [1559.0, 262.5238095238095], [1539.0, 245.80769230769235], [1547.0, 222.96551724137933], [1551.0, 212.61290322580643], [1599.0, 175.5], [1595.0, 197.7297297297298], [1591.0, 231.75], [1587.0, 249.02857142857138], [1571.0, 252.375], [1575.0, 214.7317073170732], [1579.0, 256.59090909090907], [1583.0, 224.8125], [1555.0, 227.3], [1607.0, 214.27777777777774], [1631.0, 190.17999999999995], [1627.0, 201.125], [1623.0, 212.72727272727272], [1603.0, 208.74074074074073], [1611.0, 191.9736842105263], [1615.0, 200.6829268292683], [1663.0, 197.4090909090909], [1659.0, 173.94736842105263], [1655.0, 198.91176470588232], [1651.0, 201.27499999999998], [1635.0, 220.12121212121215], [1639.0, 210.83333333333331], [1643.0, 203.78260869565216], [1647.0, 209.72222222222223], [1619.0, 201.5], [1671.0, 182.0], [1695.0, 340.75], [1691.0, 247.6], [1687.0, 193.27272727272725], [1667.0, 249.8181818181818], [1675.0, 204.83870967741933], [1679.0, 210.4736842105263], [1727.0, 224.19999999999996], [1723.0, 294.6315789473684], [1719.0, 217.46428571428572], [1715.0, 313.0], [1699.0, 182.37500000000006], [1703.0, 204.125], [1707.0, 233.625], [1711.0, 275.5714285714286], [1683.0, 290.61538461538464], [1735.0, 256.52631578947364], [1759.0, 285.68181818181813], [1755.0, 270.05555555555554], [1751.0, 236.50000000000003], [1731.0, 312.77777777777777], [1739.0, 245.83333333333331], [1743.0, 285.0588235294117], [1791.0, 295.3], [1787.0, 309.4642857142857], [1783.0, 303.842105263158], [1779.0, 261.2857142857143], [1763.0, 279.74999999999994], [1767.0, 276.75], [1771.0, 288.5], [1775.0, 290.6], [1747.0, 255.0], [1803.0, 293.95], [1795.0, 315.0588235294117], [1823.0, 291.9166666666667], [1819.0, 324.1666666666667], [1815.0, 315.27272727272725], [1799.0, 291.4814814814815], [1807.0, 339.5], [1843.0, 296.7272727272727], [1847.0, 297.57142857142856], [1851.0, 323.0], [1855.0, 326.0], [1827.0, 307.7692307692307], [1831.0, 328.15384615384613], [1835.0, 309.64705882352933], [1839.0, 315.125], [1811.0, 293.23809523809524], [1867.0, 347.22222222222223], [1879.0, 328.21739130434787], [1859.0, 467.85714285714283], [1863.0, 476.46153846153845], [1887.0, 342.8571428571429], [1883.0, 312.81818181818187], [1871.0, 316.4545454545454], [1907.0, 314.6190476190476], [1911.0, 300.75000000000006], [1915.0, 318.6190476190476], [1919.0, 278.8], [1891.0, 326.6666666666667], [1895.0, 356.4], [1899.0, 310.25], [1903.0, 299.0], [1875.0, 331.6666666666667], [1935.0, 278.8666666666666], [1927.0, 334.19230769230774], [1951.0, 285.12500000000006], [1947.0, 300.18181818181824], [1931.0, 280.05555555555554], [1983.0, 307.7866666666667], [1979.0, 283.5], [1975.0, 275.0], [1971.0, 332.08000000000004], [1955.0, 286.1428571428571], [1959.0, 297.80392156862735], [1963.0, 265.12500000000006], [1967.0, 316.1], [1939.0, 303.06060606060606], [1943.0, 285.125], [1987.0, 289.8409090909092], [1991.0, 327.27922077922074], [1995.0, 293.8750000000001], [1999.0, 338.45939086294425], [1.0, 6.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1976.2808020000216, 303.315239999993]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19191.5, "minX": 1.58558472E12, "maxY": 1217357.5833333333, "series": [{"data": [[1.58558484E12, 1196879.0833333333], [1.58558478E12, 1217357.5833333333], [1.58558472E12, 27151.966666666667], [1.5855849E12, 641996.1666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58558484E12, 847519.7833333333], [1.58558478E12, 862019.3], [1.58558472E12, 19191.5], [1.5855849E12, 454602.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855849E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 215.9770193401596, "minX": 1.58558472E12, "maxY": 308.9934591694027, "series": [{"data": [[1.58558484E12, 308.9934591694027], [1.58558478E12, 303.08696918580443], [1.58558472E12, 215.9770193401596], [1.5855849E12, 296.84920394783643]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855849E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 213.3370875995448, "minX": 1.58558472E12, "maxY": 308.9913390025748, "series": [{"data": [[1.58558484E12, 308.9913390025748], [1.58558478E12, 303.0848036310396], [1.58558472E12, 213.3370875995448], [1.5855849E12, 296.8470667339046]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855849E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1566313666162365, "minX": 1.58558472E12, "maxY": 1.3812286689419833, "series": [{"data": [[1.58558484E12, 0.15938090098073257], [1.58558478E12, 0.15920246797258375], [1.58558472E12, 1.3812286689419833], [1.5855849E12, 0.1566313666162365]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855849E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.58558472E12, "maxY": 668.0, "series": [{"data": [[1.58558484E12, 387.0], [1.58558478E12, 392.0], [1.58558472E12, 668.0], [1.5855849E12, 507.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58558484E12, 49.0], [1.58558478E12, 59.0], [1.58558472E12, 18.0], [1.5855849E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58558484E12, 349.0], [1.58558478E12, 343.0], [1.58558472E12, 273.0], [1.5855849E12, 348.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58558484E12, 354.0], [1.58558478E12, 353.0], [1.58558472E12, 646.0], [1.5855849E12, 470.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58558484E12, 351.0], [1.58558478E12, 345.0], [1.58558472E12, 299.0], [1.5855849E12, 351.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855849E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 114.0, "minX": 177.0, "maxY": 348.0, "series": [{"data": [[177.0, 291.0], [3847.0, 187.0], [4766.0, 232.0], [5105.0, 114.0], [5868.0, 337.0], [5833.0, 341.0], [5792.0, 346.0], [5797.0, 335.0], [5851.0, 339.0], [5748.0, 343.0], [5805.0, 340.0], [5801.0, 343.0], [5835.0, 342.0], [5741.0, 348.0], [5900.0, 339.0], [5938.0, 335.0], [6109.0, 317.0], [5936.0, 334.0], [5937.0, 339.0], [5912.0, 339.0], [5908.0, 339.0], [6008.0, 338.0], [5949.0, 335.0], [6101.0, 331.0], [6090.0, 334.0], [6087.0, 341.0], [5991.0, 336.0], [5978.0, 333.0], [5981.0, 337.0], [5890.0, 336.0], [5898.0, 341.0], [5897.0, 223.0], [5891.0, 338.0], [5952.0, 341.0], [5956.0, 333.0], [6048.0, 336.0], [6018.0, 338.0], [6038.0, 343.0], [6035.0, 321.0], [6019.0, 330.0], [6132.0, 333.0], [6066.0, 335.0], [6064.0, 337.0], [6076.0, 327.0], [6073.0, 326.0], [6070.0, 332.0], [6355.0, 328.0], [6177.0, 325.0], [6236.0, 332.0], [6213.0, 308.0], [6233.0, 324.0], [6215.0, 338.0], [6184.0, 332.0], [6190.0, 320.0], [6366.0, 329.0], [6380.0, 298.0], [6361.0, 320.0], [6255.0, 311.0], [6154.0, 322.5], [6162.0, 314.0], [6170.0, 339.0], [6393.0, 320.0], [6322.0, 309.0], [6330.0, 324.0], [6324.0, 331.0], [6389.0, 318.0], [6382.0, 327.0], [6202.0, 328.0], [6198.0, 326.0], [6423.0, 327.0], [6607.0, 314.0], [6487.0, 320.0], [6500.0, 319.0], [6486.0, 320.0], [6442.0, 335.0], [6432.0, 325.0], [6412.0, 327.0], [6403.0, 326.0], [6520.0, 311.0], [6522.0, 331.0], [6517.0, 338.0], [6508.0, 284.0], [6418.0, 326.0], [6414.0, 340.0], [6417.0, 312.0], [6502.0, 314.0], [6624.0, 333.0], [6651.0, 341.0], [6634.0, 297.0], [6534.0, 291.0], [6538.0, 311.0], [6567.0, 312.0], [6568.0, 306.0], [6465.0, 318.0], [6467.0, 311.0], [6472.0, 304.0], [6871.0, 284.0], [6783.0, 276.0], [6747.0, 288.0], [6896.0, 268.0], [6890.0, 269.0], [6893.0, 281.0], [6899.0, 289.0], [6908.0, 295.0], [6802.0, 316.0], [6840.0, 311.0], [6743.0, 310.0], [6675.0, 300.0], [6763.0, 331.0], [6956.0, 284.0], [7036.0, 252.0], [7138.0, 284.5], [7153.0, 291.0], [7142.0, 285.0], [6990.0, 278.0], [7011.0, 294.0], [6931.0, 303.0], [6923.0, 334.0], [7096.0, 273.0], [7070.0, 266.0], [7067.0, 292.0], [6987.0, 272.0], [6980.0, 287.0], [6970.0, 273.0], [6973.0, 327.0], [7112.0, 237.0], [7105.0, 264.0], [6967.0, 263.0], [6963.0, 316.0], [6968.0, 267.0], [7270.0, 238.5], [7354.0, 263.0], [7370.0, 289.0], [7405.0, 239.0], [7338.0, 263.0], [7368.0, 259.0], [7315.0, 255.0], [7306.0, 252.0], [7666.0, 254.0], [7654.0, 254.0], [7445.0, 274.0], [7621.0, 267.0], [7625.0, 265.0], [7488.0, 269.0], [7922.0, 236.0], [7790.0, 234.0], [7881.0, 239.0], [7809.0, 254.0], [7867.0, 253.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7922.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 114.0, "minX": 177.0, "maxY": 348.0, "series": [{"data": [[177.0, 261.0], [3847.0, 186.0], [4766.0, 232.0], [5105.0, 114.0], [5868.0, 337.0], [5833.0, 341.0], [5792.0, 346.0], [5797.0, 335.0], [5851.0, 339.0], [5748.0, 343.0], [5805.0, 340.0], [5801.0, 343.0], [5835.0, 342.0], [5741.0, 348.0], [5900.0, 339.0], [5938.0, 335.0], [6109.0, 317.0], [5936.0, 334.0], [5937.0, 339.0], [5912.0, 339.0], [5908.0, 339.0], [6008.0, 338.0], [5949.0, 335.0], [6101.0, 331.0], [6090.0, 334.0], [6087.0, 341.0], [5991.0, 336.0], [5978.0, 333.0], [5981.0, 337.0], [5890.0, 336.0], [5898.0, 341.0], [5897.0, 223.0], [5891.0, 338.0], [5952.0, 341.0], [5956.0, 333.0], [6048.0, 336.0], [6018.0, 338.0], [6038.0, 343.0], [6035.0, 321.0], [6019.0, 330.0], [6132.0, 333.0], [6066.0, 335.0], [6064.0, 337.0], [6076.0, 327.0], [6073.0, 326.0], [6070.0, 332.0], [6355.0, 328.0], [6177.0, 325.0], [6236.0, 332.0], [6213.0, 308.0], [6233.0, 324.0], [6215.0, 338.0], [6184.0, 332.0], [6190.0, 320.0], [6366.0, 329.0], [6380.0, 298.0], [6361.0, 320.0], [6255.0, 311.0], [6154.0, 322.0], [6162.0, 314.0], [6170.0, 339.0], [6393.0, 320.0], [6322.0, 309.0], [6330.0, 324.0], [6324.0, 331.0], [6389.0, 318.0], [6382.0, 327.0], [6202.0, 328.0], [6198.0, 326.0], [6423.0, 327.0], [6607.0, 314.0], [6487.0, 320.0], [6500.0, 319.0], [6486.0, 320.0], [6442.0, 335.0], [6432.0, 325.0], [6412.0, 327.0], [6403.0, 326.0], [6520.0, 311.0], [6522.0, 331.0], [6517.0, 338.0], [6508.0, 284.0], [6418.0, 326.0], [6414.0, 340.0], [6417.0, 312.0], [6502.0, 314.0], [6624.0, 333.0], [6651.0, 341.0], [6634.0, 297.0], [6534.0, 291.0], [6538.0, 311.0], [6567.0, 312.0], [6568.0, 306.0], [6465.0, 318.0], [6467.0, 311.0], [6472.0, 304.0], [6871.0, 284.0], [6783.0, 276.0], [6747.0, 288.0], [6896.0, 268.0], [6890.0, 269.0], [6893.0, 281.0], [6899.0, 289.0], [6908.0, 295.0], [6802.0, 316.0], [6840.0, 311.0], [6743.0, 310.0], [6675.0, 300.0], [6763.0, 331.0], [6956.0, 284.0], [7036.0, 252.0], [7138.0, 284.5], [7153.0, 291.0], [7142.0, 285.0], [6990.0, 278.0], [7011.0, 294.0], [6931.0, 303.0], [6923.0, 334.0], [7096.0, 273.0], [7070.0, 266.0], [7067.0, 292.0], [6987.0, 272.0], [6980.0, 287.0], [6970.0, 273.0], [6973.0, 327.0], [7112.0, 237.0], [7105.0, 264.0], [6967.0, 263.0], [6963.0, 316.0], [6968.0, 267.0], [7270.0, 238.5], [7354.0, 263.0], [7370.0, 289.0], [7405.0, 239.0], [7338.0, 263.0], [7368.0, 259.0], [7315.0, 255.0], [7306.0, 252.0], [7666.0, 254.0], [7654.0, 254.0], [7445.0, 274.0], [7621.0, 267.0], [7625.0, 265.0], [7488.0, 269.0], [7922.0, 236.0], [7790.0, 234.0], [7881.0, 239.0], [7809.0, 254.0], [7867.0, 253.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7922.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 171.0, "minX": 1.58558472E12, "maxY": 6589.116666666667, "series": [{"data": [[1.58558484E12, 6469.633333333333], [1.58558478E12, 6589.116666666667], [1.58558472E12, 171.0], [1.5855849E12, 3436.9166666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855849E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 146.5, "minX": 1.58558472E12, "maxY": 6580.3, "series": [{"data": [[1.58558484E12, 6469.616666666667], [1.58558478E12, 6580.3], [1.58558472E12, 146.5], [1.5855849E12, 3470.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855849E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 146.5, "minX": 1.58558472E12, "maxY": 6580.3, "series": [{"data": [[1.58558484E12, 6469.616666666667], [1.58558478E12, 6580.3], [1.58558472E12, 146.5], [1.5855849E12, 3470.25]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855849E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 146.5, "minX": 1.58558472E12, "maxY": 6580.3, "series": [{"data": [[1.58558484E12, 6469.616666666667], [1.58558478E12, 6580.3], [1.58558472E12, 146.5], [1.5855849E12, 3470.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855849E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

