/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1403.0, "series": [{"data": [[0.0, 2.0], [0.1, 18.0], [0.2, 29.0], [0.3, 33.0], [0.4, 40.0], [0.5, 46.0], [0.6, 52.0], [0.7, 56.0], [0.8, 58.0], [0.9, 59.0], [1.0, 60.0], [1.1, 61.0], [1.2, 61.0], [1.3, 62.0], [1.4, 62.0], [1.5, 63.0], [1.6, 63.0], [1.7, 64.0], [1.8, 64.0], [1.9, 64.0], [2.0, 65.0], [2.1, 65.0], [2.2, 65.0], [2.3, 66.0], [2.4, 66.0], [2.5, 66.0], [2.6, 67.0], [2.7, 67.0], [2.8, 67.0], [2.9, 67.0], [3.0, 68.0], [3.1, 68.0], [3.2, 68.0], [3.3, 68.0], [3.4, 68.0], [3.5, 69.0], [3.6, 69.0], [3.7, 69.0], [3.8, 69.0], [3.9, 69.0], [4.0, 70.0], [4.1, 70.0], [4.2, 70.0], [4.3, 70.0], [4.4, 70.0], [4.5, 71.0], [4.6, 71.0], [4.7, 71.0], [4.8, 71.0], [4.9, 71.0], [5.0, 72.0], [5.1, 72.0], [5.2, 72.0], [5.3, 72.0], [5.4, 72.0], [5.5, 72.0], [5.6, 72.0], [5.7, 73.0], [5.8, 73.0], [5.9, 73.0], [6.0, 73.0], [6.1, 73.0], [6.2, 73.0], [6.3, 73.0], [6.4, 73.0], [6.5, 74.0], [6.6, 74.0], [6.7, 74.0], [6.8, 74.0], [6.9, 74.0], [7.0, 74.0], [7.1, 74.0], [7.2, 74.0], [7.3, 74.0], [7.4, 75.0], [7.5, 75.0], [7.6, 75.0], [7.7, 75.0], [7.8, 75.0], [7.9, 75.0], [8.0, 75.0], [8.1, 75.0], [8.2, 75.0], [8.3, 75.0], [8.4, 75.0], [8.5, 76.0], [8.6, 76.0], [8.7, 76.0], [8.8, 76.0], [8.9, 76.0], [9.0, 76.0], [9.1, 76.0], [9.2, 76.0], [9.3, 76.0], [9.4, 76.0], [9.5, 76.0], [9.6, 76.0], [9.7, 76.0], [9.8, 76.0], [9.9, 77.0], [10.0, 77.0], [10.1, 77.0], [10.2, 77.0], [10.3, 77.0], [10.4, 77.0], [10.5, 77.0], [10.6, 77.0], [10.7, 77.0], [10.8, 77.0], [10.9, 77.0], [11.0, 77.0], [11.1, 77.0], [11.2, 77.0], [11.3, 77.0], [11.4, 78.0], [11.5, 78.0], [11.6, 78.0], [11.7, 78.0], [11.8, 78.0], [11.9, 78.0], [12.0, 78.0], [12.1, 78.0], [12.2, 78.0], [12.3, 78.0], [12.4, 78.0], [12.5, 78.0], [12.6, 78.0], [12.7, 78.0], [12.8, 78.0], [12.9, 78.0], [13.0, 78.0], [13.1, 78.0], [13.2, 78.0], [13.3, 79.0], [13.4, 79.0], [13.5, 79.0], [13.6, 79.0], [13.7, 79.0], [13.8, 79.0], [13.9, 79.0], [14.0, 79.0], [14.1, 79.0], [14.2, 79.0], [14.3, 79.0], [14.4, 79.0], [14.5, 79.0], [14.6, 79.0], [14.7, 79.0], [14.8, 79.0], [14.9, 79.0], [15.0, 79.0], [15.1, 79.0], [15.2, 79.0], [15.3, 79.0], [15.4, 80.0], [15.5, 80.0], [15.6, 80.0], [15.7, 80.0], [15.8, 80.0], [15.9, 80.0], [16.0, 80.0], [16.1, 80.0], [16.2, 80.0], [16.3, 80.0], [16.4, 80.0], [16.5, 80.0], [16.6, 80.0], [16.7, 80.0], [16.8, 80.0], [16.9, 80.0], [17.0, 80.0], [17.1, 80.0], [17.2, 80.0], [17.3, 80.0], [17.4, 80.0], [17.5, 80.0], [17.6, 80.0], [17.7, 80.0], [17.8, 80.0], [17.9, 80.0], [18.0, 81.0], [18.1, 81.0], [18.2, 81.0], [18.3, 81.0], [18.4, 81.0], [18.5, 81.0], [18.6, 81.0], [18.7, 81.0], [18.8, 81.0], [18.9, 81.0], [19.0, 81.0], [19.1, 81.0], [19.2, 81.0], [19.3, 81.0], [19.4, 81.0], [19.5, 81.0], [19.6, 81.0], [19.7, 81.0], [19.8, 81.0], [19.9, 81.0], [20.0, 81.0], [20.1, 81.0], [20.2, 81.0], [20.3, 81.0], [20.4, 81.0], [20.5, 81.0], [20.6, 81.0], [20.7, 81.0], [20.8, 81.0], [20.9, 81.0], [21.0, 81.0], [21.1, 81.0], [21.2, 82.0], [21.3, 82.0], [21.4, 82.0], [21.5, 82.0], [21.6, 82.0], [21.7, 82.0], [21.8, 82.0], [21.9, 82.0], [22.0, 82.0], [22.1, 82.0], [22.2, 82.0], [22.3, 82.0], [22.4, 82.0], [22.5, 82.0], [22.6, 82.0], [22.7, 82.0], [22.8, 82.0], [22.9, 82.0], [23.0, 82.0], [23.1, 82.0], [23.2, 82.0], [23.3, 82.0], [23.4, 82.0], [23.5, 82.0], [23.6, 82.0], [23.7, 82.0], [23.8, 82.0], [23.9, 82.0], [24.0, 82.0], [24.1, 82.0], [24.2, 82.0], [24.3, 82.0], [24.4, 82.0], [24.5, 82.0], [24.6, 82.0], [24.7, 82.0], [24.8, 83.0], [24.9, 83.0], [25.0, 83.0], [25.1, 83.0], [25.2, 83.0], [25.3, 83.0], [25.4, 83.0], [25.5, 83.0], [25.6, 83.0], [25.7, 83.0], [25.8, 83.0], [25.9, 83.0], [26.0, 83.0], [26.1, 83.0], [26.2, 83.0], [26.3, 83.0], [26.4, 83.0], [26.5, 83.0], [26.6, 83.0], [26.7, 83.0], [26.8, 83.0], [26.9, 83.0], [27.0, 83.0], [27.1, 83.0], [27.2, 83.0], [27.3, 83.0], [27.4, 83.0], [27.5, 83.0], [27.6, 83.0], [27.7, 83.0], [27.8, 83.0], [27.9, 83.0], [28.0, 83.0], [28.1, 83.0], [28.2, 83.0], [28.3, 83.0], [28.4, 83.0], [28.5, 83.0], [28.6, 83.0], [28.7, 84.0], [28.8, 84.0], [28.9, 84.0], [29.0, 84.0], [29.1, 84.0], [29.2, 84.0], [29.3, 84.0], [29.4, 84.0], [29.5, 84.0], [29.6, 84.0], [29.7, 84.0], [29.8, 84.0], [29.9, 84.0], [30.0, 84.0], [30.1, 84.0], [30.2, 84.0], [30.3, 84.0], [30.4, 84.0], [30.5, 84.0], [30.6, 84.0], [30.7, 84.0], [30.8, 84.0], [30.9, 84.0], [31.0, 84.0], [31.1, 84.0], [31.2, 84.0], [31.3, 84.0], [31.4, 84.0], [31.5, 84.0], [31.6, 84.0], [31.7, 84.0], [31.8, 84.0], [31.9, 84.0], [32.0, 84.0], [32.1, 84.0], [32.2, 84.0], [32.3, 84.0], [32.4, 84.0], [32.5, 84.0], [32.6, 84.0], [32.7, 85.0], [32.8, 85.0], [32.9, 85.0], [33.0, 85.0], [33.1, 85.0], [33.2, 85.0], [33.3, 85.0], [33.4, 85.0], [33.5, 85.0], [33.6, 85.0], [33.7, 85.0], [33.8, 85.0], [33.9, 85.0], [34.0, 85.0], [34.1, 85.0], [34.2, 85.0], [34.3, 85.0], [34.4, 85.0], [34.5, 85.0], [34.6, 85.0], [34.7, 85.0], [34.8, 85.0], [34.9, 85.0], [35.0, 85.0], [35.1, 85.0], [35.2, 85.0], [35.3, 85.0], [35.4, 85.0], [35.5, 85.0], [35.6, 85.0], [35.7, 85.0], [35.8, 85.0], [35.9, 85.0], [36.0, 85.0], [36.1, 85.0], [36.2, 85.0], [36.3, 85.0], [36.4, 85.0], [36.5, 85.0], [36.6, 85.0], [36.7, 86.0], [36.8, 86.0], [36.9, 86.0], [37.0, 86.0], [37.1, 86.0], [37.2, 86.0], [37.3, 86.0], [37.4, 86.0], [37.5, 86.0], [37.6, 86.0], [37.7, 86.0], [37.8, 86.0], [37.9, 86.0], [38.0, 86.0], [38.1, 86.0], [38.2, 86.0], [38.3, 86.0], [38.4, 86.0], [38.5, 86.0], [38.6, 86.0], [38.7, 86.0], [38.8, 86.0], [38.9, 86.0], [39.0, 86.0], [39.1, 86.0], [39.2, 86.0], [39.3, 86.0], [39.4, 86.0], [39.5, 86.0], [39.6, 86.0], [39.7, 86.0], [39.8, 86.0], [39.9, 86.0], [40.0, 86.0], [40.1, 86.0], [40.2, 86.0], [40.3, 86.0], [40.4, 86.0], [40.5, 86.0], [40.6, 86.0], [40.7, 86.0], [40.8, 87.0], [40.9, 87.0], [41.0, 87.0], [41.1, 87.0], [41.2, 87.0], [41.3, 87.0], [41.4, 87.0], [41.5, 87.0], [41.6, 87.0], [41.7, 87.0], [41.8, 87.0], [41.9, 87.0], [42.0, 87.0], [42.1, 87.0], [42.2, 87.0], [42.3, 87.0], [42.4, 87.0], [42.5, 87.0], [42.6, 87.0], [42.7, 87.0], [42.8, 87.0], [42.9, 87.0], [43.0, 87.0], [43.1, 87.0], [43.2, 87.0], [43.3, 87.0], [43.4, 87.0], [43.5, 87.0], [43.6, 87.0], [43.7, 87.0], [43.8, 87.0], [43.9, 87.0], [44.0, 87.0], [44.1, 87.0], [44.2, 87.0], [44.3, 87.0], [44.4, 87.0], [44.5, 87.0], [44.6, 87.0], [44.7, 88.0], [44.8, 88.0], [44.9, 88.0], [45.0, 88.0], [45.1, 88.0], [45.2, 88.0], [45.3, 88.0], [45.4, 88.0], [45.5, 88.0], [45.6, 88.0], [45.7, 88.0], [45.8, 88.0], [45.9, 88.0], [46.0, 88.0], [46.1, 88.0], [46.2, 88.0], [46.3, 88.0], [46.4, 88.0], [46.5, 88.0], [46.6, 88.0], [46.7, 88.0], [46.8, 88.0], [46.9, 88.0], [47.0, 88.0], [47.1, 88.0], [47.2, 88.0], [47.3, 88.0], [47.4, 88.0], [47.5, 88.0], [47.6, 88.0], [47.7, 88.0], [47.8, 88.0], [47.9, 88.0], [48.0, 88.0], [48.1, 88.0], [48.2, 88.0], [48.3, 88.0], [48.4, 88.0], [48.5, 89.0], [48.6, 89.0], [48.7, 89.0], [48.8, 89.0], [48.9, 89.0], [49.0, 89.0], [49.1, 89.0], [49.2, 89.0], [49.3, 89.0], [49.4, 89.0], [49.5, 89.0], [49.6, 89.0], [49.7, 89.0], [49.8, 89.0], [49.9, 89.0], [50.0, 89.0], [50.1, 89.0], [50.2, 89.0], [50.3, 89.0], [50.4, 89.0], [50.5, 89.0], [50.6, 89.0], [50.7, 89.0], [50.8, 89.0], [50.9, 89.0], [51.0, 89.0], [51.1, 89.0], [51.2, 89.0], [51.3, 89.0], [51.4, 89.0], [51.5, 89.0], [51.6, 89.0], [51.7, 89.0], [51.8, 89.0], [51.9, 89.0], [52.0, 89.0], [52.1, 89.0], [52.2, 89.0], [52.3, 90.0], [52.4, 90.0], [52.5, 90.0], [52.6, 90.0], [52.7, 90.0], [52.8, 90.0], [52.9, 90.0], [53.0, 90.0], [53.1, 90.0], [53.2, 90.0], [53.3, 90.0], [53.4, 90.0], [53.5, 90.0], [53.6, 90.0], [53.7, 90.0], [53.8, 90.0], [53.9, 90.0], [54.0, 90.0], [54.1, 90.0], [54.2, 90.0], [54.3, 90.0], [54.4, 90.0], [54.5, 90.0], [54.6, 90.0], [54.7, 90.0], [54.8, 90.0], [54.9, 90.0], [55.0, 90.0], [55.1, 90.0], [55.2, 90.0], [55.3, 90.0], [55.4, 90.0], [55.5, 90.0], [55.6, 90.0], [55.7, 90.0], [55.8, 91.0], [55.9, 91.0], [56.0, 91.0], [56.1, 91.0], [56.2, 91.0], [56.3, 91.0], [56.4, 91.0], [56.5, 91.0], [56.6, 91.0], [56.7, 91.0], [56.8, 91.0], [56.9, 91.0], [57.0, 91.0], [57.1, 91.0], [57.2, 91.0], [57.3, 91.0], [57.4, 91.0], [57.5, 91.0], [57.6, 91.0], [57.7, 91.0], [57.8, 91.0], [57.9, 91.0], [58.0, 91.0], [58.1, 91.0], [58.2, 91.0], [58.3, 91.0], [58.4, 91.0], [58.5, 91.0], [58.6, 91.0], [58.7, 91.0], [58.8, 91.0], [58.9, 91.0], [59.0, 91.0], [59.1, 91.0], [59.2, 92.0], [59.3, 92.0], [59.4, 92.0], [59.5, 92.0], [59.6, 92.0], [59.7, 92.0], [59.8, 92.0], [59.9, 92.0], [60.0, 92.0], [60.1, 92.0], [60.2, 92.0], [60.3, 92.0], [60.4, 92.0], [60.5, 92.0], [60.6, 92.0], [60.7, 92.0], [60.8, 92.0], [60.9, 92.0], [61.0, 92.0], [61.1, 92.0], [61.2, 92.0], [61.3, 92.0], [61.4, 92.0], [61.5, 92.0], [61.6, 92.0], [61.7, 92.0], [61.8, 92.0], [61.9, 92.0], [62.0, 92.0], [62.1, 92.0], [62.2, 92.0], [62.3, 92.0], [62.4, 92.0], [62.5, 92.0], [62.6, 92.0], [62.7, 93.0], [62.8, 93.0], [62.9, 93.0], [63.0, 93.0], [63.1, 93.0], [63.2, 93.0], [63.3, 93.0], [63.4, 93.0], [63.5, 93.0], [63.6, 93.0], [63.7, 93.0], [63.8, 93.0], [63.9, 93.0], [64.0, 93.0], [64.1, 93.0], [64.2, 93.0], [64.3, 93.0], [64.4, 93.0], [64.5, 93.0], [64.6, 93.0], [64.7, 93.0], [64.8, 93.0], [64.9, 93.0], [65.0, 93.0], [65.1, 93.0], [65.2, 93.0], [65.3, 93.0], [65.4, 93.0], [65.5, 93.0], [65.6, 93.0], [65.7, 93.0], [65.8, 93.0], [65.9, 94.0], [66.0, 94.0], [66.1, 94.0], [66.2, 94.0], [66.3, 94.0], [66.4, 94.0], [66.5, 94.0], [66.6, 94.0], [66.7, 94.0], [66.8, 94.0], [66.9, 94.0], [67.0, 94.0], [67.1, 94.0], [67.2, 94.0], [67.3, 94.0], [67.4, 94.0], [67.5, 94.0], [67.6, 94.0], [67.7, 94.0], [67.8, 94.0], [67.9, 94.0], [68.0, 94.0], [68.1, 94.0], [68.2, 94.0], [68.3, 94.0], [68.4, 94.0], [68.5, 94.0], [68.6, 94.0], [68.7, 94.0], [68.8, 94.0], [68.9, 94.0], [69.0, 95.0], [69.1, 95.0], [69.2, 95.0], [69.3, 95.0], [69.4, 95.0], [69.5, 95.0], [69.6, 95.0], [69.7, 95.0], [69.8, 95.0], [69.9, 95.0], [70.0, 95.0], [70.1, 95.0], [70.2, 95.0], [70.3, 95.0], [70.4, 95.0], [70.5, 95.0], [70.6, 95.0], [70.7, 95.0], [70.8, 95.0], [70.9, 95.0], [71.0, 95.0], [71.1, 95.0], [71.2, 95.0], [71.3, 95.0], [71.4, 95.0], [71.5, 95.0], [71.6, 95.0], [71.7, 95.0], [71.8, 95.0], [71.9, 96.0], [72.0, 96.0], [72.1, 96.0], [72.2, 96.0], [72.3, 96.0], [72.4, 96.0], [72.5, 96.0], [72.6, 96.0], [72.7, 96.0], [72.8, 96.0], [72.9, 96.0], [73.0, 96.0], [73.1, 96.0], [73.2, 96.0], [73.3, 96.0], [73.4, 96.0], [73.5, 96.0], [73.6, 96.0], [73.7, 96.0], [73.8, 96.0], [73.9, 96.0], [74.0, 96.0], [74.1, 96.0], [74.2, 96.0], [74.3, 96.0], [74.4, 96.0], [74.5, 96.0], [74.6, 97.0], [74.7, 97.0], [74.8, 97.0], [74.9, 97.0], [75.0, 97.0], [75.1, 97.0], [75.2, 97.0], [75.3, 97.0], [75.4, 97.0], [75.5, 97.0], [75.6, 97.0], [75.7, 97.0], [75.8, 97.0], [75.9, 97.0], [76.0, 97.0], [76.1, 97.0], [76.2, 97.0], [76.3, 97.0], [76.4, 97.0], [76.5, 97.0], [76.6, 97.0], [76.7, 97.0], [76.8, 97.0], [76.9, 98.0], [77.0, 98.0], [77.1, 98.0], [77.2, 98.0], [77.3, 98.0], [77.4, 98.0], [77.5, 98.0], [77.6, 98.0], [77.7, 98.0], [77.8, 98.0], [77.9, 98.0], [78.0, 98.0], [78.1, 98.0], [78.2, 98.0], [78.3, 98.0], [78.4, 98.0], [78.5, 98.0], [78.6, 98.0], [78.7, 98.0], [78.8, 98.0], [78.9, 99.0], [79.0, 99.0], [79.1, 99.0], [79.2, 99.0], [79.3, 99.0], [79.4, 99.0], [79.5, 99.0], [79.6, 99.0], [79.7, 99.0], [79.8, 99.0], [79.9, 99.0], [80.0, 99.0], [80.1, 99.0], [80.2, 99.0], [80.3, 99.0], [80.4, 99.0], [80.5, 100.0], [80.6, 100.0], [80.7, 100.0], [80.8, 100.0], [80.9, 100.0], [81.0, 100.0], [81.1, 100.0], [81.2, 100.0], [81.3, 100.0], [81.4, 100.0], [81.5, 100.0], [81.6, 100.0], [81.7, 100.0], [81.8, 100.0], [81.9, 101.0], [82.0, 101.0], [82.1, 101.0], [82.2, 101.0], [82.3, 101.0], [82.4, 101.0], [82.5, 101.0], [82.6, 101.0], [82.7, 101.0], [82.8, 101.0], [82.9, 101.0], [83.0, 101.0], [83.1, 102.0], [83.2, 102.0], [83.3, 102.0], [83.4, 102.0], [83.5, 102.0], [83.6, 102.0], [83.7, 102.0], [83.8, 102.0], [83.9, 102.0], [84.0, 102.0], [84.1, 103.0], [84.2, 103.0], [84.3, 103.0], [84.4, 103.0], [84.5, 103.0], [84.6, 103.0], [84.7, 103.0], [84.8, 103.0], [84.9, 103.0], [85.0, 104.0], [85.1, 104.0], [85.2, 104.0], [85.3, 104.0], [85.4, 104.0], [85.5, 104.0], [85.6, 104.0], [85.7, 104.0], [85.8, 105.0], [85.9, 105.0], [86.0, 105.0], [86.1, 105.0], [86.2, 105.0], [86.3, 106.0], [86.4, 106.0], [86.5, 106.0], [86.6, 106.0], [86.7, 107.0], [86.8, 107.0], [86.9, 107.0], [87.0, 108.0], [87.1, 108.0], [87.2, 109.0], [87.3, 110.0], [87.4, 110.0], [87.5, 111.0], [87.6, 112.0], [87.7, 113.0], [87.8, 114.0], [87.9, 115.0], [88.0, 116.0], [88.1, 117.0], [88.2, 118.0], [88.3, 120.0], [88.4, 121.0], [88.5, 123.0], [88.6, 125.0], [88.7, 126.0], [88.8, 128.0], [88.9, 129.0], [89.0, 131.0], [89.1, 132.0], [89.2, 133.0], [89.3, 135.0], [89.4, 136.0], [89.5, 137.0], [89.6, 138.0], [89.7, 139.0], [89.8, 141.0], [89.9, 142.0], [90.0, 143.0], [90.1, 144.0], [90.2, 145.0], [90.3, 146.0], [90.4, 146.0], [90.5, 147.0], [90.6, 148.0], [90.7, 149.0], [90.8, 150.0], [90.9, 151.0], [91.0, 152.0], [91.1, 153.0], [91.2, 154.0], [91.3, 155.0], [91.4, 156.0], [91.5, 157.0], [91.6, 158.0], [91.7, 159.0], [91.8, 160.0], [91.9, 161.0], [92.0, 162.0], [92.1, 163.0], [92.2, 164.0], [92.3, 165.0], [92.4, 167.0], [92.5, 168.0], [92.6, 169.0], [92.7, 170.0], [92.8, 172.0], [92.9, 173.0], [93.0, 174.0], [93.1, 176.0], [93.2, 177.0], [93.3, 179.0], [93.4, 180.0], [93.5, 181.0], [93.6, 183.0], [93.7, 184.0], [93.8, 186.0], [93.9, 187.0], [94.0, 189.0], [94.1, 190.0], [94.2, 192.0], [94.3, 193.0], [94.4, 195.0], [94.5, 196.0], [94.6, 198.0], [94.7, 199.0], [94.8, 200.0], [94.9, 202.0], [95.0, 203.0], [95.1, 204.0], [95.2, 206.0], [95.3, 207.0], [95.4, 209.0], [95.5, 210.0], [95.6, 212.0], [95.7, 213.0], [95.8, 214.0], [95.9, 216.0], [96.0, 217.0], [96.1, 219.0], [96.2, 220.0], [96.3, 222.0], [96.4, 223.0], [96.5, 225.0], [96.6, 226.0], [96.7, 227.0], [96.8, 229.0], [96.9, 230.0], [97.0, 231.0], [97.1, 233.0], [97.2, 234.0], [97.3, 235.0], [97.4, 236.0], [97.5, 238.0], [97.6, 239.0], [97.7, 240.0], [97.8, 241.0], [97.9, 242.0], [98.0, 243.0], [98.1, 245.0], [98.2, 246.0], [98.3, 247.0], [98.4, 249.0], [98.5, 250.0], [98.6, 252.0], [98.7, 253.0], [98.8, 255.0], [98.9, 257.0], [99.0, 259.0], [99.1, 262.0], [99.2, 265.0], [99.3, 269.0], [99.4, 274.0], [99.5, 282.0], [99.6, 294.0], [99.7, 309.0], [99.8, 331.0], [99.9, 361.0], [100.0, 1403.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 804181.0, "series": [{"data": [[0.0, 804181.0], [300.0, 3047.0], [600.0, 9.0], [1200.0, 2.0], [1400.0, 1.0], [400.0, 382.0], [200.0, 49177.0], [100.0, 143089.0], [500.0, 112.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 122.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 999878.0, "series": [{"data": [[0.0, 999878.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 122.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1981.3860249999425, "minX": 1.5855819E12, "maxY": 1981.3860249999425, "series": [{"data": [[1.5855819E12, 1981.3860249999425]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855819E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 575.6666666666666, "series": [{"data": [[3.0, 2.0], [4.0, 3.0], [5.0, 3.0], [7.0, 3.0], [8.0, 2.0], [10.0, 2.5], [12.0, 3.0], [13.0, 3.0], [15.0, 3.4], [18.0, 3.0], [19.0, 4.0], [20.0, 5.2], [25.0, 3.0], [27.0, 4.666666666666666], [28.0, 2.5], [29.0, 3.0], [32.0, 3.0], [35.0, 4.5], [34.0, 4.25], [36.0, 4.6], [39.0, 5.0], [38.0, 5.0], [42.0, 14.0], [46.0, 9.333333333333334], [49.0, 7.5], [53.0, 5.0], [52.0, 6.0], [54.0, 5.0], [56.0, 4.2857142857142865], [59.0, 5.0], [58.0, 4.833333333333333], [63.0, 5.0], [62.0, 5.0], [66.0, 5.5], [65.0, 6.0], [64.0, 5.5], [71.0, 5.8], [70.0, 6.0], [73.0, 5.0], [72.0, 6.0], [79.0, 5.0], [78.0, 8.0], [77.0, 6.0], [82.0, 6.25], [81.0, 5.0], [80.0, 6.5], [88.0, 5.111111111111111], [95.0, 6.5], [99.0, 5.875], [97.0, 6.0], [96.0, 15.0], [102.0, 7.333333333333333], [101.0, 6.5], [100.0, 5.5], [111.0, 6.0], [110.0, 8.2], [109.0, 8.25], [108.0, 6.0], [114.0, 6.0], [113.0, 5.75], [112.0, 5.0], [118.0, 6.5], [117.0, 6.0], [116.0, 6.500000000000001], [122.0, 7.4], [121.0, 10.0], [120.0, 8.333333333333334], [127.0, 11.0], [126.0, 7.285714285714286], [125.0, 8.0], [124.0, 8.0], [135.0, 7.0], [134.0, 11.666666666666666], [133.0, 14.0], [131.0, 15.0], [129.0, 8.538461538461537], [140.0, 6.0], [139.0, 7.4], [138.0, 8.25], [137.0, 10.0], [136.0, 10.6], [150.0, 15.5], [149.0, 15.5], [147.0, 12.25], [146.0, 9.571428571428573], [145.0, 12.5], [144.0, 10.0], [158.0, 9.166666666666666], [157.0, 9.5], [156.0, 9.0], [155.0, 16.0], [153.0, 8.0], [152.0, 12.25], [165.0, 8.666666666666666], [164.0, 12.0], [163.0, 11.0], [162.0, 10.0], [172.0, 10.0], [170.0, 12.0], [168.0, 14.0], [183.0, 10.0], [182.0, 13.5], [181.0, 14.0], [180.0, 12.0], [179.0, 11.0], [178.0, 11.0], [177.0, 12.5], [176.0, 11.0], [191.0, 13.0], [190.0, 13.4], [189.0, 13.0], [188.0, 14.5], [187.0, 12.8], [185.0, 13.428571428571429], [184.0, 11.5], [199.0, 14.0], [196.0, 13.5], [193.0, 13.0], [207.0, 13.0], [206.0, 15.0], [205.0, 13.0], [204.0, 15.25], [203.0, 16.0], [202.0, 13.5], [201.0, 12.5], [200.0, 13.294117647058824], [213.0, 19.2], [212.0, 15.999999999999998], [210.0, 14.25], [209.0, 13.0], [208.0, 13.75], [223.0, 17.5], [222.0, 17.0], [221.0, 15.0], [219.0, 17.444444444444443], [217.0, 18.0], [231.0, 14.666666666666666], [230.0, 14.666666666666666], [229.0, 14.0], [228.0, 16.230769230769234], [226.0, 14.0], [225.0, 16.666666666666668], [238.0, 15.0], [237.0, 15.666666666666666], [236.0, 14.25], [235.0, 14.0], [233.0, 14.333333333333334], [246.0, 15.142857142857142], [244.0, 15.0], [243.0, 15.0], [242.0, 15.0], [241.0, 15.0], [255.0, 14.0], [254.0, 17.0], [253.0, 17.0], [252.0, 14.0], [251.0, 15.5], [250.0, 15.1], [248.0, 15.0], [271.0, 15.75], [268.0, 16.0], [263.0, 16.0], [261.0, 14.0], [260.0, 18.0], [259.0, 24.0], [258.0, 15.5], [256.0, 16.5], [286.0, 16.0], [287.0, 19.0], [285.0, 18.333333333333332], [284.0, 19.5], [283.0, 17.166666666666664], [282.0, 16.666666666666668], [280.0, 16.0], [279.0, 16.4], [273.0, 16.666666666666668], [272.0, 15.8], [275.0, 15.6], [274.0, 16.571428571428573], [278.0, 16.25], [277.0, 16.0], [276.0, 15.88888888888889], [301.0, 18.0], [302.0, 18.0], [300.0, 17.5], [290.0, 18.0], [289.0, 21.5], [288.0, 25.0], [299.0, 18.0], [298.0, 17.166666666666668], [297.0, 17.333333333333332], [296.0, 16.875], [294.0, 17.0], [293.0, 19.4], [318.0, 17.5], [319.0, 19.666666666666668], [317.0, 17.8], [316.0, 17.25], [315.0, 17.25], [314.0, 18.0], [313.0, 18.0], [312.0, 17.0], [311.0, 17.0], [305.0, 18.142857142857142], [304.0, 18.0], [307.0, 17.75], [306.0, 18.0], [310.0, 17.5], [309.0, 18.0], [308.0, 17.444444444444443], [334.0, 17.0], [335.0, 17.25], [333.0, 17.0], [331.0, 16.8], [330.0, 16.714285714285715], [329.0, 17.166666666666668], [327.0, 17.25], [326.0, 18.0], [325.0, 18.0], [350.0, 20.599999999999998], [351.0, 15.0], [349.0, 19.5], [348.0, 19.0], [347.0, 21.666666666666664], [346.0, 21.0], [344.0, 19.0], [343.0, 17.0], [337.0, 17.0], [336.0, 17.0], [339.0, 18.0], [338.0, 18.0], [342.0, 20.0], [341.0, 17.0], [340.0, 17.4], [365.0, 21.0], [366.0, 21.333333333333332], [364.0, 19.833333333333336], [354.0, 20.333333333333332], [353.0, 20.0], [352.0, 15.5], [363.0, 20.727272727272727], [362.0, 18.0], [361.0, 19.0], [360.0, 17.3], [359.0, 19.5], [358.0, 15.0], [357.0, 18.0], [356.0, 19.333333333333332], [371.0, 22.0], [381.0, 22.666666666666668], [382.0, 22.333333333333332], [380.0, 22.25], [378.0, 23.25], [376.0, 24.666666666666668], [375.0, 23.666666666666668], [373.0, 23.2], [372.0, 22.0], [370.0, 20.833333333333332], [369.0, 23.0], [368.0, 18.0], [387.0, 113.6], [388.0, 251.83333333333334], [389.0, 237.5], [390.0, 140.1818181818182], [391.0, 23.4], [386.0, 21.90909090909091], [384.0, 21.666666666666668], [392.0, 347.3636363636364], [393.0, 409.75], [394.0, 299.21052631578954], [395.0, 22.25], [396.0, 478.125], [397.0, 480.77777777777777], [398.0, 212.52941176470586], [399.0, 479.85], [401.0, 212.0], [400.0, 319.35714285714283], [402.0, 345.2173913043478], [404.0, 172.66666666666669], [406.0, 404.5], [407.0, 234.33333333333334], [415.0, 18.0], [408.0, 18.57142857142857], [411.0, 21.5], [410.0, 19.5], [414.0, 20.333333333333332], [413.0, 19.333333333333332], [403.0, 19.0], [430.0, 22.142857142857146], [431.0, 21.5], [429.0, 21.666666666666668], [428.0, 23.0], [427.0, 22.333333333333332], [426.0, 21.857142857142858], [425.0, 22.166666666666664], [424.0, 28.5], [423.0, 21.75], [419.0, 23.0], [418.0, 21.5], [422.0, 24.75], [421.0, 21.5], [420.0, 23.5], [434.0, 397.75], [433.0, 139.1428571428571], [435.0, 443.77777777777777], [444.0, 316.0769230769231], [445.0, 575.6666666666666], [446.0, 165.375], [447.0, 437.8], [440.0, 23.0], [437.0, 525.7777777777778], [436.0, 22.166666666666664], [438.0, 167.16666666666669], [439.0, 441.1111111111111], [432.0, 22.4], [441.0, 269.3333333333333], [442.0, 516.9], [443.0, 391.38461538461536], [462.0, 28.0], [448.0, 119.66666666666667], [449.0, 26.666666666666668], [451.0, 28.666666666666664], [450.0, 25.5], [454.0, 28.5], [453.0, 23.0], [452.0, 25.285714285714285], [463.0, 74.76923076923076], [461.0, 27.25], [460.0, 28.166666666666668], [459.0, 31.0], [458.0, 26.666666666666664], [457.0, 27.933333333333334], [456.0, 31.0], [477.0, 26.5], [464.0, 382.8], [465.0, 369.0], [467.0, 148.8], [466.0, 28.25], [468.0, 379.3333333333333], [470.0, 26.0], [469.0, 28.5], [471.0, 27.0], [473.0, 86.85714285714285], [474.0, 320.8], [475.0, 26.5], [479.0, 27.000000000000004], [472.0, 28.0], [476.0, 27.0], [492.0, 147.7368421052632], [485.0, 329.0], [484.0, 26.22222222222222], [486.0, 228.0], [487.0, 130.625], [481.0, 26.0], [483.0, 26.0], [482.0, 26.5], [488.0, 423.6666666666667], [489.0, 96.14285714285715], [491.0, 302.2], [490.0, 27.0], [495.0, 23.0], [494.0, 29.8], [508.0, 74.17647058823529], [496.0, 266.3333333333333], [498.0, 203.0], [497.0, 24.333333333333332], [499.0, 24.0], [500.0, 74.875], [501.0, 25.857142857142858], [503.0, 310.33333333333337], [502.0, 29.666666666666668], [504.0, 231.5], [505.0, 216.6], [506.0, 282.5], [507.0, 25.0], [509.0, 434.0], [511.0, 212.37500000000003], [536.0, 227.11111111111114], [516.0, 272.3333333333333], [512.0, 23.0], [514.0, 190.33333333333334], [528.0, 293.1111111111111], [540.0, 111.2], [542.0, 31.2], [538.0, 299.6], [518.0, 27.428571428571427], [530.0, 299.44444444444446], [532.0, 248.45454545454552], [534.0, 303.0], [520.0, 229.5333333333333], [522.0, 311.6363636363637], [524.0, 29.0], [526.0, 407.0], [574.0, 31.666666666666668], [562.0, 31.5], [560.0, 32.37500000000001], [564.0, 31.5], [566.0, 31.0], [572.0, 31.714285714285715], [570.0, 31.0], [568.0, 31.0], [550.0, 32.5], [548.0, 31.33333333333333], [546.0, 31.0], [544.0, 30.0], [558.0, 31.75], [556.0, 32.0], [552.0, 32.18749999999999], [600.0, 327.7], [582.0, 321.0], [580.0, 31.0], [578.0, 31.0], [576.0, 31.625], [590.0, 255.63636363636365], [602.0, 366.09999999999997], [604.0, 188.99999999999997], [606.0, 411.0], [592.0, 208.5], [594.0, 138.58823529411768], [596.0, 205.9], [598.0, 205.0], [584.0, 204.25000000000003], [586.0, 139.49999999999997], [588.0, 387.5], [636.0, 378.0], [614.0, 131.25], [632.0, 376.0], [634.0, 148.33333333333331], [638.0, 31.5], [624.0, 412.5], [626.0, 369.33333333333337], [628.0, 60.909090909090914], [630.0, 376.0], [616.0, 108.78571428571428], [618.0, 176.74074074074076], [620.0, 84.0], [622.0, 101.2857142857143], [612.0, 33.63636363636364], [610.0, 34.27272727272727], [608.0, 31.76470588235294], [642.0, 105.2], [646.0, 250.99999999999997], [640.0, 29.333333333333332], [654.0, 307.0], [652.0, 95.95238095238095], [650.0, 289.2], [644.0, 163.3448275862069], [664.0, 33.625], [666.0, 34.92307692307693], [656.0, 32.50000000000001], [670.0, 32.666666666666664], [658.0, 355.3333333333333], [660.0, 384.125], [662.0, 232.88888888888889], [648.0, 439.0], [674.0, 302.0], [672.0, 174.71428571428572], [684.0, 32.16666666666667], [686.0, 182.16666666666669], [682.0, 245.11764705882354], [676.0, 228.83333333333334], [678.0, 125.14285714285715], [688.0, 125.62857142857148], [700.0, 113.85714285714286], [702.0, 200.76923076923075], [698.0, 215.5], [696.0, 158.49999999999997], [690.0, 172.87500000000003], [692.0, 180.66666666666666], [694.0, 33.99999999999999], [680.0, 125.57692307692308], [706.0, 338.0], [704.0, 196.66666666666669], [718.0, 114.93333333333332], [716.0, 121.41666666666669], [714.0, 145.83333333333334], [708.0, 198.00000000000003], [710.0, 87.94736842105263], [720.0, 105.61538461538461], [734.0, 35.25], [732.0, 34.5], [730.0, 36.0625], [728.0, 34.5], [724.0, 35.0], [726.0, 34.0], [712.0, 46.19230769230769], [740.0, 35.25], [742.0, 38.2], [750.0, 185.99999999999997], [746.0, 212.8], [744.0, 42.0], [748.0, 38.1], [736.0, 36.5], [760.0, 84.44], [762.0, 287.5], [766.0, 93.25000000000001], [752.0, 36.6875], [756.0, 166.57142857142856], [758.0, 151.38461538461542], [770.0, 194.0], [768.0, 155.6], [782.0, 37.36666666666666], [780.0, 233.8], [772.0, 36.43478260869565], [774.0, 127.00000000000003], [792.0, 183.66666666666666], [794.0, 37.0], [798.0, 180.43478260869566], [784.0, 129.58823529411768], [786.0, 269.0], [788.0, 159.00000000000003], [790.0, 228.38461538461542], [776.0, 370.7142857142857], [778.0, 363.4], [802.0, 303.0], [800.0, 167.71428571428572], [814.0, 100.89473684210527], [812.0, 304.6666666666667], [810.0, 191.0666666666667], [804.0, 138.61538461538464], [806.0, 189.26666666666665], [816.0, 163.92857142857144], [830.0, 355.0], [826.0, 38.33333333333333], [828.0, 262.8888888888889], [818.0, 259.72727272727275], [820.0, 96.75], [822.0, 40.0], [808.0, 215.69230769230768], [834.0, 328.57142857142856], [832.0, 277.7333333333333], [846.0, 76.16666666666666], [844.0, 328.4117647058824], [842.0, 128.28571428571428], [836.0, 259.3333333333333], [838.0, 357.75], [848.0, 41.5], [862.0, 136.23076923076925], [860.0, 218.8571428571429], [858.0, 218.64999999999998], [856.0, 161.3913043478261], [850.0, 108.07142857142856], [852.0, 287.2], [854.0, 344.6666666666667], [840.0, 145.33333333333334], [870.0, 240.0], [868.0, 95.0], [864.0, 133.76470588235293], [866.0, 41.0], [878.0, 234.66666666666666], [876.0, 140.66666666666669], [888.0, 97.0], [890.0, 164.6], [892.0, 224.88888888888886], [894.0, 177.04999999999998], [880.0, 336.53846153846155], [882.0, 196.41666666666669], [884.0, 256.5454545454545], [886.0, 125.6666666666667], [872.0, 143.3214285714286], [874.0, 358.25], [898.0, 260.90909090909093], [896.0, 128.47619047619048], [910.0, 130.5], [908.0, 213.25], [906.0, 146.68750000000003], [900.0, 68.79999999999998], [902.0, 80.52631578947368], [912.0, 260.2], [926.0, 71.875], [924.0, 157.1052631578947], [922.0, 155.78260869565213], [920.0, 189.8125], [914.0, 97.33333333333333], [916.0, 268.57142857142856], [918.0, 197.20000000000002], [904.0, 186.29999999999998], [930.0, 240.1], [928.0, 203.66666666666663], [942.0, 147.46153846153845], [940.0, 87.53333333333333], [938.0, 128.375], [932.0, 203.54545454545456], [934.0, 283.16666666666663], [944.0, 172.4210526315789], [958.0, 111.25], [956.0, 49.25], [954.0, 48.25], [952.0, 48.0], [946.0, 134.99999999999997], [948.0, 141.00000000000003], [950.0, 46.86666666666667], [936.0, 202.2857142857143], [964.0, 165.93333333333337], [962.0, 305.0], [960.0, 51.0], [974.0, 95.0], [972.0, 214.16666666666666], [966.0, 171.625], [976.0, 80.43243243243242], [990.0, 180.3684210526316], [988.0, 181.57142857142856], [986.0, 88.28571428571428], [984.0, 203.99999999999997], [978.0, 258.9166666666667], [980.0, 114.15909090909092], [982.0, 181.44999999999996], [968.0, 304.85714285714283], [970.0, 186.29999999999998], [994.0, 164.1], [992.0, 182.52], [1006.0, 210.99999999999997], [1004.0, 200.0], [1002.0, 134.69565217391306], [996.0, 129.43478260869563], [998.0, 191.2857142857143], [1008.0, 245.46153846153845], [1022.0, 162.8125], [1020.0, 121.625], [1018.0, 152.28571428571428], [1016.0, 135.0625], [1010.0, 159.7], [1012.0, 206.1428571428571], [1014.0, 203.8], [1000.0, 268.6], [1028.0, 147.63333333333333], [1024.0, 96.71428571428572], [1052.0, 188.18181818181816], [1048.0, 195.5], [1044.0, 187.1818181818182], [1040.0, 119.37931034482759], [1032.0, 274.5], [1036.0, 185.3809523809524], [1056.0, 230.14285714285717], [1084.0, 251.07692307692304], [1080.0, 198.11111111111111], [1076.0, 102.2], [1072.0, 227.2307692307692], [1060.0, 121.79999999999997], [1064.0, 234.39999999999998], [1068.0, 204.41176470588232], [1092.0, 139.28571428571428], [1088.0, 137.9], [1116.0, 221.75], [1112.0, 177.66666666666666], [1108.0, 194.95000000000002], [1104.0, 216.49999999999997], [1096.0, 169.3529411764706], [1100.0, 115.36], [1120.0, 164.53333333333336], [1148.0, 252.33333333333331], [1144.0, 189.95238095238093], [1140.0, 164.47619047619048], [1136.0, 118.22222222222221], [1124.0, 128.41176470588232], [1128.0, 169.2857142857143], [1132.0, 143.20000000000005], [1156.0, 153.15384615384613], [1164.0, 210.1764705882353], [1152.0, 229.5], [1180.0, 195.05882352941177], [1176.0, 108.3529411764706], [1172.0, 82.64705882352939], [1168.0, 189.5], [1160.0, 130.85714285714286], [1200.0, 218.91666666666666], [1204.0, 113.84615384615384], [1208.0, 132.91666666666663], [1212.0, 222.07142857142856], [1184.0, 205.25], [1188.0, 182.61538461538464], [1192.0, 129.41176470588235], [1196.0, 190.30434782608694], [1216.0, 119.73333333333332], [1224.0, 203.74074074074076], [1228.0, 147.6333333333333], [1220.0, 194.4375], [1244.0, 202.83333333333334], [1240.0, 210.5], [1236.0, 174.07142857142856], [1232.0, 151.83333333333337], [1264.0, 115.82352941176471], [1268.0, 125.38095238095238], [1272.0, 236.10000000000002], [1276.0, 188.28571428571425], [1248.0, 137.64285714285714], [1252.0, 127.39999999999999], [1256.0, 235.59999999999997], [1260.0, 216.25], [1284.0, 204.4], [1280.0, 182.66666666666669], [1308.0, 176.8181818181818], [1304.0, 69.69999999999999], [1300.0, 68.76470588235293], [1296.0, 70.66666666666667], [1288.0, 85.39130434782608], [1292.0, 155.94444444444446], [1312.0, 250.14285714285714], [1340.0, 248.5500000000001], [1336.0, 154.24999999999997], [1332.0, 147.0], [1328.0, 185.44444444444446], [1316.0, 205.33333333333337], [1320.0, 259.66666666666663], [1324.0, 270.96551724137936], [1348.0, 323.0], [1344.0, 310.2857142857143], [1372.0, 167.0], [1368.0, 311.6666666666667], [1364.0, 345.0], [1360.0, 146.375], [1352.0, 273.25], [1356.0, 152.17647058823528], [1376.0, 120.06060606060608], [1404.0, 280.2222222222222], [1400.0, 305.4285714285714], [1396.0, 267.3636363636364], [1392.0, 103.58620689655174], [1380.0, 250.55555555555551], [1384.0, 209.52631578947367], [1388.0, 191.2941176470588], [1412.0, 165.95833333333334], [1408.0, 153.62500000000003], [1436.0, 211.22222222222223], [1432.0, 191.55], [1428.0, 148.94736842105263], [1416.0, 136.60606060606057], [1420.0, 193.24999999999997], [1440.0, 119.79310344827582], [1468.0, 219.67499999999993], [1464.0, 268.77777777777777], [1460.0, 232.125], [1456.0, 193.45454545454544], [1444.0, 300.87499999999994], [1448.0, 122.2222222222222], [1452.0, 132.89795918367344], [1424.0, 268.17391304347825], [1476.0, 199.44444444444443], [1472.0, 163.94117647058818], [1500.0, 211.47619047619048], [1496.0, 188.25], [1492.0, 122.17241379310344], [1480.0, 236.00000000000003], [1484.0, 242.58333333333334], [1504.0, 241.43749999999997], [1532.0, 154.15384615384613], [1528.0, 165.39999999999998], [1524.0, 186.0769230769231], [1520.0, 128.85714285714286], [1508.0, 232.55555555555554], [1512.0, 190.20833333333334], [1516.0, 212.66666666666669], [1488.0, 187.06451612903223], [1540.0, 197.16666666666669], [1536.0, 266.80000000000007], [1564.0, 212.84848484848484], [1560.0, 254.1428571428572], [1556.0, 216.4074074074074], [1544.0, 129.96666666666667], [1548.0, 173.69230769230768], [1568.0, 229.2857142857143], [1596.0, 177.09090909090907], [1588.0, 89.0], [1592.0, 157.7857142857143], [1584.0, 175.03225806451616], [1572.0, 182.80952380952382], [1576.0, 192.8636363636364], [1580.0, 150.0], [1552.0, 173.06896551724137], [1608.0, 81.54545454545455], [1600.0, 141.8], [1628.0, 169.27027027027032], [1624.0, 205.07142857142856], [1612.0, 222.17647058823533], [1648.0, 101.60000000000001], [1652.0, 141.49999999999997], [1656.0, 226.71428571428575], [1660.0, 164.25000000000006], [1632.0, 214.2], [1636.0, 149.28205128205127], [1640.0, 124.66666666666667], [1644.0, 160.58823529411762], [1616.0, 156.06122448979585], [1620.0, 246.13636363636363], [1668.0, 131.67499999999995], [1664.0, 229.13333333333333], [1692.0, 155.26315789473682], [1688.0, 152.88888888888889], [1684.0, 218.33333333333334], [1672.0, 225.66666666666669], [1676.0, 201.68421052631578], [1696.0, 112.52777777777776], [1724.0, 85.5135135135135], [1720.0, 181.08333333333334], [1716.0, 132.1875], [1712.0, 193.6896551724138], [1700.0, 177.75], [1704.0, 67.33333333333333], [1708.0, 178.15384615384616], [1680.0, 133.28571428571428], [1732.0, 108.64102564102565], [1728.0, 150.04347826086956], [1756.0, 150.14285714285714], [1752.0, 141.125], [1748.0, 217.83333333333334], [1736.0, 200.0], [1740.0, 157.25806451612905], [1760.0, 215.0], [1788.0, 105.33333333333333], [1784.0, 97.12820512820512], [1780.0, 231.57894736842107], [1776.0, 173.46666666666664], [1764.0, 101.52380952380955], [1768.0, 135.43750000000003], [1772.0, 213.44444444444443], [1744.0, 188.8181818181818], [1796.0, 213.71428571428572], [1804.0, 162.35714285714286], [1792.0, 237.64705882352945], [1820.0, 175.3225806451613], [1816.0, 262.2244897959183], [1812.0, 259.70588235294116], [1800.0, 290.7462686567165], [1840.0, 246.15], [1844.0, 265.3599999999999], [1848.0, 243.49438202247197], [1852.0, 251.5365853658537], [1824.0, 231.0714285714286], [1828.0, 249.73913043478265], [1832.0, 40.0], [1836.0, 40.54545454545454], [1808.0, 183.13888888888889], [1860.0, 222.54166666666669], [1856.0, 243.2857142857143], [1884.0, 217.48648648648654], [1880.0, 138.53333333333333], [1876.0, 240.05555555555554], [1864.0, 235.72340425531917], [1868.0, 202.59999999999997], [1888.0, 172.8333333333334], [1916.0, 229.23076923076925], [1912.0, 218.8947368421053], [1908.0, 205.56250000000003], [1904.0, 196.70967741935485], [1892.0, 226.4], [1896.0, 208.23529411764707], [1900.0, 223.625], [1872.0, 196.06249999999997], [1924.0, 182.78124999999997], [1920.0, 213.55555555555554], [1948.0, 205.5909090909091], [1944.0, 191.70370370370364], [1940.0, 223.90476190476193], [1928.0, 180.86956521739128], [1932.0, 204.33333333333331], [1952.0, 201.53333333333333], [1980.0, 188.25000000000003], [1976.0, 211.89583333333334], [1972.0, 191.58333333333331], [1968.0, 212.1724137931035], [1956.0, 238.66666666666666], [1960.0, 210.88235294117646], [1964.0, 145.4375], [1936.0, 180.85185185185188], [1984.0, 87.63934426229508], [1988.0, 100.1963190184049], [1992.0, 115.61006289308182], [1996.0, 99.39136302294197], [2000.0, 97.86402958708588], [1025.0, 230.66666666666669], [1053.0, 170.33333333333334], [1049.0, 150.64285714285714], [1045.0, 173.71428571428572], [1041.0, 248.0], [1029.0, 132.6296296296296], [1033.0, 140.75], [1037.0, 213.05263157894737], [1085.0, 134.29629629629633], [1081.0, 173.28571428571428], [1077.0, 78.2857142857143], [1073.0, 122.9], [1057.0, 121.55555555555554], [1061.0, 132.89285714285714], [1065.0, 159.57575757575762], [1069.0, 114.58064516129032], [1089.0, 195.36363636363635], [1117.0, 207.39999999999998], [1113.0, 73.89999999999999], [1109.0, 239.84615384615387], [1105.0, 201.2], [1093.0, 216.86666666666667], [1097.0, 207.0], [1101.0, 166.75], [1149.0, 71.64285714285714], [1145.0, 103.22222222222223], [1141.0, 118.47619047619044], [1137.0, 148.8421052631579], [1121.0, 166.60869565217394], [1125.0, 209.8095238095238], [1129.0, 157.57142857142858], [1133.0, 166.53846153846152], [1153.0, 149.00000000000003], [1181.0, 150.96], [1177.0, 160.7142857142857], [1173.0, 78.97058823529412], [1169.0, 175.54545454545453], [1157.0, 176.7222222222222], [1161.0, 139.16666666666666], [1165.0, 179.0833333333333], [1201.0, 193.72222222222223], [1205.0, 113.21428571428572], [1209.0, 159.7241379310345], [1213.0, 180.56], [1185.0, 113.12499999999999], [1189.0, 223.5], [1193.0, 190.29999999999998], [1197.0, 189.125], [1221.0, 188.2], [1217.0, 63.0], [1245.0, 179.4666666666667], [1241.0, 222.0], [1237.0, 133.28000000000006], [1233.0, 113.61538461538461], [1225.0, 167.21052631578948], [1229.0, 180.2857142857143], [1265.0, 158.81818181818184], [1269.0, 222.4375], [1273.0, 210.50000000000003], [1277.0, 147.86363636363635], [1249.0, 236.0], [1253.0, 82.72727272727272], [1257.0, 198.66666666666666], [1261.0, 242.8], [1285.0, 101.27777777777777], [1329.0, 152.9], [1309.0, 120.15789473684212], [1305.0, 71.33333333333333], [1301.0, 70.0], [1297.0, 69.5], [1281.0, 184.66666666666669], [1289.0, 160.5], [1293.0, 99.35714285714286], [1341.0, 147.57142857142858], [1337.0, 191.07692307692307], [1333.0, 119.64285714285714], [1313.0, 259.23076923076917], [1317.0, 222.52380952380952], [1321.0, 145.40740740740742], [1325.0, 149.33333333333334], [1349.0, 243.27272727272728], [1353.0, 260.2380952380951], [1373.0, 302.3333333333333], [1369.0, 192.05882352941177], [1365.0, 70.0], [1361.0, 116.1304347826087], [1345.0, 152.11111111111114], [1357.0, 298.5833333333333], [1393.0, 267.5714285714285], [1397.0, 267.16666666666663], [1401.0, 173.73913043478262], [1405.0, 253.52941176470583], [1377.0, 266.9000000000001], [1381.0, 229.73076923076925], [1385.0, 184.7741935483871], [1389.0, 224.10526315789474], [1413.0, 212.52631578947367], [1409.0, 258.6428571428571], [1437.0, 137.71428571428567], [1433.0, 198.81818181818184], [1429.0, 255.74999999999994], [1417.0, 160.44444444444446], [1421.0, 134.62500000000003], [1441.0, 213.44444444444443], [1469.0, 201.37037037037035], [1465.0, 265.7368421052632], [1461.0, 141.0], [1457.0, 85.8125], [1445.0, 201.05555555555551], [1449.0, 259.63636363636357], [1453.0, 195.82352941176467], [1425.0, 230.24], [1477.0, 162.11538461538464], [1473.0, 199.54545454545453], [1501.0, 233.8235294117647], [1497.0, 99.88235294117646], [1493.0, 251.07142857142856], [1481.0, 132.8648648648648], [1485.0, 213.7857142857143], [1505.0, 147.36363636363635], [1533.0, 209.94444444444443], [1529.0, 136.3888888888889], [1525.0, 171.69696969696966], [1521.0, 208.0], [1509.0, 213.93103448275858], [1513.0, 218.38095238095244], [1517.0, 158.58333333333334], [1489.0, 219.60000000000002], [1541.0, 162.0952380952381], [1537.0, 257.3333333333333], [1565.0, 185.85714285714286], [1561.0, 130.37142857142854], [1557.0, 113.64705882352942], [1545.0, 191.19999999999996], [1549.0, 238.07142857142858], [1569.0, 218.84210526315795], [1597.0, 233.3125], [1593.0, 216.33333333333331], [1589.0, 143.47368421052633], [1585.0, 113.13333333333334], [1573.0, 114.6875], [1577.0, 211.66666666666669], [1581.0, 221.73333333333335], [1553.0, 222.7894736842105], [1613.0, 146.70588235294116], [1609.0, 139.16666666666669], [1601.0, 224.28571428571425], [1605.0, 91.5], [1629.0, 203.7941176470588], [1625.0, 127.92000000000002], [1649.0, 141.04838709677415], [1653.0, 219.7142857142857], [1657.0, 230.0], [1661.0, 184.33333333333334], [1633.0, 158.9069767441861], [1637.0, 153.65384615384616], [1641.0, 185.48979591836735], [1645.0, 227.29166666666669], [1617.0, 174.15789473684214], [1621.0, 180.86363636363637], [1669.0, 149.1081081081081], [1665.0, 222.54545454545453], [1693.0, 167.72727272727275], [1689.0, 165.07142857142856], [1685.0, 209.88461538461542], [1673.0, 194.57575757575756], [1677.0, 164.74999999999997], [1697.0, 178.76], [1725.0, 120.06451612903223], [1721.0, 205.33333333333334], [1717.0, 104.7857142857143], [1713.0, 102.77777777777781], [1701.0, 187.03030303030306], [1705.0, 116.07692307692308], [1709.0, 102.71739130434783], [1681.0, 111.65384615384615], [1733.0, 78.40816326530614], [1729.0, 156.17391304347825], [1757.0, 190.8181818181818], [1753.0, 210.71999999999997], [1749.0, 174.78787878787878], [1737.0, 105.83333333333334], [1741.0, 131.48571428571424], [1761.0, 187.9047619047619], [1789.0, 248.66666666666666], [1785.0, 140.92000000000002], [1781.0, 122.99999999999999], [1777.0, 207.11764705882356], [1765.0, 132.52777777777777], [1769.0, 158.1818181818182], [1773.0, 226.14285714285714], [1745.0, 95.82352941176471], [1797.0, 204.78571428571428], [1793.0, 182.55555555555554], [1821.0, 161.88888888888889], [1817.0, 166.81578947368416], [1813.0, 266.9302325581395], [1801.0, 216.45454545454544], [1805.0, 172.9], [1825.0, 266.06521739130426], [1853.0, 253.67088607594934], [1849.0, 251.58823529411762], [1845.0, 233.76190476190476], [1841.0, 255.47058823529414], [1829.0, 209.66666666666666], [1833.0, 40.0], [1837.0, 40.16666666666667], [1809.0, 200.40000000000003], [1861.0, 132.15789473684217], [1857.0, 218.56097560975607], [1885.0, 203.38235294117644], [1881.0, 244.94117647058823], [1877.0, 232.21621621621622], [1865.0, 224.26785714285717], [1869.0, 240.82352941176472], [1889.0, 164.33333333333334], [1917.0, 206.81818181818184], [1913.0, 210.52173913043478], [1909.0, 179.1904761904762], [1905.0, 190.88], [1893.0, 176.85714285714286], [1897.0, 234.91304347826087], [1901.0, 223.0909090909091], [1873.0, 257.6666666666667], [1929.0, 179.58139534883716], [1925.0, 228.58333333333334], [1921.0, 157.33333333333334], [1945.0, 118.0], [1949.0, 221.30434782608697], [1933.0, 155.79166666666669], [1953.0, 129.44444444444443], [1981.0, 193.66666666666669], [1977.0, 225.4814814814815], [1973.0, 199.0], [1969.0, 222.61111111111114], [1957.0, 173.39130434782612], [1961.0, 230.36], [1965.0, 224.04166666666663], [1937.0, 223.5757575757576], [1941.0, 209.78260869565216], [1985.0, 92.65573770491801], [1989.0, 133.4065040650406], [1993.0, 100.47500000000002], [1997.0, 105.70468948035489], [517.0, 25.2], [525.0, 418.85714285714283], [513.0, 88.06666666666666], [515.0, 154.0], [543.0, 30.0], [539.0, 86.0], [519.0, 26.0], [537.0, 231.0], [529.0, 168.36363636363635], [531.0, 147.83333333333334], [533.0, 226.89999999999998], [535.0, 164.0], [521.0, 27.4], [523.0, 155.33333333333331], [527.0, 168.54545454545456], [573.0, 31.5], [563.0, 352.0], [561.0, 31.6], [565.0, 31.333333333333332], [567.0, 31.375], [575.0, 32.0], [571.0, 31.333333333333332], [569.0, 31.0], [551.0, 33.0], [549.0, 33.0], [547.0, 31.208333333333332], [545.0, 30.5], [557.0, 31.77777777777778], [553.0, 31.0], [583.0, 57.75], [587.0, 386.5], [581.0, 221.33333333333331], [579.0, 31.5], [591.0, 390.125], [601.0, 104.1], [603.0, 259.37499999999994], [605.0, 333.7142857142857], [593.0, 392.0], [595.0, 103.75], [597.0, 251.91666666666666], [599.0, 154.64285714285714], [585.0, 205.64285714285714], [589.0, 206.85714285714286], [635.0, 32.90909090909091], [619.0, 288.875], [615.0, 271.8333333333333], [633.0, 108.21428571428574], [637.0, 33.5], [639.0, 30.0], [625.0, 263.18181818181824], [627.0, 299.71428571428567], [629.0, 324.7142857142857], [631.0, 119.29411764705881], [617.0, 316.1666666666667], [621.0, 212.46153846153845], [623.0, 204.5], [613.0, 32.63636363636363], [611.0, 34.333333333333336], [609.0, 33.0], [643.0, 282.99999999999994], [641.0, 111.00000000000001], [655.0, 32.49999999999999], [653.0, 186.6666666666666], [651.0, 55.4375], [645.0, 394.08333333333337], [647.0, 246.8571428571429], [665.0, 34.666666666666664], [669.0, 33.857142857142854], [667.0, 34.111111111111114], [671.0, 225.71428571428572], [657.0, 346.62500000000006], [659.0, 147.92307692307693], [661.0, 222.30769230769235], [663.0, 97.0], [649.0, 165.52631578947367], [675.0, 130.3076923076923], [687.0, 204.24999999999997], [685.0, 123.75], [683.0, 323.24999999999994], [673.0, 235.4], [677.0, 89.45833333333331], [679.0, 120.5], [689.0, 31.437500000000004], [703.0, 252.25], [701.0, 32.83333333333333], [699.0, 253.85714285714286], [697.0, 73.82608695652175], [691.0, 236.27272727272728], [693.0, 186.0], [695.0, 307.8], [681.0, 202.1], [707.0, 137.1], [719.0, 162.375], [717.0, 261.57142857142856], [715.0, 168.0], [705.0, 149.6], [709.0, 119.6153846153846], [711.0, 95.75], [735.0, 35.45454545454545], [733.0, 32.0], [731.0, 35.25], [721.0, 153.5], [723.0, 36.0], [725.0, 36.4], [727.0, 34.16666666666667], [713.0, 139.14285714285714], [751.0, 144.83333333333334], [745.0, 38.875], [747.0, 87.33333333333334], [749.0, 84.27272727272725], [739.0, 35.77777777777778], [737.0, 35.142857142857146], [741.0, 36.0], [743.0, 36.375], [761.0, 206.33333333333334], [763.0, 149.76923076923077], [765.0, 142.00000000000003], [755.0, 39.368421052631575], [753.0, 38.5], [757.0, 217.125], [759.0, 338.0], [771.0, 37.666666666666664], [769.0, 109.64705882352938], [779.0, 187.82352941176464], [783.0, 173.34615384615384], [781.0, 222.1428571428571], [773.0, 37.5], [775.0, 100.04000000000002], [793.0, 194.0], [795.0, 39.15384615384615], [797.0, 145.66666666666666], [799.0, 347.7142857142857], [785.0, 204.23076923076925], [787.0, 208.61538461538458], [789.0, 37.0], [791.0, 241.33333333333331], [777.0, 124.9090909090909], [803.0, 270.14285714285717], [815.0, 108.60714285714283], [813.0, 150.1153846153846], [811.0, 137.86206896551724], [801.0, 321.59999999999997], [805.0, 170.42307692307693], [807.0, 246.87500000000003], [831.0, 213.2307692307692], [829.0, 268.29999999999995], [827.0, 84.64285714285714], [825.0, 42.0], [817.0, 300.0], [819.0, 297.5], [821.0, 39.0], [823.0, 38.18181818181818], [809.0, 316.6666666666667], [835.0, 133.66666666666669], [847.0, 40.0], [845.0, 71.49999999999999], [843.0, 353.5], [833.0, 314.8888888888889], [837.0, 167.64999999999998], [839.0, 225.36842105263156], [849.0, 102.4], [863.0, 315.0555555555556], [861.0, 307.5714285714285], [859.0, 250.66666666666663], [857.0, 154.72727272727275], [851.0, 348.72727272727275], [853.0, 157.66666666666663], [855.0, 42.9375], [841.0, 279.57142857142856], [869.0, 92.00000000000001], [875.0, 192.8666666666667], [865.0, 42.470588235294116], [867.0, 43.25], [879.0, 306.82352941176464], [877.0, 297.40909090909093], [871.0, 297.45454545454544], [889.0, 233.75000000000003], [891.0, 54.66666666666667], [893.0, 302.8333333333333], [895.0, 165.16666666666669], [881.0, 342.15384615384613], [883.0, 41.0], [885.0, 134.30769230769232], [887.0, 244.59999999999997], [873.0, 307.6666666666667], [899.0, 196.6842105263158], [911.0, 239.33333333333331], [909.0, 148.0], [907.0, 278.5], [897.0, 217.11111111111114], [901.0, 291.6666666666667], [903.0, 189.28571428571428], [927.0, 190.0833333333333], [925.0, 168.9230769230769], [923.0, 219.88888888888886], [921.0, 204.20000000000002], [913.0, 248.4444444444444], [915.0, 140.1428571428571], [917.0, 75.86666666666666], [919.0, 95.33333333333333], [905.0, 126.30769230769229], [931.0, 102.61290322580646], [943.0, 145.91666666666669], [941.0, 133.65000000000003], [939.0, 239.99999999999997], [929.0, 90.26315789473686], [933.0, 99.99999999999999], [935.0, 71.34615384615384], [957.0, 49.6], [955.0, 48.52173913043478], [953.0, 48.0], [959.0, 49.666666666666664], [945.0, 153.3809523809524], [947.0, 112.76923076923077], [951.0, 47.0], [937.0, 183.625], [967.0, 132.7], [963.0, 72.39999999999999], [961.0, 48.833333333333336], [975.0, 295.0], [973.0, 290.0], [965.0, 138.0], [991.0, 251.72222222222223], [989.0, 232.5833333333333], [987.0, 293.0], [985.0, 99.80000000000001], [977.0, 295.57142857142856], [979.0, 146.31250000000003], [981.0, 233.38888888888889], [983.0, 247.05882352941177], [969.0, 275.83333333333337], [971.0, 203.36363636363637], [995.0, 197.94999999999993], [1007.0, 196.62499999999997], [1005.0, 203.05555555555554], [1003.0, 89.81818181818181], [993.0, 151.70967741935485], [997.0, 171.46153846153845], [999.0, 83.85714285714286], [1023.0, 261.2], [1021.0, 86.76923076923076], [1019.0, 104.38461538461537], [1017.0, 153.38709677419354], [1009.0, 243.3], [1011.0, 139.0], [1013.0, 192.81818181818184], [1015.0, 129.0285714285714], [1001.0, 209.59999999999997], [1030.0, 194.7], [1026.0, 238.0], [1054.0, 101.55555555555556], [1050.0, 157.1111111111111], [1046.0, 217.13333333333335], [1042.0, 162.63636363636365], [1034.0, 124.82352941176468], [1038.0, 161.0], [1086.0, 159.29166666666666], [1082.0, 199.8947368421053], [1078.0, 212.60000000000002], [1074.0, 226.54545454545453], [1058.0, 104.35000000000002], [1062.0, 93.87096774193549], [1066.0, 206.55555555555557], [1070.0, 214.5], [1094.0, 142.5263157894737], [1090.0, 189.0], [1118.0, 115.07692307692307], [1114.0, 217.15384615384613], [1110.0, 207.9333333333333], [1106.0, 183.85714285714286], [1098.0, 213.77777777777777], [1102.0, 92.4], [1150.0, 175.88235294117646], [1146.0, 114.32], [1142.0, 134.0], [1138.0, 161.0625], [1122.0, 239.26666666666665], [1126.0, 98.33333333333334], [1130.0, 141.8], [1134.0, 126.00000000000001], [1154.0, 204.66666666666669], [1182.0, 237.20000000000002], [1178.0, 209.53333333333333], [1174.0, 191.4], [1170.0, 118.44444444444444], [1158.0, 62.70967741935483], [1162.0, 133.61538461538458], [1166.0, 183.0], [1202.0, 167.85714285714286], [1206.0, 94.125], [1210.0, 188.75], [1214.0, 212.53846153846155], [1186.0, 143.03571428571422], [1190.0, 196.22222222222223], [1194.0, 175.0], [1198.0, 169.88], [1218.0, 204.5], [1246.0, 193.0], [1242.0, 197.92307692307696], [1238.0, 182.9], [1234.0, 159.91666666666669], [1222.0, 198.73684210526318], [1226.0, 210.8], [1230.0, 159.12], [1266.0, 84.23529411764706], [1270.0, 146.17948717948718], [1274.0, 191.7142857142857], [1278.0, 114.4], [1250.0, 155.29629629629633], [1254.0, 124.9090909090909], [1258.0, 185.86111111111106], [1262.0, 161.85], [1286.0, 186.73684210526315], [1290.0, 167.6111111111111], [1310.0, 182.125], [1306.0, 146.7], [1302.0, 70.5], [1298.0, 69.71428571428572], [1282.0, 167.5625], [1342.0, 193.94444444444446], [1338.0, 250.30000000000007], [1334.0, 109.14814814814817], [1330.0, 216.0], [1294.0, 69.9090909090909], [1314.0, 165.0], [1318.0, 175.1724137931035], [1322.0, 156.87500000000006], [1326.0, 265.7826086956522], [1350.0, 134.42105263157896], [1346.0, 232.85714285714286], [1370.0, 165.70588235294122], [1374.0, 103.0], [1366.0, 306.4761904761904], [1362.0, 285.0], [1354.0, 105.33333333333333], [1358.0, 138.16666666666669], [1406.0, 125.0869565217391], [1402.0, 303.6666666666667], [1398.0, 153.83333333333334], [1394.0, 215.6], [1378.0, 278.625], [1382.0, 280.00000000000006], [1386.0, 321.77777777777777], [1390.0, 215.66666666666666], [1414.0, 122.47619047619048], [1438.0, 211.1818181818182], [1434.0, 260.3076923076923], [1430.0, 126.7441860465116], [1410.0, 248.20000000000002], [1418.0, 161.8], [1422.0, 241.37500000000006], [1470.0, 221.27777777777777], [1466.0, 270.45454545454555], [1462.0, 248.2], [1458.0, 251.61538461538464], [1442.0, 200.76923076923075], [1446.0, 102.13333333333331], [1450.0, 196.13793103448276], [1454.0, 298.79999999999995], [1426.0, 260.30434782608694], [1478.0, 200.8823529411765], [1502.0, 178.0909090909091], [1498.0, 213.0], [1494.0, 208.375], [1474.0, 220.83333333333334], [1482.0, 265.07692307692315], [1486.0, 190.4883720930232], [1534.0, 158.4], [1530.0, 145.30434782608694], [1526.0, 179.03333333333333], [1522.0, 227.45454545454547], [1506.0, 194.45454545454547], [1510.0, 194.90909090909093], [1514.0, 224.5], [1518.0, 154.59090909090907], [1490.0, 225.91666666666666], [1542.0, 223.76923076923077], [1566.0, 186.85], [1562.0, 143.78787878787878], [1558.0, 192.89999999999998], [1538.0, 348.0], [1546.0, 197.3076923076923], [1550.0, 205.60000000000005], [1598.0, 192.76470588235293], [1594.0, 152.3684210526316], [1590.0, 201.14285714285717], [1586.0, 231.55555555555554], [1570.0, 237.72727272727272], [1574.0, 161.43243243243242], [1578.0, 157.95], [1582.0, 279.5], [1554.0, 155.1666666666666], [1610.0, 131.00000000000003], [1602.0, 227.7272727272727], [1622.0, 154.50000000000006], [1630.0, 187.625], [1626.0, 198.04999999999998], [1614.0, 211.76000000000002], [1650.0, 164.35294117647055], [1654.0, 137.7872340425532], [1658.0, 95.52083333333333], [1662.0, 175.05555555555557], [1634.0, 188.95000000000005], [1638.0, 164.3913043478261], [1642.0, 242.73333333333332], [1646.0, 205.88888888888889], [1618.0, 194.17857142857142], [1670.0, 207.53846153846155], [1694.0, 138.00000000000003], [1690.0, 159.42105263157896], [1686.0, 166.38461538461536], [1666.0, 250.84615384615384], [1674.0, 220.84615384615387], [1678.0, 216.47058823529412], [1726.0, 158.0714285714286], [1722.0, 183.95000000000005], [1718.0, 159.65517241379314], [1714.0, 201.00000000000003], [1698.0, 185.55555555555557], [1702.0, 87.75862068965516], [1706.0, 108.99999999999999], [1710.0, 159.0], [1682.0, 143.70588235294122], [1734.0, 173.33333333333334], [1758.0, 88.4705882352941], [1754.0, 150.0], [1750.0, 137.97560975609758], [1730.0, 207.83333333333331], [1738.0, 196.9], [1742.0, 118.6388888888889], [1790.0, 179.3103448275862], [1786.0, 122.29166666666666], [1782.0, 191.26666666666668], [1778.0, 119.02499999999999], [1762.0, 146.00000000000003], [1766.0, 205.47368421052636], [1770.0, 161.53124999999997], [1774.0, 177.16], [1746.0, 83.875], [1798.0, 243.64705882352942], [1794.0, 53.125], [1822.0, 220.50000000000009], [1818.0, 244.44444444444446], [1814.0, 265.3448275862069], [1802.0, 265.77941176470586], [1806.0, 247.0], [1842.0, 236.4], [1846.0, 236.953488372093], [1850.0, 258.46875], [1854.0, 236.35714285714292], [1826.0, 266.6818181818182], [1830.0, 239.20000000000007], [1834.0, 40.333333333333336], [1838.0, 168.59090909090912], [1810.0, 261.0975609756098], [1862.0, 188.66666666666663], [1886.0, 152.89285714285714], [1882.0, 217.06666666666666], [1878.0, 240.4705882352941], [1858.0, 198.225], [1866.0, 244.76923076923077], [1870.0, 216.44444444444449], [1918.0, 224.29999999999998], [1914.0, 172.5], [1910.0, 220.11111111111111], [1906.0, 215.78947368421052], [1890.0, 200.78787878787875], [1894.0, 198.82142857142853], [1898.0, 171.73684210526318], [1902.0, 210.61764705882356], [1874.0, 225.85714285714286], [1926.0, 236.1923076923077], [1950.0, 195.50000000000003], [1946.0, 180.72727272727272], [1942.0, 215.1904761904762], [1922.0, 180.3181818181818], [1930.0, 201.29032258064512], [1934.0, 146.85185185185182], [1982.0, 152.03174603174602], [1978.0, 233.0], [1974.0, 153.2142857142857], [1970.0, 152.68000000000006], [1954.0, 222.5], [1958.0, 202.6491228070175], [1962.0, 224.15], [1966.0, 167.94871794871796], [1938.0, 123.85], [1990.0, 98.33170731707318], [1986.0, 115.69696969696972], [1994.0, 100.41563786008231], [1998.0, 115.22633744855958], [1031.0, 249.16666666666666], [1035.0, 151.2142857142857], [1027.0, 154.38888888888889], [1055.0, 135.18181818181822], [1051.0, 169.0], [1047.0, 100.99999999999999], [1043.0, 217.85714285714286], [1039.0, 128.66666666666666], [1087.0, 173.8421052631579], [1083.0, 229.37499999999997], [1079.0, 168.77777777777777], [1075.0, 233.50000000000003], [1059.0, 118.13043478260873], [1063.0, 147.7], [1067.0, 128.99999999999997], [1071.0, 120.92857142857142], [1095.0, 103.95454545454547], [1099.0, 204.16666666666666], [1091.0, 135.21428571428572], [1119.0, 177.0571428571429], [1115.0, 119.99999999999999], [1111.0, 154.07142857142856], [1107.0, 181.86363636363635], [1103.0, 161.83333333333331], [1151.0, 187.16666666666669], [1147.0, 190.08333333333331], [1143.0, 235.0952380952381], [1139.0, 134.44736842105266], [1123.0, 213.71428571428572], [1127.0, 188.125], [1131.0, 149.43478260869566], [1135.0, 114.44444444444443], [1159.0, 172.14285714285714], [1155.0, 116.24444444444441], [1183.0, 212.61904761904768], [1179.0, 219.2857142857143], [1175.0, 64.0], [1171.0, 109.47058823529414], [1163.0, 218.73333333333335], [1167.0, 118.41860465116278], [1203.0, 145.12], [1207.0, 235.71428571428572], [1211.0, 218.6923076923077], [1215.0, 120.50000000000001], [1187.0, 182.75], [1191.0, 77.72727272727272], [1195.0, 182.96969696969697], [1199.0, 190.36363636363635], [1223.0, 209.625], [1219.0, 169.16666666666669], [1247.0, 161.67999999999998], [1243.0, 201.00000000000003], [1239.0, 91.64000000000003], [1235.0, 138.14814814814818], [1227.0, 113.40816326530614], [1231.0, 241.0], [1267.0, 134.6153846153846], [1271.0, 127.07142857142857], [1275.0, 236.92857142857144], [1279.0, 189.42857142857144], [1251.0, 210.83333333333334], [1255.0, 129.08333333333331], [1259.0, 140.56756756756755], [1263.0, 224.1764705882353], [1283.0, 145.95652173913044], [1287.0, 138.85714285714286], [1311.0, 210.0], [1307.0, 170.83333333333334], [1303.0, 67.0], [1299.0, 69.0], [1291.0, 142.4375], [1295.0, 73.5], [1343.0, 197.2857142857143], [1339.0, 72.14285714285715], [1335.0, 152.6153846153846], [1331.0, 198.10000000000002], [1315.0, 121.15151515151518], [1319.0, 176.0], [1323.0, 223.62500000000003], [1327.0, 195.75000000000003], [1347.0, 285.5], [1371.0, 175.94444444444446], [1367.0, 156.19444444444446], [1363.0, 106.93333333333332], [1375.0, 74.72222222222223], [1351.0, 70.66666666666667], [1355.0, 279.6923076923077], [1359.0, 227.1538461538461], [1395.0, 272.74999999999994], [1399.0, 249.625], [1403.0, 269.78947368421046], [1407.0, 233.91666666666669], [1379.0, 165.5263157894737], [1383.0, 161.75000000000006], [1387.0, 148.6969696969697], [1391.0, 121.16666666666666], [1415.0, 123.71739130434784], [1439.0, 128.75], [1435.0, 228.00000000000003], [1431.0, 139.1111111111111], [1411.0, 260.22222222222223], [1419.0, 312.6], [1423.0, 313.3636363636364], [1471.0, 272.5714285714286], [1467.0, 294.1818181818183], [1463.0, 122.75], [1459.0, 155.89999999999998], [1443.0, 187.22222222222223], [1447.0, 149.0], [1451.0, 264.0], [1455.0, 211.9473684210527], [1427.0, 222.9047619047619], [1479.0, 277.7368421052631], [1503.0, 222.2222222222222], [1499.0, 147.74193548387092], [1495.0, 174.58333333333334], [1475.0, 263.66666666666663], [1483.0, 188.18749999999994], [1487.0, 200.49999999999997], [1535.0, 131.92857142857142], [1531.0, 216.2142857142857], [1527.0, 162.14285714285717], [1523.0, 166.7], [1507.0, 176.48000000000002], [1511.0, 124.5625], [1515.0, 181.85714285714283], [1519.0, 153.0], [1491.0, 248.0], [1543.0, 230.8], [1567.0, 162.61111111111111], [1563.0, 234.0], [1559.0, 175.66666666666666], [1539.0, 218.95000000000002], [1547.0, 160.78571428571428], [1551.0, 164.3125], [1599.0, 235.0], [1595.0, 231.5], [1591.0, 217.52631578947367], [1587.0, 221.0], [1571.0, 265.5384615384615], [1575.0, 237.33333333333331], [1579.0, 161.91304347826087], [1583.0, 161.41176470588232], [1555.0, 128.89189189189187], [1611.0, 157.60000000000002], [1623.0, 178.7142857142857], [1603.0, 83.66666666666666], [1607.0, 83.0], [1631.0, 204.2258064516129], [1627.0, 240.56249999999997], [1615.0, 200.1428571428571], [1651.0, 166.31578947368422], [1655.0, 152.37499999999997], [1659.0, 190.425], [1663.0, 209.17391304347822], [1635.0, 234.54545454545453], [1639.0, 226.78947368421055], [1643.0, 210.14285714285714], [1647.0, 173.87500000000003], [1619.0, 181.54838709677423], [1671.0, 225.0], [1695.0, 192.0526315789474], [1691.0, 118.859375], [1687.0, 209.31578947368416], [1667.0, 126.16666666666666], [1675.0, 135.40425531914892], [1679.0, 207.5833333333334], [1727.0, 209.66666666666666], [1723.0, 137.23529411764707], [1719.0, 114.25000000000001], [1715.0, 177.07142857142856], [1699.0, 198.68965517241378], [1703.0, 227.66666666666666], [1707.0, 111.19999999999999], [1711.0, 184.91304347826085], [1683.0, 224.60000000000002], [1735.0, 118.95652173913044], [1759.0, 77.77777777777777], [1755.0, 228.5], [1751.0, 180.75], [1731.0, 131.31428571428572], [1739.0, 148.35714285714283], [1743.0, 176.05263157894734], [1791.0, 202.29166666666666], [1787.0, 227.51428571428576], [1783.0, 184.00000000000003], [1779.0, 125.0], [1763.0, 220.25], [1767.0, 156.72], [1771.0, 145.59090909090907], [1775.0, 161.61111111111114], [1747.0, 94.88888888888889], [1799.0, 257.1], [1823.0, 233.61764705882356], [1819.0, 223.55999999999997], [1815.0, 228.68627450980392], [1795.0, 175.296875], [1803.0, 182.72727272727272], [1807.0, 194.09523809523807], [1855.0, 249.2173913043478], [1851.0, 251.42222222222225], [1847.0, 231.0588235294117], [1843.0, 255.70000000000005], [1827.0, 270.025], [1831.0, 157.6923076923077], [1835.0, 41.0], [1839.0, 199.9375], [1811.0, 264.95652173913044], [1863.0, 245.44186046511632], [1887.0, 67.77419354838709], [1883.0, 238.4], [1879.0, 211.54385964912282], [1859.0, 204.71428571428567], [1867.0, 175.20000000000002], [1871.0, 216.11999999999998], [1919.0, 192.6333333333333], [1915.0, 143.22916666666666], [1911.0, 170.06521739130432], [1907.0, 179.12499999999997], [1891.0, 169.536231884058], [1895.0, 220.1714285714286], [1899.0, 160.1142857142857], [1903.0, 192.80769230769232], [1875.0, 209.8787878787879], [1935.0, 234.5], [1927.0, 231.35294117647058], [1951.0, 192.18750000000003], [1923.0, 190.00000000000003], [1947.0, 212.66666666666663], [1931.0, 180.21428571428572], [1955.0, 9.714285714285715], [1983.0, 140.8], [1979.0, 198.9411764705883], [1975.0, 182.77777777777774], [1971.0, 135.3529411764706], [1959.0, 211.20000000000002], [1963.0, 139.25], [1967.0, 208.90000000000003], [1939.0, 203.037037037037], [1943.0, 150.05882352941177], [1987.0, 99.76041666666669], [1995.0, 98.62445414847171], [1999.0, 112.1983606557377], [1991.0, 86.94805194805194], [1.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1981.385989000013, 99.92337599999904]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2133333.3333333335, "minX": 1.5855819E12, "maxY": 3083288.5166666666, "series": [{"data": [[1.5855819E12, 3083288.5166666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5855819E12, 2133333.3333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855819E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 99.92337599999904, "minX": 1.5855819E12, "maxY": 99.92337599999904, "series": [{"data": [[1.5855819E12, 99.92337599999904]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855819E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 99.91890400000072, "minX": 1.5855819E12, "maxY": 99.91890400000072, "series": [{"data": [[1.5855819E12, 99.91890400000072]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855819E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.07207699999999831, "minX": 1.5855819E12, "maxY": 0.07207699999999831, "series": [{"data": [[1.5855819E12, 0.07207699999999831]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855819E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.5855819E12, "maxY": 1403.0, "series": [{"data": [[1.5855819E12, 1403.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5855819E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5855819E12, 117.90000000000146]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5855819E12, 310.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5855819E12, 243.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855819E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 69.0, "minX": 731.0, "maxY": 419.0, "series": [{"data": [[731.0, 419.0], [16657.0, 119.0], [18549.0, 101.0], [22203.0, 87.0], [22239.0, 89.0], [22297.0, 88.0], [22451.0, 88.0], [22353.0, 88.0], [22487.0, 86.0], [23049.0, 89.0], [22715.0, 85.0], [22555.0, 87.0], [22875.0, 87.0], [23275.0, 85.0], [23181.0, 86.0], [24247.0, 84.0], [24073.0, 82.0], [24955.0, 85.0], [3062.0, 276.0], [5324.0, 242.0], [7636.0, 241.0], [8600.0, 232.0], [8396.0, 237.0], [8847.0, 230.0], [9377.0, 206.0], [10457.0, 196.0], [11787.0, 167.0], [12785.0, 156.0], [13455.0, 150.0], [17628.0, 69.0], [22352.0, 89.0], [22044.0, 91.0], [21734.0, 91.0], [22226.0, 90.0], [22398.0, 89.0], [22312.0, 88.0], [22314.0, 89.0], [22416.0, 88.0], [23342.0, 86.0], [22546.0, 90.0], [23356.0, 82.0], [23370.0, 84.0], [23392.0, 83.0], [22592.0, 89.0], [22692.0, 87.0], [22646.0, 86.0], [22754.0, 86.0], [22568.0, 88.0], [23174.0, 84.0], [23290.0, 86.0], [24346.0, 78.0], [23890.0, 85.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24955.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 69.0, "minX": 731.0, "maxY": 414.0, "series": [{"data": [[731.0, 414.0], [16657.0, 119.0], [18549.0, 101.0], [22203.0, 87.0], [22239.0, 89.0], [22297.0, 88.0], [22451.0, 88.0], [22353.0, 88.0], [22487.0, 86.0], [23049.0, 89.0], [22715.0, 85.0], [22555.0, 87.0], [22875.0, 86.5], [23275.0, 85.0], [23181.0, 86.0], [24247.0, 84.0], [24073.0, 82.0], [24955.0, 85.0], [3062.0, 276.0], [5324.0, 241.5], [7636.0, 241.0], [8600.0, 232.0], [8396.0, 237.0], [8847.0, 230.0], [9377.0, 206.0], [10457.0, 196.0], [11787.0, 167.0], [12785.0, 156.0], [13455.0, 150.0], [17628.0, 69.0], [22352.0, 89.0], [22044.0, 91.0], [21734.0, 91.0], [22226.0, 90.0], [22398.0, 89.0], [22312.0, 88.0], [22314.0, 89.0], [22416.0, 88.0], [23342.0, 86.0], [22546.0, 90.0], [23356.0, 82.0], [23370.0, 84.0], [23392.0, 83.0], [22592.0, 89.0], [22692.0, 87.0], [22646.0, 86.0], [22754.0, 86.0], [22568.0, 88.0], [23174.0, 84.0], [23290.0, 86.0], [24346.0, 78.0], [23890.0, 85.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24955.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16666.666666666668, "minX": 1.5855819E12, "maxY": 16666.666666666668, "series": [{"data": [[1.5855819E12, 16666.666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855819E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16666.666666666668, "minX": 1.5855819E12, "maxY": 16666.666666666668, "series": [{"data": [[1.5855819E12, 16666.666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5855819E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16666.666666666668, "minX": 1.5855819E12, "maxY": 16666.666666666668, "series": [{"data": [[1.5855819E12, 16666.666666666668]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855819E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16666.666666666668, "minX": 1.5855819E12, "maxY": 16666.666666666668, "series": [{"data": [[1.5855819E12, 16666.666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5855819E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

