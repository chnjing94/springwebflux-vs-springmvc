/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 101.0, "minX": 0.0, "maxY": 1175.0, "series": [{"data": [[0.0, 101.0], [0.1, 151.0], [0.2, 197.0], [0.3, 208.0], [0.4, 250.0], [0.5, 293.0], [0.6, 303.0], [0.7, 336.0], [0.8, 386.0], [0.9, 399.0], [1.0, 412.0], [1.1, 450.0], [1.2, 491.0], [1.3, 501.0], [1.4, 508.0], [1.5, 540.0], [1.6, 557.0], [1.7, 587.0], [1.8, 601.0], [1.9, 608.0], [2.0, 626.0], [2.1, 651.0], [2.2, 660.0], [2.3, 693.0], [2.4, 700.0], [2.5, 702.0], [2.6, 707.0], [2.7, 730.0], [2.8, 747.0], [2.9, 754.0], [3.0, 761.0], [3.1, 789.0], [3.2, 797.0], [3.3, 801.0], [3.4, 803.0], [3.5, 805.0], [3.6, 808.0], [3.7, 817.0], [3.8, 842.0], [3.9, 845.0], [4.0, 849.0], [4.1, 854.0], [4.2, 857.0], [4.3, 861.0], [4.4, 887.0], [4.5, 897.0], [4.6, 901.0], [4.7, 904.0], [4.8, 915.0], [4.9, 943.0], [5.0, 959.0], [5.1, 983.0], [5.2, 994.0], [5.3, 998.0], [5.4, 1001.0], [5.5, 1001.0], [5.6, 1001.0], [5.7, 1001.0], [5.8, 1001.0], [5.9, 1001.0], [6.0, 1001.0], [6.1, 1001.0], [6.2, 1001.0], [6.3, 1001.0], [6.4, 1001.0], [6.5, 1001.0], [6.6, 1001.0], [6.7, 1001.0], [6.8, 1001.0], [6.9, 1001.0], [7.0, 1001.0], [7.1, 1001.0], [7.2, 1002.0], [7.3, 1002.0], [7.4, 1002.0], [7.5, 1002.0], [7.6, 1002.0], [7.7, 1002.0], [7.8, 1002.0], [7.9, 1002.0], [8.0, 1002.0], [8.1, 1002.0], [8.2, 1002.0], [8.3, 1002.0], [8.4, 1002.0], [8.5, 1002.0], [8.6, 1002.0], [8.7, 1002.0], [8.8, 1002.0], [8.9, 1002.0], [9.0, 1002.0], [9.1, 1002.0], [9.2, 1002.0], [9.3, 1002.0], [9.4, 1002.0], [9.5, 1002.0], [9.6, 1002.0], [9.7, 1002.0], [9.8, 1002.0], [9.9, 1002.0], [10.0, 1002.0], [10.1, 1002.0], [10.2, 1002.0], [10.3, 1002.0], [10.4, 1002.0], [10.5, 1002.0], [10.6, 1002.0], [10.7, 1002.0], [10.8, 1002.0], [10.9, 1002.0], [11.0, 1002.0], [11.1, 1002.0], [11.2, 1002.0], [11.3, 1002.0], [11.4, 1002.0], [11.5, 1002.0], [11.6, 1002.0], [11.7, 1002.0], [11.8, 1002.0], [11.9, 1002.0], [12.0, 1002.0], [12.1, 1002.0], [12.2, 1002.0], [12.3, 1002.0], [12.4, 1002.0], [12.5, 1002.0], [12.6, 1002.0], [12.7, 1002.0], [12.8, 1002.0], [12.9, 1002.0], [13.0, 1002.0], [13.1, 1002.0], [13.2, 1002.0], [13.3, 1002.0], [13.4, 1002.0], [13.5, 1002.0], [13.6, 1002.0], [13.7, 1002.0], [13.8, 1002.0], [13.9, 1002.0], [14.0, 1002.0], [14.1, 1002.0], [14.2, 1002.0], [14.3, 1002.0], [14.4, 1002.0], [14.5, 1002.0], [14.6, 1002.0], [14.7, 1002.0], [14.8, 1002.0], [14.9, 1002.0], [15.0, 1002.0], [15.1, 1002.0], [15.2, 1002.0], [15.3, 1002.0], [15.4, 1002.0], [15.5, 1002.0], [15.6, 1002.0], [15.7, 1002.0], [15.8, 1002.0], [15.9, 1002.0], [16.0, 1002.0], [16.1, 1002.0], [16.2, 1002.0], [16.3, 1002.0], [16.4, 1002.0], [16.5, 1002.0], [16.6, 1002.0], [16.7, 1002.0], [16.8, 1002.0], [16.9, 1002.0], [17.0, 1002.0], [17.1, 1002.0], [17.2, 1002.0], [17.3, 1002.0], [17.4, 1002.0], [17.5, 1002.0], [17.6, 1002.0], [17.7, 1002.0], [17.8, 1002.0], [17.9, 1002.0], [18.0, 1002.0], [18.1, 1002.0], [18.2, 1002.0], [18.3, 1002.0], [18.4, 1002.0], [18.5, 1002.0], [18.6, 1002.0], [18.7, 1002.0], [18.8, 1002.0], [18.9, 1002.0], [19.0, 1002.0], [19.1, 1002.0], [19.2, 1002.0], [19.3, 1002.0], [19.4, 1002.0], [19.5, 1002.0], [19.6, 1002.0], [19.7, 1002.0], [19.8, 1002.0], [19.9, 1002.0], [20.0, 1002.0], [20.1, 1002.0], [20.2, 1002.0], [20.3, 1002.0], [20.4, 1002.0], [20.5, 1002.0], [20.6, 1002.0], [20.7, 1002.0], [20.8, 1002.0], [20.9, 1002.0], [21.0, 1002.0], [21.1, 1002.0], [21.2, 1002.0], [21.3, 1002.0], [21.4, 1002.0], [21.5, 1002.0], [21.6, 1002.0], [21.7, 1002.0], [21.8, 1002.0], [21.9, 1002.0], [22.0, 1002.0], [22.1, 1002.0], [22.2, 1002.0], [22.3, 1002.0], [22.4, 1002.0], [22.5, 1002.0], [22.6, 1002.0], [22.7, 1002.0], [22.8, 1002.0], [22.9, 1002.0], [23.0, 1002.0], [23.1, 1002.0], [23.2, 1002.0], [23.3, 1002.0], [23.4, 1002.0], [23.5, 1002.0], [23.6, 1002.0], [23.7, 1002.0], [23.8, 1002.0], [23.9, 1002.0], [24.0, 1002.0], [24.1, 1002.0], [24.2, 1002.0], [24.3, 1002.0], [24.4, 1002.0], [24.5, 1002.0], [24.6, 1002.0], [24.7, 1002.0], [24.8, 1002.0], [24.9, 1002.0], [25.0, 1002.0], [25.1, 1002.0], [25.2, 1002.0], [25.3, 1002.0], [25.4, 1002.0], [25.5, 1002.0], [25.6, 1002.0], [25.7, 1002.0], [25.8, 1002.0], [25.9, 1002.0], [26.0, 1002.0], [26.1, 1002.0], [26.2, 1002.0], [26.3, 1002.0], [26.4, 1002.0], [26.5, 1002.0], [26.6, 1002.0], [26.7, 1002.0], [26.8, 1002.0], [26.9, 1002.0], [27.0, 1002.0], [27.1, 1002.0], [27.2, 1002.0], [27.3, 1002.0], [27.4, 1002.0], [27.5, 1002.0], [27.6, 1002.0], [27.7, 1002.0], [27.8, 1002.0], [27.9, 1002.0], [28.0, 1002.0], [28.1, 1002.0], [28.2, 1002.0], [28.3, 1002.0], [28.4, 1002.0], [28.5, 1002.0], [28.6, 1002.0], [28.7, 1002.0], [28.8, 1002.0], [28.9, 1002.0], [29.0, 1002.0], [29.1, 1002.0], [29.2, 1002.0], [29.3, 1002.0], [29.4, 1002.0], [29.5, 1002.0], [29.6, 1002.0], [29.7, 1002.0], [29.8, 1002.0], [29.9, 1002.0], [30.0, 1002.0], [30.1, 1002.0], [30.2, 1002.0], [30.3, 1002.0], [30.4, 1002.0], [30.5, 1002.0], [30.6, 1002.0], [30.7, 1002.0], [30.8, 1002.0], [30.9, 1002.0], [31.0, 1002.0], [31.1, 1002.0], [31.2, 1002.0], [31.3, 1002.0], [31.4, 1002.0], [31.5, 1002.0], [31.6, 1002.0], [31.7, 1002.0], [31.8, 1002.0], [31.9, 1002.0], [32.0, 1002.0], [32.1, 1002.0], [32.2, 1002.0], [32.3, 1002.0], [32.4, 1002.0], [32.5, 1002.0], [32.6, 1002.0], [32.7, 1002.0], [32.8, 1002.0], [32.9, 1002.0], [33.0, 1002.0], [33.1, 1002.0], [33.2, 1002.0], [33.3, 1002.0], [33.4, 1002.0], [33.5, 1002.0], [33.6, 1002.0], [33.7, 1002.0], [33.8, 1002.0], [33.9, 1002.0], [34.0, 1002.0], [34.1, 1002.0], [34.2, 1002.0], [34.3, 1002.0], [34.4, 1002.0], [34.5, 1002.0], [34.6, 1002.0], [34.7, 1002.0], [34.8, 1002.0], [34.9, 1002.0], [35.0, 1002.0], [35.1, 1002.0], [35.2, 1002.0], [35.3, 1002.0], [35.4, 1002.0], [35.5, 1002.0], [35.6, 1002.0], [35.7, 1002.0], [35.8, 1002.0], [35.9, 1002.0], [36.0, 1002.0], [36.1, 1002.0], [36.2, 1002.0], [36.3, 1002.0], [36.4, 1002.0], [36.5, 1002.0], [36.6, 1002.0], [36.7, 1002.0], [36.8, 1002.0], [36.9, 1002.0], [37.0, 1002.0], [37.1, 1002.0], [37.2, 1002.0], [37.3, 1002.0], [37.4, 1002.0], [37.5, 1002.0], [37.6, 1002.0], [37.7, 1002.0], [37.8, 1002.0], [37.9, 1002.0], [38.0, 1002.0], [38.1, 1002.0], [38.2, 1002.0], [38.3, 1002.0], [38.4, 1002.0], [38.5, 1002.0], [38.6, 1002.0], [38.7, 1002.0], [38.8, 1002.0], [38.9, 1002.0], [39.0, 1002.0], [39.1, 1002.0], [39.2, 1002.0], [39.3, 1002.0], [39.4, 1002.0], [39.5, 1002.0], [39.6, 1002.0], [39.7, 1002.0], [39.8, 1002.0], [39.9, 1002.0], [40.0, 1002.0], [40.1, 1002.0], [40.2, 1002.0], [40.3, 1002.0], [40.4, 1002.0], [40.5, 1002.0], [40.6, 1002.0], [40.7, 1002.0], [40.8, 1002.0], [40.9, 1002.0], [41.0, 1002.0], [41.1, 1002.0], [41.2, 1002.0], [41.3, 1002.0], [41.4, 1002.0], [41.5, 1002.0], [41.6, 1002.0], [41.7, 1002.0], [41.8, 1002.0], [41.9, 1002.0], [42.0, 1003.0], [42.1, 1003.0], [42.2, 1003.0], [42.3, 1003.0], [42.4, 1003.0], [42.5, 1003.0], [42.6, 1003.0], [42.7, 1003.0], [42.8, 1003.0], [42.9, 1003.0], [43.0, 1003.0], [43.1, 1003.0], [43.2, 1003.0], [43.3, 1003.0], [43.4, 1003.0], [43.5, 1003.0], [43.6, 1003.0], [43.7, 1003.0], [43.8, 1003.0], [43.9, 1003.0], [44.0, 1003.0], [44.1, 1003.0], [44.2, 1003.0], [44.3, 1003.0], [44.4, 1003.0], [44.5, 1003.0], [44.6, 1003.0], [44.7, 1003.0], [44.8, 1003.0], [44.9, 1003.0], [45.0, 1003.0], [45.1, 1003.0], [45.2, 1003.0], [45.3, 1003.0], [45.4, 1003.0], [45.5, 1003.0], [45.6, 1003.0], [45.7, 1003.0], [45.8, 1003.0], [45.9, 1003.0], [46.0, 1003.0], [46.1, 1003.0], [46.2, 1003.0], [46.3, 1003.0], [46.4, 1003.0], [46.5, 1003.0], [46.6, 1003.0], [46.7, 1003.0], [46.8, 1003.0], [46.9, 1003.0], [47.0, 1003.0], [47.1, 1003.0], [47.2, 1003.0], [47.3, 1003.0], [47.4, 1003.0], [47.5, 1003.0], [47.6, 1003.0], [47.7, 1003.0], [47.8, 1003.0], [47.9, 1003.0], [48.0, 1003.0], [48.1, 1003.0], [48.2, 1003.0], [48.3, 1003.0], [48.4, 1003.0], [48.5, 1003.0], [48.6, 1003.0], [48.7, 1003.0], [48.8, 1003.0], [48.9, 1003.0], [49.0, 1003.0], [49.1, 1003.0], [49.2, 1003.0], [49.3, 1003.0], [49.4, 1003.0], [49.5, 1003.0], [49.6, 1003.0], [49.7, 1003.0], [49.8, 1003.0], [49.9, 1003.0], [50.0, 1003.0], [50.1, 1003.0], [50.2, 1003.0], [50.3, 1003.0], [50.4, 1003.0], [50.5, 1003.0], [50.6, 1003.0], [50.7, 1003.0], [50.8, 1003.0], [50.9, 1003.0], [51.0, 1003.0], [51.1, 1003.0], [51.2, 1003.0], [51.3, 1003.0], [51.4, 1003.0], [51.5, 1003.0], [51.6, 1003.0], [51.7, 1003.0], [51.8, 1003.0], [51.9, 1003.0], [52.0, 1003.0], [52.1, 1003.0], [52.2, 1003.0], [52.3, 1003.0], [52.4, 1003.0], [52.5, 1003.0], [52.6, 1003.0], [52.7, 1003.0], [52.8, 1003.0], [52.9, 1003.0], [53.0, 1003.0], [53.1, 1003.0], [53.2, 1003.0], [53.3, 1003.0], [53.4, 1003.0], [53.5, 1003.0], [53.6, 1003.0], [53.7, 1003.0], [53.8, 1003.0], [53.9, 1003.0], [54.0, 1003.0], [54.1, 1003.0], [54.2, 1003.0], [54.3, 1003.0], [54.4, 1003.0], [54.5, 1003.0], [54.6, 1003.0], [54.7, 1003.0], [54.8, 1003.0], [54.9, 1003.0], [55.0, 1003.0], [55.1, 1003.0], [55.2, 1003.0], [55.3, 1003.0], [55.4, 1003.0], [55.5, 1003.0], [55.6, 1003.0], [55.7, 1003.0], [55.8, 1003.0], [55.9, 1003.0], [56.0, 1003.0], [56.1, 1003.0], [56.2, 1003.0], [56.3, 1003.0], [56.4, 1003.0], [56.5, 1003.0], [56.6, 1003.0], [56.7, 1003.0], [56.8, 1003.0], [56.9, 1003.0], [57.0, 1003.0], [57.1, 1003.0], [57.2, 1003.0], [57.3, 1003.0], [57.4, 1003.0], [57.5, 1003.0], [57.6, 1003.0], [57.7, 1003.0], [57.8, 1003.0], [57.9, 1003.0], [58.0, 1003.0], [58.1, 1003.0], [58.2, 1003.0], [58.3, 1003.0], [58.4, 1003.0], [58.5, 1003.0], [58.6, 1003.0], [58.7, 1003.0], [58.8, 1003.0], [58.9, 1003.0], [59.0, 1003.0], [59.1, 1003.0], [59.2, 1003.0], [59.3, 1003.0], [59.4, 1003.0], [59.5, 1003.0], [59.6, 1003.0], [59.7, 1003.0], [59.8, 1003.0], [59.9, 1003.0], [60.0, 1003.0], [60.1, 1003.0], [60.2, 1003.0], [60.3, 1003.0], [60.4, 1003.0], [60.5, 1003.0], [60.6, 1003.0], [60.7, 1003.0], [60.8, 1003.0], [60.9, 1003.0], [61.0, 1003.0], [61.1, 1003.0], [61.2, 1003.0], [61.3, 1003.0], [61.4, 1003.0], [61.5, 1003.0], [61.6, 1003.0], [61.7, 1003.0], [61.8, 1003.0], [61.9, 1003.0], [62.0, 1003.0], [62.1, 1003.0], [62.2, 1003.0], [62.3, 1003.0], [62.4, 1003.0], [62.5, 1003.0], [62.6, 1003.0], [62.7, 1003.0], [62.8, 1003.0], [62.9, 1003.0], [63.0, 1003.0], [63.1, 1003.0], [63.2, 1003.0], [63.3, 1003.0], [63.4, 1003.0], [63.5, 1003.0], [63.6, 1003.0], [63.7, 1003.0], [63.8, 1003.0], [63.9, 1003.0], [64.0, 1003.0], [64.1, 1003.0], [64.2, 1003.0], [64.3, 1003.0], [64.4, 1003.0], [64.5, 1003.0], [64.6, 1003.0], [64.7, 1003.0], [64.8, 1003.0], [64.9, 1003.0], [65.0, 1003.0], [65.1, 1003.0], [65.2, 1003.0], [65.3, 1003.0], [65.4, 1003.0], [65.5, 1003.0], [65.6, 1003.0], [65.7, 1003.0], [65.8, 1003.0], [65.9, 1003.0], [66.0, 1003.0], [66.1, 1003.0], [66.2, 1003.0], [66.3, 1003.0], [66.4, 1003.0], [66.5, 1003.0], [66.6, 1003.0], [66.7, 1003.0], [66.8, 1003.0], [66.9, 1003.0], [67.0, 1003.0], [67.1, 1003.0], [67.2, 1003.0], [67.3, 1003.0], [67.4, 1003.0], [67.5, 1003.0], [67.6, 1003.0], [67.7, 1003.0], [67.8, 1003.0], [67.9, 1003.0], [68.0, 1003.0], [68.1, 1003.0], [68.2, 1003.0], [68.3, 1003.0], [68.4, 1003.0], [68.5, 1003.0], [68.6, 1003.0], [68.7, 1003.0], [68.8, 1003.0], [68.9, 1003.0], [69.0, 1003.0], [69.1, 1003.0], [69.2, 1003.0], [69.3, 1003.0], [69.4, 1003.0], [69.5, 1003.0], [69.6, 1003.0], [69.7, 1003.0], [69.8, 1003.0], [69.9, 1003.0], [70.0, 1003.0], [70.1, 1003.0], [70.2, 1003.0], [70.3, 1003.0], [70.4, 1003.0], [70.5, 1003.0], [70.6, 1003.0], [70.7, 1003.0], [70.8, 1003.0], [70.9, 1003.0], [71.0, 1003.0], [71.1, 1003.0], [71.2, 1003.0], [71.3, 1003.0], [71.4, 1003.0], [71.5, 1003.0], [71.6, 1003.0], [71.7, 1003.0], [71.8, 1003.0], [71.9, 1003.0], [72.0, 1003.0], [72.1, 1003.0], [72.2, 1003.0], [72.3, 1003.0], [72.4, 1003.0], [72.5, 1003.0], [72.6, 1003.0], [72.7, 1003.0], [72.8, 1003.0], [72.9, 1003.0], [73.0, 1003.0], [73.1, 1003.0], [73.2, 1003.0], [73.3, 1003.0], [73.4, 1003.0], [73.5, 1003.0], [73.6, 1003.0], [73.7, 1003.0], [73.8, 1003.0], [73.9, 1003.0], [74.0, 1003.0], [74.1, 1003.0], [74.2, 1003.0], [74.3, 1003.0], [74.4, 1003.0], [74.5, 1003.0], [74.6, 1003.0], [74.7, 1003.0], [74.8, 1003.0], [74.9, 1003.0], [75.0, 1003.0], [75.1, 1003.0], [75.2, 1003.0], [75.3, 1003.0], [75.4, 1003.0], [75.5, 1003.0], [75.6, 1003.0], [75.7, 1003.0], [75.8, 1003.0], [75.9, 1003.0], [76.0, 1003.0], [76.1, 1003.0], [76.2, 1003.0], [76.3, 1003.0], [76.4, 1003.0], [76.5, 1003.0], [76.6, 1003.0], [76.7, 1003.0], [76.8, 1003.0], [76.9, 1003.0], [77.0, 1003.0], [77.1, 1003.0], [77.2, 1003.0], [77.3, 1003.0], [77.4, 1003.0], [77.5, 1003.0], [77.6, 1003.0], [77.7, 1003.0], [77.8, 1003.0], [77.9, 1003.0], [78.0, 1003.0], [78.1, 1003.0], [78.2, 1003.0], [78.3, 1003.0], [78.4, 1003.0], [78.5, 1003.0], [78.6, 1003.0], [78.7, 1003.0], [78.8, 1003.0], [78.9, 1003.0], [79.0, 1003.0], [79.1, 1003.0], [79.2, 1003.0], [79.3, 1003.0], [79.4, 1003.0], [79.5, 1003.0], [79.6, 1003.0], [79.7, 1003.0], [79.8, 1003.0], [79.9, 1003.0], [80.0, 1003.0], [80.1, 1003.0], [80.2, 1003.0], [80.3, 1003.0], [80.4, 1003.0], [80.5, 1003.0], [80.6, 1003.0], [80.7, 1003.0], [80.8, 1003.0], [80.9, 1003.0], [81.0, 1003.0], [81.1, 1003.0], [81.2, 1003.0], [81.3, 1003.0], [81.4, 1003.0], [81.5, 1003.0], [81.6, 1003.0], [81.7, 1003.0], [81.8, 1003.0], [81.9, 1003.0], [82.0, 1003.0], [82.1, 1003.0], [82.2, 1003.0], [82.3, 1003.0], [82.4, 1003.0], [82.5, 1003.0], [82.6, 1003.0], [82.7, 1003.0], [82.8, 1003.0], [82.9, 1003.0], [83.0, 1003.0], [83.1, 1003.0], [83.2, 1003.0], [83.3, 1003.0], [83.4, 1003.0], [83.5, 1003.0], [83.6, 1003.0], [83.7, 1003.0], [83.8, 1003.0], [83.9, 1003.0], [84.0, 1003.0], [84.1, 1003.0], [84.2, 1003.0], [84.3, 1003.0], [84.4, 1003.0], [84.5, 1003.0], [84.6, 1003.0], [84.7, 1004.0], [84.8, 1004.0], [84.9, 1004.0], [85.0, 1004.0], [85.1, 1004.0], [85.2, 1004.0], [85.3, 1004.0], [85.4, 1004.0], [85.5, 1004.0], [85.6, 1004.0], [85.7, 1004.0], [85.8, 1004.0], [85.9, 1004.0], [86.0, 1004.0], [86.1, 1004.0], [86.2, 1004.0], [86.3, 1004.0], [86.4, 1004.0], [86.5, 1004.0], [86.6, 1004.0], [86.7, 1004.0], [86.8, 1004.0], [86.9, 1004.0], [87.0, 1004.0], [87.1, 1004.0], [87.2, 1004.0], [87.3, 1004.0], [87.4, 1004.0], [87.5, 1004.0], [87.6, 1004.0], [87.7, 1004.0], [87.8, 1004.0], [87.9, 1004.0], [88.0, 1004.0], [88.1, 1004.0], [88.2, 1004.0], [88.3, 1004.0], [88.4, 1004.0], [88.5, 1004.0], [88.6, 1004.0], [88.7, 1004.0], [88.8, 1004.0], [88.9, 1004.0], [89.0, 1004.0], [89.1, 1004.0], [89.2, 1004.0], [89.3, 1004.0], [89.4, 1004.0], [89.5, 1004.0], [89.6, 1004.0], [89.7, 1004.0], [89.8, 1004.0], [89.9, 1004.0], [90.0, 1004.0], [90.1, 1004.0], [90.2, 1004.0], [90.3, 1004.0], [90.4, 1004.0], [90.5, 1004.0], [90.6, 1004.0], [90.7, 1004.0], [90.8, 1004.0], [90.9, 1004.0], [91.0, 1004.0], [91.1, 1004.0], [91.2, 1004.0], [91.3, 1004.0], [91.4, 1004.0], [91.5, 1004.0], [91.6, 1004.0], [91.7, 1004.0], [91.8, 1004.0], [91.9, 1004.0], [92.0, 1004.0], [92.1, 1004.0], [92.2, 1004.0], [92.3, 1004.0], [92.4, 1004.0], [92.5, 1004.0], [92.6, 1004.0], [92.7, 1004.0], [92.8, 1004.0], [92.9, 1004.0], [93.0, 1004.0], [93.1, 1004.0], [93.2, 1004.0], [93.3, 1004.0], [93.4, 1004.0], [93.5, 1004.0], [93.6, 1004.0], [93.7, 1004.0], [93.8, 1004.0], [93.9, 1004.0], [94.0, 1004.0], [94.1, 1004.0], [94.2, 1004.0], [94.3, 1004.0], [94.4, 1004.0], [94.5, 1004.0], [94.6, 1005.0], [94.7, 1005.0], [94.8, 1005.0], [94.9, 1005.0], [95.0, 1005.0], [95.1, 1005.0], [95.2, 1005.0], [95.3, 1005.0], [95.4, 1005.0], [95.5, 1005.0], [95.6, 1005.0], [95.7, 1005.0], [95.8, 1005.0], [95.9, 1005.0], [96.0, 1006.0], [96.1, 1006.0], [96.2, 1006.0], [96.3, 1007.0], [96.4, 1007.0], [96.5, 1007.0], [96.6, 1008.0], [96.7, 1008.0], [96.8, 1008.0], [96.9, 1008.0], [97.0, 1008.0], [97.1, 1008.0], [97.2, 1008.0], [97.3, 1008.0], [97.4, 1008.0], [97.5, 1008.0], [97.6, 1009.0], [97.7, 1009.0], [97.8, 1009.0], [97.9, 1009.0], [98.0, 1009.0], [98.1, 1009.0], [98.2, 1009.0], [98.3, 1009.0], [98.4, 1009.0], [98.5, 1009.0], [98.6, 1009.0], [98.7, 1009.0], [98.8, 1009.0], [98.9, 1010.0], [99.0, 1010.0], [99.1, 1010.0], [99.2, 1010.0], [99.3, 1010.0], [99.4, 1010.0], [99.5, 1010.0], [99.6, 1011.0], [99.7, 1012.0], [99.8, 1019.0], [99.9, 1029.0], [100.0, 1175.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 122.0, "minX": 100.0, "maxY": 378515.0, "series": [{"data": [[1100.0, 122.0], [300.0, 1346.0], [600.0, 2526.0], [700.0, 3433.0], [100.0, 895.0], [200.0, 1377.0], [400.0, 1481.0], [800.0, 5157.0], [900.0, 3182.0], [500.0, 1966.0], [1000.0, 378515.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5159.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 394841.0, "series": [{"data": [[0.0, 5159.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 394841.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1868.4698751467445, "minX": 1.58524302E12, "maxY": 2000.0, "series": [{"data": [[1.58524314E12, 2000.0], [1.58524302E12, 1868.4698751467445], [1.5852432E12, 1928.3928125933348], [1.58524308E12, 2000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5852432E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 101.625, "minX": 1.0, "maxY": 1175.0, "series": [{"data": [[4.0, 200.33333333333334], [5.0, 200.0], [6.0, 201.0], [7.0, 201.0], [9.0, 201.0], [13.0, 201.0], [14.0, 202.0], [16.0, 200.0], [21.0, 201.0], [22.0, 216.14285714285714], [24.0, 235.0], [25.0, 239.0], [27.0, 239.5], [28.0, 240.5], [29.0, 241.0], [30.0, 240.0], [33.0, 240.25], [35.0, 213.0], [34.0, 240.0], [37.0, 214.0], [36.0, 212.0], [39.0, 212.0], [38.0, 215.0], [41.0, 211.0], [40.0, 211.0], [43.0, 211.0], [42.0, 211.0], [47.0, 215.0], [46.0, 207.66666666666666], [49.0, 249.0], [48.0, 249.0], [51.0, 250.0], [53.0, 250.0], [55.0, 249.0], [54.0, 249.0], [57.0, 249.0], [59.0, 250.0], [61.0, 250.0], [60.0, 251.0], [63.0, 250.0], [67.0, 249.5], [66.0, 250.0], [65.0, 249.0], [64.0, 250.0], [71.0, 249.0], [70.0, 250.0], [68.0, 250.0], [74.0, 250.0], [72.0, 249.0], [79.0, 247.0], [78.0, 247.0], [77.0, 250.0], [76.0, 249.5], [81.0, 245.0], [80.0, 246.0], [87.0, 245.0], [85.0, 245.0], [84.0, 245.0], [91.0, 246.0], [90.0, 245.0], [93.0, 249.33333333333334], [99.0, 252.0], [97.0, 253.0], [96.0, 254.0], [103.0, 252.66666666666666], [100.0, 252.5], [104.0, 253.0], [109.0, 246.6], [115.0, 214.0], [113.0, 214.0], [112.0, 245.66666666666666], [119.0, 213.0], [117.0, 213.0], [116.0, 212.5], [123.0, 212.0], [120.0, 212.0], [127.0, 212.0], [124.0, 212.0], [134.0, 251.0], [132.0, 251.0], [131.0, 243.0], [130.0, 242.66666666666666], [129.0, 212.0], [128.0, 241.0], [142.0, 251.33333333333334], [139.0, 251.5], [138.0, 251.0], [137.0, 250.66666666666666], [151.0, 251.5], [149.0, 250.0], [146.0, 252.0], [157.0, 251.33333333333334], [154.0, 251.66666666666666], [153.0, 251.0], [152.0, 251.0], [166.0, 255.0], [164.0, 255.0], [163.0, 254.5], [161.0, 253.4], [160.0, 251.0], [175.0, 291.0], [174.0, 292.0], [172.0, 297.0], [171.0, 263.0], [170.0, 257.0], [182.0, 292.5], [180.0, 292.0], [179.0, 293.0], [178.0, 292.0], [190.0, 293.0], [188.0, 292.5], [184.0, 292.5], [197.0, 292.25], [192.0, 293.0], [207.0, 299.0], [205.0, 296.0], [201.0, 292.25], [200.0, 292.3333333333333], [209.0, 298.0], [208.0, 299.0], [223.0, 299.0], [222.0, 299.0], [221.0, 299.0], [220.0, 298.5], [218.0, 299.0], [217.0, 298.0], [231.0, 300.5], [230.0, 300.5], [226.0, 300.0], [239.0, 267.0], [238.0, 271.0], [237.0, 271.0], [236.0, 271.0], [235.0, 272.0], [234.0, 300.0], [232.0, 300.0], [245.0, 198.66666666666666], [244.0, 194.69230769230768], [246.0, 196.0], [247.0, 225.66666666666669], [243.0, 295.0], [242.0, 296.0], [241.0, 267.0], [240.0, 267.0], [249.0, 225.0], [250.0, 206.83333333333334], [251.0, 205.75], [252.0, 226.91666666666666], [253.0, 197.36363636363637], [254.0, 183.22222222222223], [255.0, 231.55555555555554], [248.0, 300.0], [259.0, 217.5], [257.0, 208.79999999999998], [256.0, 211.1111111111111], [262.0, 301.0], [258.0, 227.4], [260.0, 244.5], [261.0, 219.8125], [271.0, 305.0], [270.0, 305.0], [267.0, 305.0], [266.0, 304.75], [272.0, 265.75], [275.0, 169.25000000000003], [276.0, 133.2], [277.0, 199.6], [279.0, 230.04761904761907], [278.0, 235.0], [280.0, 241.4871794871795], [281.0, 202.5], [282.0, 147.25], [283.0, 199.2857142857143], [284.0, 256.6], [285.0, 206.0], [287.0, 309.0], [303.0, 344.0], [299.0, 343.0], [293.0, 343.6666666666667], [290.0, 320.6666666666667], [305.0, 103.11111111111113], [307.0, 273.6666666666667], [310.0, 113.0], [309.0, 336.6666666666667], [311.0, 104.875], [304.0, 344.0], [312.0, 203.28571428571428], [319.0, 310.0], [318.0, 310.0], [316.0, 303.3333333333333], [313.0, 303.0], [327.0, 132.82758620689657], [324.0, 120.17391304347827], [325.0, 102.42857142857143], [326.0, 104.47058823529412], [328.0, 103.51612903225806], [334.0, 143.6], [335.0, 106.0], [329.0, 142.0909090909091], [330.0, 113.73684210526318], [331.0, 102.4], [332.0, 102.07692307692308], [322.0, 309.0], [333.0, 101.625], [350.0, 311.0], [351.0, 311.0], [349.0, 311.0], [345.0, 311.0], [344.0, 311.0], [343.0, 311.0], [341.0, 311.0], [340.0, 311.0], [338.0, 310.0], [354.0, 174.09090909090907], [357.0, 278.4], [358.0, 258.0], [359.0, 167.69230769230768], [353.0, 311.0], [366.0, 350.0], [365.0, 350.0], [363.0, 348.75], [361.0, 339.0], [356.0, 311.0], [380.0, 174.46666666666667], [374.0, 178.49999999999997], [373.0, 179.5], [372.0, 350.25], [375.0, 195.29999999999998], [371.0, 350.0], [369.0, 350.0], [376.0, 189.2222222222222], [377.0, 158.00000000000003], [378.0, 149.39130434782606], [379.0, 133.1875], [381.0, 160.0], [382.0, 113.87499999999999], [383.0, 115.2727272727273], [396.0, 369.6], [399.0, 391.0], [398.0, 390.0], [397.0, 390.0], [394.0, 390.0], [391.0, 355.0], [389.0, 356.0], [387.0, 351.5], [385.0, 351.3333333333333], [384.0, 349.0], [413.0, 390.0], [404.0, 179.4], [407.0, 332.75], [410.0, 165.0], [411.0, 251.125], [412.0, 301.4], [415.0, 390.0], [406.0, 390.0], [403.0, 390.0], [402.0, 390.0], [401.0, 391.0], [429.0, 227.4], [425.0, 214.8378378378378], [424.0, 191.73913043478265], [426.0, 238.0909090909091], [427.0, 229.4074074074074], [428.0, 189.07142857142856], [419.0, 362.0], [418.0, 362.0], [417.0, 362.0], [416.0, 390.0], [430.0, 154.99999999999997], [431.0, 204.54545454545453], [423.0, 357.6666666666667], [421.0, 358.0], [420.0, 358.0], [445.0, 390.0], [432.0, 142.22222222222223], [433.0, 150.47826086956522], [444.0, 379.0], [443.0, 368.2], [442.0, 356.0], [441.0, 358.0], [440.0, 359.0], [437.0, 359.6666666666667], [436.0, 359.0], [462.0, 254.625], [454.0, 184.70000000000005], [450.0, 394.0], [449.0, 392.4], [458.0, 366.99999999999994], [460.0, 172.0], [461.0, 173.57142857142858], [463.0, 388.0], [459.0, 388.0], [456.0, 395.0], [453.0, 395.0], [477.0, 300.46153846153845], [474.0, 210.19230769230768], [473.0, 246.53846153846155], [475.0, 197.33333333333334], [476.0, 228.33333333333337], [467.0, 356.0], [465.0, 388.0], [478.0, 205.7692307692308], [479.0, 243.71428571428572], [471.0, 357.0], [470.0, 358.0], [469.0, 358.0], [468.0, 357.0], [483.0, 196.875], [480.0, 226.6923076923077], [481.0, 286.6111111111111], [482.0, 268.9285714285714], [484.0, 208.33333333333334], [486.0, 393.75], [487.0, 394.0], [495.0, 400.0], [488.0, 394.0], [490.0, 394.2], [489.0, 394.0], [494.0, 400.0], [493.0, 399.5], [492.0, 400.0], [509.0, 395.92307692307696], [505.0, 301.2222222222223], [508.0, 206.0], [497.0, 400.0], [496.0, 400.5], [510.0, 259.25], [511.0, 307.5], [506.0, 401.0], [504.0, 401.0], [503.0, 401.0], [500.0, 400.0], [516.0, 401.8888888888888], [542.0, 403.0], [512.0, 237.5], [518.0, 404.0], [538.0, 436.0], [524.0, 243.27777777777777], [520.0, 403.0], [526.0, 241.95999999999998], [528.0, 218.2564102564103], [530.0, 271.8333333333333], [532.0, 259.1111111111111], [534.0, 259.1111111111111], [558.0, 329.5], [574.0, 272.625], [554.0, 245.4], [552.0, 402.0], [556.0, 402.0], [568.0, 409.6666666666667], [550.0, 402.5], [544.0, 402.5], [570.0, 404.0], [560.0, 255.0], [562.0, 282.83333333333337], [564.0, 409.0], [572.0, 422.5], [578.0, 207.33333333333331], [576.0, 266.6], [580.0, 443.0], [582.0, 413.0], [602.0, 450.0], [604.0, 449.0], [584.0, 258.0], [586.0, 444.6], [590.0, 446.0], [588.0, 446.0], [598.0, 441.0], [596.0, 420.0], [594.0, 419.2], [592.0, 446.0], [606.0, 450.0], [612.0, 296.8333333333333], [608.0, 411.4], [622.0, 453.8], [618.0, 448.33333333333337], [616.0, 446.3333333333333], [610.0, 402.5], [624.0, 345.03030303030306], [634.0, 275.33333333333337], [638.0, 451.0], [636.0, 451.6666666666667], [632.0, 332.25], [614.0, 449.5], [626.0, 284.6363636363636], [628.0, 257.0], [630.0, 309.5294117647059], [646.0, 455.5], [670.0, 492.0], [658.0, 356.5], [652.0, 455.0], [650.0, 455.0], [648.0, 456.0], [666.0, 482.25], [644.0, 452.0], [640.0, 451.0], [660.0, 415.0], [662.0, 293.25000000000006], [656.0, 455.0], [676.0, 323.6296296296296], [674.0, 312.9], [672.0, 491.0], [684.0, 244.14285714285714], [686.0, 461.0], [678.0, 301.99999999999994], [700.0, 495.0], [688.0, 461.0], [692.0, 460.59999999999997], [694.0, 460.0], [698.0, 490.0], [680.0, 273.13636363636374], [682.0, 244.0], [706.0, 495.0], [708.0, 381.5], [718.0, 460.5], [716.0, 478.61111111111114], [714.0, 495.6666666666667], [710.0, 384.5], [712.0, 314.72727272727275], [724.0, 407.1538461538462], [722.0, 500.5], [720.0, 500.3333333333333], [734.0, 309.80000000000007], [732.0, 352.7142857142857], [730.0, 319.47058823529414], [728.0, 327.4857142857143], [726.0, 333.92857142857144], [766.0, 501.0], [758.0, 306.0], [756.0, 501.3333333333333], [762.0, 369.46153846153845], [752.0, 501.0], [754.0, 501.8888888888889], [764.0, 501.6666666666667], [760.0, 501.0], [738.0, 500.3333333333333], [740.0, 500.0], [748.0, 501.0], [746.0, 501.0], [798.0, 521.3333333333333], [774.0, 429.81481481481484], [792.0, 503.0], [794.0, 503.0], [784.0, 307.2857142857143], [786.0, 502.1176470588236], [788.0, 501.0], [790.0, 503.0], [776.0, 318.0], [778.0, 329.4782608695652], [780.0, 357.82758620689657], [782.0, 381.06249999999994], [772.0, 507.1666666666667], [770.0, 518.0], [802.0, 541.0], [826.0, 362.4666666666667], [806.0, 427.5], [808.0, 478.6], [810.0, 507.0], [812.0, 384.3636363636363], [804.0, 511.75], [800.0, 539.0], [814.0, 530.1], [824.0, 453.1111111111111], [828.0, 320.08333333333337], [830.0, 328.57142857142856], [816.0, 545.6666666666666], [818.0, 538.1250000000001], [820.0, 511.5], [822.0, 510.26666666666665], [836.0, 543.3333333333334], [856.0, 456.44444444444446], [832.0, 442.14285714285717], [844.0, 542.5], [842.0, 543.0], [840.0, 543.6666666666666], [834.0, 319.8928571428571], [858.0, 487.0], [862.0, 497.3913043478261], [854.0, 562.2727272727273], [850.0, 547.2857142857143], [860.0, 551.5], [878.0, 407.2307692307692], [874.0, 470.5], [872.0, 551.0], [876.0, 395.8], [880.0, 355.6153846153845], [892.0, 549.75], [870.0, 545.3333333333334], [868.0, 543.7500000000001], [866.0, 555.4], [864.0, 556.0], [882.0, 404.625], [884.0, 403.0], [886.0, 550.0], [900.0, 556.6666666666667], [906.0, 358.3333333333333], [904.0, 591.5], [910.0, 593.0], [920.0, 556.5], [922.0, 566.3333333333334], [912.0, 369.57142857142856], [916.0, 581.1666666666666], [918.0, 558.9473684210526], [926.0, 410.0833333333333], [924.0, 588.25], [934.0, 342.7142857142858], [928.0, 455.9130434782609], [930.0, 373.9565217391304], [932.0, 431.90000000000003], [956.0, 405.54545454545456], [954.0, 599.0], [952.0, 592.5714285714286], [944.0, 600.3333333333334], [946.0, 595.0], [948.0, 594.3333333333334], [958.0, 599.7142857142857], [936.0, 507.75], [938.0, 599.0], [942.0, 600.0], [984.0, 460.15384615384613], [976.0, 403.7], [962.0, 407.4166666666667], [960.0, 596.8000000000001], [964.0, 567.0], [966.0, 562.8333333333333], [986.0, 602.0], [988.0, 601.5], [990.0, 602.0], [974.0, 479.0], [972.0, 593.0], [970.0, 596.5], [968.0, 580.9999999999999], [978.0, 398.875], [980.0, 428.2962962962963], [982.0, 434.1111111111111], [1016.0, 602.5833333333333], [1022.0, 606.25], [1006.0, 523.1818181818182], [1004.0, 604.0], [1002.0, 601.0], [1000.0, 615.5], [996.0, 602.0], [994.0, 599.7647058823529], [992.0, 598.0], [1018.0, 602.0], [1010.0, 607.6363636363636], [1012.0, 530.0], [1014.0, 601.6666666666666], [1008.0, 607.3333333333334], [1020.0, 629.4666666666668], [1032.0, 407.3571428571429], [1028.0, 425.1578947368421], [1024.0, 604.0], [1048.0, 608.8333333333333], [1044.0, 641.0], [1040.0, 643.3333333333334], [1072.0, 477.7027027027027], [1036.0, 605.4], [1080.0, 427.7368421052632], [1076.0, 652.3333333333334], [1056.0, 496.30769230769226], [1084.0, 612.6666666666666], [1060.0, 606.4333333333333], [1064.0, 641.8333333333333], [1068.0, 644.6666666666666], [1092.0, 612.0], [1136.0, 694.0], [1148.0, 534.6666666666666], [1140.0, 661.0], [1108.0, 460.0], [1104.0, 642.4], [1112.0, 643.7777777777778], [1096.0, 611.0], [1100.0, 617.0], [1116.0, 655.860465116279], [1128.0, 451.0], [1124.0, 648.75], [1120.0, 646.448275862069], [1144.0, 530.6875], [1132.0, 440.0], [1204.0, 689.1176470588235], [1208.0, 661.9375], [1180.0, 693.1666666666666], [1160.0, 617.4], [1156.0, 478.20000000000005], [1164.0, 470.0], [1212.0, 627.0], [1184.0, 486.5652173913044], [1188.0, 696.0], [1192.0, 664.1666666666666], [1196.0, 658.625], [1176.0, 506.8076923076923], [1172.0, 660.4], [1168.0, 649.3333333333334], [1268.0, 702.0], [1276.0, 622.8113207547171], [1224.0, 699.9], [1216.0, 701.0], [1228.0, 650.6119402985075], [1264.0, 620.25], [1272.0, 702.0], [1248.0, 697.0], [1252.0, 702.2], [1232.0, 700.0], [1236.0, 700.0], [1244.0, 701.25], [1240.0, 701.0], [1256.0, 524.3], [1260.0, 507.0], [1280.0, 705.0], [1336.0, 624.8], [1284.0, 519.6944444444443], [1288.0, 702.8571428571429], [1308.0, 706.3529411764706], [1304.0, 740.6666666666666], [1300.0, 717.1666666666666], [1296.0, 703.0], [1312.0, 616.3749999999999], [1340.0, 744.0], [1332.0, 705.1428571428572], [1328.0, 558.3793103448276], [1324.0, 752.0], [1320.0, 731.1200000000002], [1316.0, 735.2631578947369], [1348.0, 747.0], [1404.0, 759.0], [1364.0, 673.3333333333333], [1368.0, 755.1428571428572], [1372.0, 740.2727272727274], [1392.0, 795.0], [1352.0, 749.4444444444445], [1344.0, 747.0], [1396.0, 794.0], [1360.0, 730.0], [1376.0, 688.2328767123286], [1380.0, 762.2608695652174], [1384.0, 519.159090909091], [1388.0, 748.7727272727274], [1420.0, 776.4722222222223], [1464.0, 702.1176470588234], [1412.0, 733.1], [1436.0, 619.0], [1416.0, 748.2173913043479], [1456.0, 799.4444444444445], [1460.0, 734.6666666666666], [1440.0, 785.0], [1444.0, 794.5], [1448.0, 800.9444444444446], [1452.0, 800.7142857142858], [1468.0, 775.6326530612246], [1424.0, 796.7826086956522], [1428.0, 581.9], [1432.0, 796.0], [1472.0, 799.0], [1476.0, 700.3584905660375], [1500.0, 801.6], [1496.0, 803.0], [1492.0, 802.0], [1488.0, 801.3333333333334], [1484.0, 603.655737704918], [1480.0, 801.8888888888888], [1532.0, 830.1428571428571], [1528.0, 662.0000000000001], [1524.0, 804.75], [1520.0, 819.0000000000001], [1512.0, 723.5], [1516.0, 805.6111111111111], [1548.0, 831.0], [1584.0, 614.7647058823532], [1536.0, 793.6], [1540.0, 806.7272727272729], [1544.0, 802.6341463414634], [1588.0, 808.0], [1592.0, 806.0], [1568.0, 827.2894736842106], [1572.0, 852.1904761904761], [1596.0, 805.0], [1560.0, 753.0], [1556.0, 802.0], [1552.0, 806.7142857142857], [1564.0, 659.0], [1576.0, 806.1639344262293], [1580.0, 608.7777777777778], [1648.0, 856.0], [1656.0, 847.0400000000001], [1604.0, 846.4], [1600.0, 843.0], [1612.0, 845.35], [1652.0, 849.0], [1660.0, 664.0], [1632.0, 855.8571428571428], [1636.0, 725.1333333333334], [1640.0, 848.5], [1644.0, 892.0555555555557], [1624.0, 846.3150684931504], [1620.0, 847.0], [1616.0, 854.6], [1628.0, 825.860465116279], [1672.0, 866.25], [1664.0, 769.6666666666667], [1692.0, 901.8636363636365], [1688.0, 851.0000000000001], [1676.0, 854.8156028368796], [1668.0, 862.8750000000001], [1708.0, 803.4285714285714], [1712.0, 903.0], [1716.0, 909.0], [1720.0, 921.2515337423314], [1724.0, 944.0], [1696.0, 884.2083333333333], [1700.0, 903.1875000000001], [1704.0, 903.0], [1680.0, 801.8095238095239], [1684.0, 719.1923076923078], [1732.0, 948.9000000000001], [1728.0, 880.2608695652173], [1736.0, 741.9599999999999], [1756.0, 1001.7142857142857], [1752.0, 1002.1999999999999], [1744.0, 885.15], [1788.0, 1003.0], [1784.0, 805.2903225806454], [1780.0, 752.0526315789474], [1776.0, 1002.0], [1764.0, 821.6250000000001], [1772.0, 1002.96], [1820.0, 1002.7], [1792.0, 1002.0], [1808.0, 793.3636363636364], [1812.0, 1002.3333333333333], [1816.0, 1002.1052631578948], [1796.0, 1002.0], [1800.0, 1002.8571428571429], [1840.0, 1002.9090909090909], [1844.0, 1000.4], [1848.0, 1002.6578947368422], [1852.0, 1002.6666666666666], [1824.0, 1002.8], [1828.0, 776.8387096774192], [1832.0, 1002.5714285714286], [1836.0, 752.8571428571428], [1864.0, 801.0], [1880.0, 767.611111111111], [1860.0, 1002.2222222222222], [1856.0, 1002.75], [1884.0, 768.1923076923076], [1904.0, 1002.5000000000001], [1908.0, 846.3571428571429], [1912.0, 1002.3157894736842], [1916.0, 969.7142857142857], [1888.0, 1003.0], [1896.0, 1008.0], [1872.0, 1002.5714285714286], [1924.0, 1003.0], [1928.0, 787.6842105263157], [1920.0, 1002.2647058823528], [1948.0, 1125.6666666666665], [1944.0, 1157.7499999999998], [1932.0, 1002.8518518518518], [1936.0, 740.3529411764708], [1956.0, 1078.0], [1952.0, 1104.7499999999998], [1960.0, 1077.5], [1980.0, 803.9047619047618], [1964.0, 810.8571428571429], [1996.0, 1002.1428571428571], [1992.0, 1002.3333333333333], [2000.0, 1002.4199674429718], [1984.0, 1003.0], [1033.0, 415.79310344827576], [1025.0, 436.0], [1053.0, 609.0], [1045.0, 641.0], [1041.0, 647.6923076923076], [1029.0, 404.1], [1037.0, 609.6666666666666], [1073.0, 561.8205128205127], [1077.0, 652.8333333333333], [1081.0, 487.5384615384615], [1085.0, 412.77777777777777], [1057.0, 591.9999999999999], [1061.0, 603.0], [1101.0, 612.0], [1141.0, 667.1111111111112], [1097.0, 612.0], [1089.0, 610.8571428571429], [1117.0, 655.8181818181818], [1105.0, 645.0], [1113.0, 579.6315789473686], [1149.0, 577.7600000000002], [1125.0, 655.5], [1121.0, 634.875], [1145.0, 560.5217391304348], [1137.0, 443.66666666666663], [1129.0, 488.3333333333333], [1133.0, 567.5], [1165.0, 650.6818181818184], [1181.0, 695.8], [1161.0, 655.0], [1153.0, 658.9999999999999], [1205.0, 666.5], [1201.0, 699.3333333333335], [1209.0, 660.6], [1213.0, 553.3333333333334], [1185.0, 430.08333333333337], [1197.0, 655.6666666666666], [1189.0, 699.0], [1173.0, 659.6], [1169.0, 654.5], [1177.0, 501.50000000000006], [1221.0, 699.2857142857142], [1225.0, 593.1428571428571], [1217.0, 700.4444444444445], [1245.0, 673.0], [1241.0, 700.0], [1237.0, 700.5], [1229.0, 528.2142857142857], [1265.0, 739.125], [1269.0, 704.2352941176471], [1277.0, 653.9397590361444], [1233.0, 523.8461538461538], [1257.0, 702.0], [1253.0, 705.0], [1249.0, 700.9], [1289.0, 703.0], [1333.0, 566.6037735849056], [1285.0, 595.4615384615385], [1293.0, 703.0], [1305.0, 741.0], [1297.0, 703.0], [1281.0, 705.0], [1309.0, 707.0], [1337.0, 743.1666666666667], [1341.0, 746.0], [1329.0, 585.2692307692308], [1313.0, 646.5], [1325.0, 739.8571428571429], [1321.0, 730.6470588235295], [1317.0, 707.25], [1357.0, 638.3750000000001], [1397.0, 767.8], [1405.0, 759.0], [1401.0, 760.0], [1393.0, 797.6666666666666], [1361.0, 756.6999999999999], [1365.0, 754.0], [1369.0, 757.6666666666666], [1349.0, 747.0], [1353.0, 743.2857142857142], [1373.0, 748.1428571428572], [1377.0, 733.9117647058822], [1381.0, 759.0], [1385.0, 513.0666666666667], [1389.0, 752.5263157894736], [1421.0, 766.2247191011237], [1457.0, 622.4166666666666], [1429.0, 606.5], [1413.0, 679.7727272727273], [1409.0, 756.1666666666667], [1417.0, 750.0], [1437.0, 755.0], [1461.0, 763.0], [1465.0, 797.0645161290322], [1441.0, 784.0], [1445.0, 797.0], [1449.0, 801.0], [1469.0, 798.7894736842105], [1425.0, 798.9285714285712], [1433.0, 672.2083333333333], [1529.0, 624.7], [1485.0, 596.2307692307693], [1477.0, 759.6290322580645], [1473.0, 767.0384615384615], [1493.0, 801.6], [1489.0, 801.5], [1509.0, 801.7142857142858], [1533.0, 847.4000000000001], [1525.0, 669.0357142857143], [1521.0, 803.7910447761193], [1513.0, 677.5882352941176], [1517.0, 822.1], [1565.0, 827.4375], [1585.0, 612.2758620689656], [1557.0, 725.0555555555555], [1553.0, 803.0], [1561.0, 803.3636363636364], [1549.0, 816.8157894736845], [1545.0, 803.0714285714286], [1541.0, 806.0], [1577.0, 761.9818181818182], [1581.0, 847.0], [1569.0, 805.2222222222222], [1573.0, 821.8571428571429], [1597.0, 840.5000000000001], [1589.0, 804.8571428571429], [1649.0, 856.0], [1657.0, 735.1333333333333], [1629.0, 772.8235294117648], [1609.0, 849.9230769230769], [1613.0, 853.0], [1601.0, 843.6666666666666], [1605.0, 847.2], [1653.0, 844.2], [1661.0, 849.0], [1633.0, 855.0], [1637.0, 618.0], [1641.0, 850.0], [1625.0, 856.0338983050847], [1621.0, 844.0805084745767], [1617.0, 853.5], [1669.0, 859.7142857142858], [1665.0, 870.4090909090908], [1693.0, 872.2962962962961], [1689.0, 881.7083333333334], [1673.0, 871.2035928143715], [1677.0, 867.7168674698793], [1713.0, 674.0], [1717.0, 904.9333333333334], [1721.0, 925.9047619047623], [1725.0, 947.3181818181818], [1697.0, 902.3333333333334], [1701.0, 902.4], [1705.0, 902.3333333333334], [1709.0, 906.5], [1681.0, 861.3529411764707], [1685.0, 739.1296296296297], [1729.0, 821.5185185185185], [1733.0, 945.5], [1757.0, 1003.0], [1753.0, 1000.6470588235294], [1749.0, 998.236842105263], [1745.0, 857.4137931034484], [1761.0, 707.0], [1789.0, 1002.3636363636364], [1781.0, 1003.0], [1785.0, 709.7924528301888], [1777.0, 718.3333333333331], [1741.0, 944.2105263157895], [1737.0, 950.0], [1765.0, 937.5555555555555], [1773.0, 1002.695652173913], [1769.0, 1003.0], [1821.0, 1003.0], [1853.0, 1003.0], [1809.0, 1002.3636363636364], [1813.0, 993.8888888888888], [1817.0, 1002.0], [1793.0, 1002.75], [1797.0, 1002.5555555555555], [1801.0, 1002.5625], [1805.0, 1002.0], [1841.0, 1002.8076923076923], [1849.0, 1004.5], [1825.0, 1002.0], [1829.0, 919.5892857142859], [1833.0, 1003.0], [1837.0, 871.3888888888889], [1865.0, 882.0], [1861.0, 990.913043478261], [1857.0, 1002.0], [1885.0, 728.5833333333333], [1881.0, 747.5], [1909.0, 1002.6666666666666], [1913.0, 963.0], [1889.0, 1002.0], [1897.0, 1008.0], [1901.0, 1002.8181818181816], [1917.0, 1002.5], [1877.0, 847.1739130434781], [1873.0, 1002.6666666666666], [1925.0, 1002.5454545454545], [1929.0, 831.9749999999999], [1921.0, 1002.6], [1945.0, 1127.0], [1941.0, 1174.0], [1933.0, 1003.3333333333334], [1937.0, 853.4285714285713], [1957.0, 1077.0], [1981.0, 989.9230769230769], [1977.0, 805.9117647058824], [1969.0, 1009.0], [1961.0, 1053.6153846153848], [1965.0, 807.125], [1985.0, 801.2857142857144], [1989.0, 1003.6666666666666], [1997.0, 1003.1111111111112], [1993.0, 1007.047619047619], [519.0, 405.0], [527.0, 202.88235294117644], [513.0, 402.0], [517.0, 404.8], [537.0, 436.0], [541.0, 436.25], [539.0, 436.0], [543.0, 403.0], [523.0, 402.0], [521.0, 402.0], [525.0, 203.80769230769232], [529.0, 202.1111111111111], [531.0, 222.4545454545454], [533.0, 249.6363636363636], [535.0, 443.0], [549.0, 402.0], [555.0, 323.875], [557.0, 403.6], [545.0, 402.0], [569.0, 410.0], [561.0, 319.9166666666667], [567.0, 409.6363636363636], [565.0, 409.0], [563.0, 409.0], [575.0, 288.77777777777777], [573.0, 439.4], [579.0, 226.875], [603.0, 449.0], [577.0, 215.68627450980392], [581.0, 208.1], [583.0, 210.76470588235293], [601.0, 449.5], [585.0, 443.5], [587.0, 445.0], [591.0, 446.0], [605.0, 272.7], [607.0, 450.0], [599.0, 449.0], [597.0, 420.0], [595.0, 421.0], [593.0, 446.0], [613.0, 450.0], [639.0, 451.0], [623.0, 451.75000000000006], [619.0, 453.5], [617.0, 447.0], [611.0, 287.375], [635.0, 451.0], [615.0, 448.0], [633.0, 215.99999999999997], [625.0, 285.9615384615385], [627.0, 286.05882352941177], [629.0, 225.47619047619048], [631.0, 213.0], [645.0, 452.8], [655.0, 277.6], [651.0, 455.0], [641.0, 451.4], [659.0, 449.5], [661.0, 351.99999999999994], [663.0, 491.0], [671.0, 491.3076923076923], [669.0, 491.5], [667.0, 490.5], [677.0, 306.4285714285714], [675.0, 308.3703703703704], [673.0, 492.0], [685.0, 460.0], [679.0, 301.7857142857143], [691.0, 461.0], [693.0, 460.0], [699.0, 493.0], [697.0, 470.3333333333333], [681.0, 269.6363636363636], [683.0, 266.05263157894734], [711.0, 422.0], [731.0, 296.16666666666663], [705.0, 262.22222222222223], [719.0, 461.75], [717.0, 457.2], [715.0, 496.0], [709.0, 496.0], [713.0, 386.0], [721.0, 502.0], [735.0, 500.8], [733.0, 349.30434782608694], [729.0, 321.1153846153846], [725.0, 313.2222222222223], [727.0, 358.55], [763.0, 354.0], [755.0, 302.22222222222223], [757.0, 501.0], [759.0, 501.0], [761.0, 487.42857142857144], [767.0, 501.0], [753.0, 503.0], [751.0, 501.2], [737.0, 500.25], [739.0, 501.0], [743.0, 501.0], [749.0, 500.6], [795.0, 502.125], [779.0, 316.2068965517241], [775.0, 308.26923076923083], [793.0, 503.0], [799.0, 535.5], [785.0, 328.6666666666667], [787.0, 503.0], [789.0, 501.8], [777.0, 364.2307692307692], [781.0, 440.1111111111111], [783.0, 320.53333333333336], [773.0, 501.25], [771.0, 535.0], [769.0, 502.9166666666667], [815.0, 547.4285714285714], [805.0, 363.77777777777777], [809.0, 507.75], [811.0, 490.0], [813.0, 395.0], [803.0, 540.2857142857143], [825.0, 361.91999999999996], [827.0, 369.0869565217392], [829.0, 344.6363636363637], [831.0, 370.4], [817.0, 545.2500000000001], [819.0, 511.3333333333333], [821.0, 510.75], [823.0, 511.0], [833.0, 368.5], [847.0, 546.0], [845.0, 543.3333333333335], [843.0, 543.0], [835.0, 542.8], [837.0, 544.0], [857.0, 552.5714285714286], [861.0, 488.6666666666667], [863.0, 483.38461538461536], [855.0, 588.5], [853.0, 546.0], [851.0, 547.0], [871.0, 550.5], [891.0, 550.0], [877.0, 428.8181818181818], [873.0, 552.0], [875.0, 398.5], [879.0, 341.43749999999994], [893.0, 553.0], [889.0, 549.3333333333334], [869.0, 518.6666666666667], [867.0, 554.7777777777778], [865.0, 554.5], [881.0, 367.9230769230769], [883.0, 352.84615384615387], [885.0, 364.7333333333333], [903.0, 587.2222222222222], [925.0, 439.23076923076917], [905.0, 592.0], [909.0, 559.4285714285714], [911.0, 369.0], [901.0, 591.6666666666667], [921.0, 556.090909090909], [913.0, 433.1428571428571], [915.0, 591.0833333333335], [917.0, 556.8571428571429], [919.0, 558.625], [927.0, 415.4444444444445], [923.0, 571.0], [935.0, 373.5625], [931.0, 436.35294117647055], [929.0, 412.7333333333334], [933.0, 451.5], [955.0, 599.0], [953.0, 599.6666666666666], [959.0, 542.5], [945.0, 601.0], [947.0, 594.5], [951.0, 593.0], [949.0, 593.5], [937.0, 565.0], [941.0, 600.6666666666667], [939.0, 599.6666666666666], [967.0, 562.25], [961.0, 472.0], [963.0, 439.6666666666667], [965.0, 567.0], [985.0, 491.50000000000006], [987.0, 601.0], [989.0, 603.7000000000002], [991.0, 602.0], [971.0, 595.6428571428571], [969.0, 596.2352941176471], [975.0, 398.6315789473684], [977.0, 421.14285714285717], [979.0, 408.63636363636357], [981.0, 395.72727272727275], [983.0, 434.6363636363637], [997.0, 601.3636363636364], [1017.0, 602.6666666666666], [1009.0, 539.6666666666666], [1005.0, 633.6666666666666], [1003.0, 603.1034482758622], [1001.0, 604.3888888888888], [999.0, 606.3333333333333], [995.0, 601.7142857142857], [993.0, 601.0], [1011.0, 596.529411764706], [1013.0, 486.8], [1015.0, 601.3333333333334], [1023.0, 603.3333333333334], [1021.0, 608.0], [1034.0, 473.75], [1026.0, 457.7096774193548], [1054.0, 608.3333333333334], [1050.0, 609.0], [1046.0, 609.5714285714286], [1030.0, 606.0], [1038.0, 623.7142857142858], [1074.0, 473.50000000000006], [1082.0, 430.76315789473676], [1086.0, 613.0], [1058.0, 526.5454545454545], [1062.0, 631.3333333333334], [1066.0, 642.1666666666667], [1070.0, 630.8799999999998], [1118.0, 653.0], [1106.0, 649.25], [1110.0, 643.5], [1114.0, 646.8571428571428], [1090.0, 610.0], [1094.0, 611.5], [1102.0, 612.0], [1126.0, 673.0], [1122.0, 651.2857142857143], [1146.0, 550.6153846153845], [1142.0, 667.5], [1138.0, 445.16666666666663], [1130.0, 666.0], [1134.0, 441.0], [1158.0, 655.0], [1162.0, 640.4166666666666], [1178.0, 564.4615384615386], [1182.0, 692.0], [1154.0, 658.75], [1202.0, 699.1111111111111], [1166.0, 654.5172413793101], [1206.0, 665.0], [1210.0, 695.76], [1214.0, 693.5], [1186.0, 622.0], [1190.0, 682.0], [1194.0, 661.6666666666666], [1198.0, 698.0869565217392], [1170.0, 684.1538461538461], [1230.0, 700.5], [1226.0, 588.6250000000001], [1222.0, 693.8333333333333], [1218.0, 699.857142857143], [1266.0, 707.0], [1270.0, 702.8], [1274.0, 703.0], [1278.0, 693.0000000000002], [1250.0, 701.3333333333334], [1234.0, 511.44117647058823], [1238.0, 701.0], [1246.0, 673.0], [1262.0, 681.8333333333333], [1286.0, 504.49999999999994], [1294.0, 703.0], [1310.0, 687.25], [1282.0, 705.1428571428572], [1306.0, 728.7142857142857], [1298.0, 702.8], [1342.0, 744.0], [1334.0, 535.2972972972974], [1330.0, 708.1], [1314.0, 595.8], [1326.0, 619.8837209302327], [1322.0, 751.1428571428572], [1318.0, 706.1111111111112], [1346.0, 747.0], [1394.0, 797.6], [1362.0, 558.0], [1366.0, 754.0], [1370.0, 755.5999999999999], [1358.0, 754.0909090909091], [1354.0, 756.0], [1374.0, 749.0], [1402.0, 759.5714285714286], [1398.0, 765.0], [1406.0, 759.6666666666666], [1378.0, 611.28125], [1382.0, 713.975], [1386.0, 748.6363636363636], [1390.0, 790.2857142857143], [1414.0, 676.1999999999999], [1410.0, 709.0], [1438.0, 755.0], [1434.0, 601.1428571428572], [1418.0, 750.6666666666666], [1422.0, 757.1428571428571], [1458.0, 790.5833333333333], [1462.0, 747.7692307692307], [1470.0, 800.5882352941177], [1442.0, 792.0], [1446.0, 797.0769230769231], [1450.0, 800.6666666666666], [1454.0, 800.2], [1466.0, 790.6666666666666], [1426.0, 568.4117647058823], [1430.0, 560.1250000000001], [1482.0, 802.3333333333334], [1486.0, 653.4166666666667], [1502.0, 802.2857142857143], [1498.0, 803.0], [1494.0, 803.0], [1478.0, 628.078947368421], [1534.0, 612.3055555555554], [1506.0, 802.0], [1530.0, 697.6874999999999], [1526.0, 740.0], [1522.0, 815.9078014184397], [1510.0, 768.8], [1514.0, 813.0], [1550.0, 844.6666666666667], [1538.0, 807.0], [1542.0, 806.2222222222223], [1546.0, 803.6666666666666], [1586.0, 654.5882352941176], [1594.0, 814.3333333333334], [1598.0, 843.5], [1570.0, 816.9833333333331], [1574.0, 844.0], [1558.0, 803.0], [1554.0, 803.2857142857142], [1562.0, 786.8888888888889], [1566.0, 819.59375], [1578.0, 786.7843137254898], [1582.0, 851.4945054945055], [1650.0, 856.0], [1614.0, 786.8928571428572], [1630.0, 674.6999999999999], [1610.0, 854.5], [1606.0, 846.8333333333333], [1654.0, 849.0], [1658.0, 850.0], [1662.0, 828.75], [1634.0, 694.086956521739], [1638.0, 848.1999999999998], [1642.0, 849.0], [1646.0, 876.5636363636362], [1626.0, 765.8153846153846], [1622.0, 857.7419354838711], [1618.0, 827.9333333333334], [1714.0, 876.0851063829787], [1678.0, 697.913043478261], [1690.0, 896.0], [1674.0, 850.1666666666667], [1670.0, 856.0000000000001], [1666.0, 895.3076923076924], [1718.0, 916.2500000000002], [1722.0, 944.0], [1698.0, 902.578947368421], [1702.0, 919.7777777777778], [1706.0, 902.1428571428572], [1726.0, 964.0000000000001], [1682.0, 860.0], [1686.0, 712.5454545454546], [1734.0, 768.5517241379312], [1730.0, 794.3703703703703], [1778.0, 823.4571428571428], [1758.0, 824.6], [1754.0, 996.7857142857142], [1750.0, 997.2142857142858], [1746.0, 951.5789473684215], [1790.0, 1003.0], [1786.0, 720.5], [1782.0, 1003.0], [1738.0, 980.2258064516132], [1766.0, 1003.0], [1798.0, 1005.0], [1814.0, 941.3571428571429], [1810.0, 940.0], [1818.0, 1002.0], [1802.0, 1003.5], [1806.0, 1002.0], [1822.0, 1003.3333333333334], [1846.0, 1001.8846153846155], [1826.0, 1002.595238095238], [1830.0, 744.2222222222222], [1834.0, 885.0588235294117], [1838.0, 1002.5], [1866.0, 1001.8181818181819], [1886.0, 717.7560975609755], [1858.0, 773.5], [1862.0, 1001.2], [1910.0, 1001.5], [1914.0, 771.5], [1918.0, 1002.5], [1890.0, 1001.3333333333334], [1898.0, 1003.0], [1874.0, 1002.7142857142858], [1878.0, 796.9999999999999], [1930.0, 886.0], [1926.0, 1002.0714285714286], [1978.0, 817.217391304348], [1922.0, 1002.2903225806451], [1950.0, 1124.2500000000002], [1946.0, 1126.8333333333333], [1934.0, 1003.5], [1958.0, 911.6470588235293], [1954.0, 1079.4], [1974.0, 1006.6111111111112], [1962.0, 1073.1351351351352], [1966.0, 1016.8548387096773], [1990.0, 1002.4814814814816], [1986.0, 866.2040816326529], [1998.0, 1003.7142857142858], [1994.0, 1003.8793103448274], [1031.0, 606.0], [1055.0, 609.125], [1051.0, 608.5], [1027.0, 420.82608695652175], [1035.0, 433.4666666666667], [1075.0, 408.0], [1079.0, 653.6], [1083.0, 476.72222222222223], [1087.0, 612.6666666666666], [1059.0, 477.125], [1071.0, 485.66666666666663], [1067.0, 641.4285714285714], [1063.0, 642.0], [1091.0, 610.3333333333334], [1103.0, 485.45454545454544], [1099.0, 611.0], [1095.0, 612.3333333333334], [1119.0, 653.3333333333334], [1115.0, 646.6153846153846], [1111.0, 546.4545454545454], [1107.0, 645.8], [1151.0, 659.5], [1123.0, 651.75], [1147.0, 532.6666666666666], [1143.0, 664.0], [1139.0, 489.04347826086956], [1131.0, 694.4], [1135.0, 442.15], [1163.0, 580.037037037037], [1207.0, 462.8888888888889], [1183.0, 480.98360655737713], [1179.0, 530.45], [1155.0, 656.5], [1167.0, 650.0], [1211.0, 694.0], [1199.0, 699.0], [1195.0, 656.0], [1191.0, 699.0], [1187.0, 655.0], [1215.0, 698.2500000000001], [1175.0, 592.8918918918919], [1171.0, 690.8541666666667], [1219.0, 700.3333333333334], [1267.0, 704.9999999999999], [1227.0, 573.4047619047619], [1223.0, 676.3214285714287], [1247.0, 688.3333333333334], [1243.0, 701.0000000000001], [1239.0, 701.0], [1275.0, 563.5], [1279.0, 560.3599999999999], [1235.0, 522.2941176470589], [1263.0, 537.5555555555557], [1259.0, 705.4], [1255.0, 702.0], [1251.0, 702.0], [1287.0, 702.4], [1283.0, 569.1818181818181], [1291.0, 703.0], [1307.0, 596.5384615384617], [1303.0, 737.909090909091], [1311.0, 679.6], [1335.0, 585.25], [1339.0, 744.0], [1343.0, 744.2857142857143], [1331.0, 705.0], [1323.0, 754.0384615384617], [1319.0, 705.4090909090911], [1315.0, 747.8], [1327.0, 632.8260869565216], [1395.0, 798.0], [1407.0, 604.4285714285714], [1403.0, 758.8333333333334], [1399.0, 763.3333333333334], [1363.0, 648.7692307692308], [1367.0, 734.6216216216216], [1371.0, 742.6562500000002], [1375.0, 745.8888888888888], [1347.0, 747.0], [1351.0, 747.0], [1355.0, 755.0], [1379.0, 610.4761904761906], [1383.0, 585.468085106383], [1387.0, 746.1666666666666], [1391.0, 795.0], [1419.0, 786.9830508474577], [1435.0, 588.4545454545454], [1411.0, 755.5000000000001], [1415.0, 750.0], [1423.0, 785.6], [1439.0, 756.65], [1463.0, 671.4000000000001], [1467.0, 793.0], [1471.0, 801.4000000000001], [1443.0, 795.3333333333334], [1447.0, 800.3333333333334], [1455.0, 799.0], [1451.0, 801.0], [1427.0, 666.4084507042252], [1431.0, 796.2857142857142], [1483.0, 703.4799999999999], [1479.0, 666.5161290322583], [1475.0, 793.3918128654973], [1503.0, 801.5], [1491.0, 802.3333333333334], [1507.0, 684.8000000000001], [1511.0, 832.3333333333334], [1535.0, 623.2083333333331], [1531.0, 807.0], [1527.0, 638.1219512195123], [1523.0, 809.4879999999999], [1487.0, 802.0], [1519.0, 841.0], [1515.0, 804.6666666666667], [1567.0, 825.7948717948718], [1563.0, 747.0], [1555.0, 803.0], [1559.0, 802.9090909090909], [1551.0, 825.1875], [1547.0, 803.5999999999999], [1543.0, 806.6666666666666], [1539.0, 811.0], [1579.0, 636.0625], [1583.0, 839.2], [1599.0, 843.4285714285714], [1571.0, 833.2388059701493], [1575.0, 844.4999999999999], [1595.0, 833.0], [1591.0, 805.25], [1587.0, 808.75], [1615.0, 824.5384615384614], [1611.0, 819.1666666666667], [1607.0, 697.5833333333334], [1631.0, 859.3076923076924], [1603.0, 846.0], [1651.0, 853.0769230769231], [1659.0, 849.2], [1663.0, 725.9000000000001], [1635.0, 701.4411764705882], [1639.0, 844.6], [1643.0, 864.2222222222222], [1647.0, 857.909090909091], [1623.0, 854.1923076923077], [1619.0, 828.1123595505617], [1627.0, 836.0285714285716], [1675.0, 859.6428571428571], [1679.0, 803.1428571428571], [1695.0, 894.9183673469388], [1691.0, 898.1666666666667], [1687.0, 854.25], [1671.0, 852.5], [1667.0, 899.0], [1715.0, 676.6666666666666], [1719.0, 908.0], [1723.0, 944.0], [1727.0, 810.109090909091], [1699.0, 903.4000000000001], [1703.0, 903.7499999999999], [1707.0, 902.0], [1711.0, 785.5], [1683.0, 872.5], [1779.0, 703.7647058823529], [1735.0, 700.7115384615382], [1731.0, 950.0], [1751.0, 997.0], [1747.0, 997.8918918918919], [1759.0, 1002.8749999999999], [1791.0, 1003.0], [1787.0, 853.8333333333334], [1783.0, 1003.0], [1743.0, 909.391304347826], [1739.0, 982.7499999999999], [1763.0, 712.0], [1771.0, 1002.4736842105265], [1767.0, 1003.5], [1799.0, 1003.5], [1823.0, 1003.0625], [1843.0, 1002.2857142857142], [1811.0, 1002.7692307692307], [1815.0, 759.4], [1819.0, 1002.2499999999999], [1795.0, 1002.8571428571428], [1803.0, 1003.3333333333335], [1807.0, 1002.4], [1847.0, 1002.5999999999999], [1851.0, 1003.0], [1855.0, 1002.6666666666666], [1827.0, 916.5079365079365], [1831.0, 1002.0], [1835.0, 732.5156249999998], [1839.0, 1002.3000000000001], [1867.0, 1002.1818181818181], [1859.0, 1002.0], [1887.0, 888.5999999999999], [1863.0, 989.9047619047619], [1907.0, 1002.1428571428573], [1911.0, 923.3333333333334], [1915.0, 771.4444444444445], [1891.0, 1002.2500000000001], [1903.0, 1003.0], [1875.0, 1002.6666666666667], [1879.0, 786.4545454545455], [1931.0, 791.8571428571429], [1927.0, 793.8235294117649], [1951.0, 1120.7692307692305], [1943.0, 1173.9999999999998], [1939.0, 1175.0], [1935.0, 843.2099999999998], [1955.0, 1079.5], [1959.0, 1077.4545454545455], [1983.0, 1003.705882352941], [1979.0, 851.1666666666667], [1975.0, 1006.8333333333334], [1971.0, 1008.5], [1963.0, 1044.0416666666665], [1987.0, 954.7200000000001], [1991.0, 1005.7692307692307], [1999.0, 1002.0], [1.0, 200.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1964.2138174999805, 985.0416799999982]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 100738.25, "minX": 1.58524302E12, "maxY": 400954.8, "series": [{"data": [[1.58524314E12, 400723.65], [1.58524302E12, 156964.25], [1.5852432E12, 381357.3], [1.58524308E12, 400954.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58524314E12, 257180.85], [1.58524302E12, 100738.25], [1.5852432E12, 244751.7], [1.58524308E12, 257329.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5852432E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 916.2423007149735, "minX": 1.58524302E12, "maxY": 1002.9715009023579, "series": [{"data": [[1.58524314E12, 1002.8328860799793], [1.58524302E12, 916.2423007149735], [1.5852432E12, 975.8131643212259], [1.58524308E12, 1002.9715009023579]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5852432E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 916.1943869384297, "minX": 1.58524302E12, "maxY": 1002.9692533921528, "series": [{"data": [[1.58524314E12, 1002.8302610789252], [1.58524302E12, 916.1943869384297], [1.5852432E12, 975.8106344103055], [1.58524308E12, 1002.9692533921528]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5852432E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5784957556313102, "minX": 1.58524302E12, "maxY": 0.7321950698964952, "series": [{"data": [[1.58524314E12, 0.5989098721774876], [1.58524302E12, 0.7321950698964952], [1.5852432E12, 0.6216641191869168], [1.58524308E12, 0.5784957556313102]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5852432E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 101.0, "minX": 1.58524302E12, "maxY": 1175.0, "series": [{"data": [[1.58524314E12, 1030.0], [1.58524302E12, 1050.0], [1.5852432E12, 1175.0], [1.58524308E12, 1051.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58524314E12, 105.0], [1.58524302E12, 101.0], [1.5852432E12, 200.0], [1.58524308E12, 106.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58524314E12, 1004.0], [1.58524302E12, 1004.0], [1.5852432E12, 1003.0], [1.58524308E12, 1003.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58524314E12, 1008.0], [1.58524302E12, 1010.0], [1.5852432E12, 1077.0], [1.58524308E12, 1009.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58524314E12, 1005.0], [1.58524302E12, 1005.0], [1.5852432E12, 1004.0], [1.58524308E12, 1004.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5852432E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 177.0, "minX": 112.0, "maxY": 1003.0, "series": [{"data": [[1032.0, 177.0], [112.0, 246.0], [1978.0, 1003.0], [1946.0, 1003.0], [1943.0, 1003.0], [1945.0, 1003.0], [1944.0, 1003.0], [1980.0, 1003.0], [1983.0, 1002.0], [1950.0, 1003.0], [1940.0, 1003.0], [1963.0, 1003.0], [1958.0, 1003.0], [1961.0, 1003.0], [1953.0, 1003.0], [1951.0, 1003.0], [1929.0, 1003.0], [1947.0, 1003.0], [1949.0, 1003.0], [1991.0, 1003.0], [2000.0, 896.0], [1996.0, 1003.0], [1986.0, 1003.0], [1997.0, 1003.0], [1992.0, 1003.0], [1995.0, 1003.0], [1994.0, 1003.0], [1990.0, 1003.0], [1999.0, 1003.0], [1998.0, 1002.0], [1989.0, 1003.0], [1984.0, 1002.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 176.0, "minX": 112.0, "maxY": 1003.0, "series": [{"data": [[1032.0, 176.0], [112.0, 246.0], [1978.0, 1003.0], [1946.0, 1003.0], [1943.0, 1003.0], [1945.0, 1003.0], [1944.0, 1003.0], [1980.0, 1003.0], [1983.0, 1002.0], [1950.0, 1003.0], [1940.0, 1003.0], [1963.0, 1003.0], [1958.0, 1003.0], [1961.0, 1003.0], [1953.0, 1003.0], [1951.0, 1003.0], [1929.0, 1003.0], [1947.0, 1003.0], [1949.0, 1003.0], [1991.0, 1003.0], [2000.0, 896.0], [1996.0, 1003.0], [1986.0, 1003.0], [1997.0, 1003.0], [1992.0, 1003.0], [1995.0, 1003.0], [1994.0, 1003.0], [1990.0, 1003.0], [1999.0, 1003.0], [1998.0, 1002.0], [1989.0, 1003.0], [1984.0, 1002.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 814.25, "minX": 1.58524302E12, "maxY": 1994.8, "series": [{"data": [[1.58524314E12, 1993.65], [1.58524302E12, 814.25], [1.5852432E12, 1863.9666666666667], [1.58524308E12, 1994.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5852432E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 780.9166666666666, "minX": 1.58524302E12, "maxY": 1994.8, "series": [{"data": [[1.58524314E12, 1993.65], [1.58524302E12, 780.9166666666666], [1.5852432E12, 1897.3], [1.58524308E12, 1994.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5852432E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 780.9166666666666, "minX": 1.58524302E12, "maxY": 1994.8, "series": [{"data": [[1.58524314E12, 1993.65], [1.58524302E12, 780.9166666666666], [1.5852432E12, 1897.3], [1.58524308E12, 1994.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5852432E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 780.9166666666666, "minX": 1.58524302E12, "maxY": 1994.8, "series": [{"data": [[1.58524314E12, 1993.65], [1.58524302E12, 780.9166666666666], [1.5852432E12, 1897.3], [1.58524308E12, 1994.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5852432E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

