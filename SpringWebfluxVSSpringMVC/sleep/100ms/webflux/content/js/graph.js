/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 101.0, "minX": 0.0, "maxY": 1163.0, "series": [{"data": [[0.0, 101.0], [0.1, 101.0], [0.2, 101.0], [0.3, 101.0], [0.4, 101.0], [0.5, 101.0], [0.6, 101.0], [0.7, 101.0], [0.8, 101.0], [0.9, 101.0], [1.0, 101.0], [1.1, 101.0], [1.2, 101.0], [1.3, 101.0], [1.4, 101.0], [1.5, 101.0], [1.6, 101.0], [1.7, 101.0], [1.8, 101.0], [1.9, 101.0], [2.0, 101.0], [2.1, 101.0], [2.2, 101.0], [2.3, 101.0], [2.4, 101.0], [2.5, 101.0], [2.6, 101.0], [2.7, 101.0], [2.8, 101.0], [2.9, 101.0], [3.0, 101.0], [3.1, 101.0], [3.2, 101.0], [3.3, 101.0], [3.4, 101.0], [3.5, 101.0], [3.6, 101.0], [3.7, 101.0], [3.8, 101.0], [3.9, 101.0], [4.0, 101.0], [4.1, 101.0], [4.2, 101.0], [4.3, 101.0], [4.4, 101.0], [4.5, 101.0], [4.6, 101.0], [4.7, 101.0], [4.8, 101.0], [4.9, 101.0], [5.0, 101.0], [5.1, 101.0], [5.2, 101.0], [5.3, 101.0], [5.4, 101.0], [5.5, 101.0], [5.6, 101.0], [5.7, 101.0], [5.8, 101.0], [5.9, 101.0], [6.0, 101.0], [6.1, 101.0], [6.2, 101.0], [6.3, 101.0], [6.4, 101.0], [6.5, 101.0], [6.6, 101.0], [6.7, 101.0], [6.8, 101.0], [6.9, 101.0], [7.0, 101.0], [7.1, 101.0], [7.2, 101.0], [7.3, 101.0], [7.4, 101.0], [7.5, 101.0], [7.6, 101.0], [7.7, 101.0], [7.8, 101.0], [7.9, 101.0], [8.0, 101.0], [8.1, 101.0], [8.2, 101.0], [8.3, 101.0], [8.4, 101.0], [8.5, 101.0], [8.6, 101.0], [8.7, 101.0], [8.8, 101.0], [8.9, 101.0], [9.0, 101.0], [9.1, 101.0], [9.2, 101.0], [9.3, 101.0], [9.4, 101.0], [9.5, 101.0], [9.6, 101.0], [9.7, 101.0], [9.8, 101.0], [9.9, 101.0], [10.0, 101.0], [10.1, 101.0], [10.2, 101.0], [10.3, 101.0], [10.4, 101.0], [10.5, 101.0], [10.6, 101.0], [10.7, 101.0], [10.8, 101.0], [10.9, 101.0], [11.0, 101.0], [11.1, 101.0], [11.2, 101.0], [11.3, 101.0], [11.4, 101.0], [11.5, 101.0], [11.6, 101.0], [11.7, 101.0], [11.8, 101.0], [11.9, 101.0], [12.0, 101.0], [12.1, 101.0], [12.2, 101.0], [12.3, 101.0], [12.4, 101.0], [12.5, 101.0], [12.6, 101.0], [12.7, 101.0], [12.8, 101.0], [12.9, 101.0], [13.0, 101.0], [13.1, 101.0], [13.2, 101.0], [13.3, 101.0], [13.4, 101.0], [13.5, 101.0], [13.6, 101.0], [13.7, 101.0], [13.8, 101.0], [13.9, 101.0], [14.0, 101.0], [14.1, 101.0], [14.2, 101.0], [14.3, 101.0], [14.4, 101.0], [14.5, 101.0], [14.6, 101.0], [14.7, 101.0], [14.8, 101.0], [14.9, 101.0], [15.0, 101.0], [15.1, 101.0], [15.2, 101.0], [15.3, 101.0], [15.4, 101.0], [15.5, 101.0], [15.6, 101.0], [15.7, 101.0], [15.8, 101.0], [15.9, 101.0], [16.0, 101.0], [16.1, 101.0], [16.2, 101.0], [16.3, 101.0], [16.4, 101.0], [16.5, 101.0], [16.6, 101.0], [16.7, 101.0], [16.8, 101.0], [16.9, 101.0], [17.0, 101.0], [17.1, 101.0], [17.2, 101.0], [17.3, 101.0], [17.4, 101.0], [17.5, 101.0], [17.6, 101.0], [17.7, 101.0], [17.8, 101.0], [17.9, 101.0], [18.0, 101.0], [18.1, 101.0], [18.2, 101.0], [18.3, 101.0], [18.4, 101.0], [18.5, 101.0], [18.6, 101.0], [18.7, 101.0], [18.8, 101.0], [18.9, 101.0], [19.0, 101.0], [19.1, 101.0], [19.2, 101.0], [19.3, 101.0], [19.4, 101.0], [19.5, 101.0], [19.6, 101.0], [19.7, 101.0], [19.8, 101.0], [19.9, 101.0], [20.0, 101.0], [20.1, 101.0], [20.2, 101.0], [20.3, 101.0], [20.4, 101.0], [20.5, 101.0], [20.6, 101.0], [20.7, 101.0], [20.8, 101.0], [20.9, 101.0], [21.0, 101.0], [21.1, 101.0], [21.2, 101.0], [21.3, 101.0], [21.4, 101.0], [21.5, 101.0], [21.6, 101.0], [21.7, 101.0], [21.8, 101.0], [21.9, 101.0], [22.0, 101.0], [22.1, 101.0], [22.2, 101.0], [22.3, 101.0], [22.4, 101.0], [22.5, 101.0], [22.6, 101.0], [22.7, 101.0], [22.8, 101.0], [22.9, 101.0], [23.0, 101.0], [23.1, 101.0], [23.2, 101.0], [23.3, 101.0], [23.4, 101.0], [23.5, 101.0], [23.6, 101.0], [23.7, 101.0], [23.8, 101.0], [23.9, 101.0], [24.0, 101.0], [24.1, 101.0], [24.2, 101.0], [24.3, 101.0], [24.4, 101.0], [24.5, 101.0], [24.6, 101.0], [24.7, 101.0], [24.8, 101.0], [24.9, 101.0], [25.0, 101.0], [25.1, 101.0], [25.2, 101.0], [25.3, 101.0], [25.4, 101.0], [25.5, 101.0], [25.6, 101.0], [25.7, 101.0], [25.8, 101.0], [25.9, 101.0], [26.0, 101.0], [26.1, 101.0], [26.2, 101.0], [26.3, 101.0], [26.4, 101.0], [26.5, 101.0], [26.6, 101.0], [26.7, 101.0], [26.8, 101.0], [26.9, 101.0], [27.0, 101.0], [27.1, 101.0], [27.2, 101.0], [27.3, 101.0], [27.4, 101.0], [27.5, 101.0], [27.6, 101.0], [27.7, 101.0], [27.8, 101.0], [27.9, 101.0], [28.0, 101.0], [28.1, 101.0], [28.2, 101.0], [28.3, 101.0], [28.4, 101.0], [28.5, 101.0], [28.6, 101.0], [28.7, 101.0], [28.8, 102.0], [28.9, 102.0], [29.0, 102.0], [29.1, 102.0], [29.2, 102.0], [29.3, 102.0], [29.4, 102.0], [29.5, 102.0], [29.6, 102.0], [29.7, 102.0], [29.8, 102.0], [29.9, 102.0], [30.0, 102.0], [30.1, 102.0], [30.2, 102.0], [30.3, 102.0], [30.4, 102.0], [30.5, 102.0], [30.6, 102.0], [30.7, 102.0], [30.8, 102.0], [30.9, 102.0], [31.0, 102.0], [31.1, 102.0], [31.2, 102.0], [31.3, 102.0], [31.4, 102.0], [31.5, 102.0], [31.6, 102.0], [31.7, 102.0], [31.8, 102.0], [31.9, 102.0], [32.0, 102.0], [32.1, 102.0], [32.2, 102.0], [32.3, 102.0], [32.4, 102.0], [32.5, 102.0], [32.6, 102.0], [32.7, 102.0], [32.8, 102.0], [32.9, 102.0], [33.0, 102.0], [33.1, 102.0], [33.2, 102.0], [33.3, 102.0], [33.4, 102.0], [33.5, 102.0], [33.6, 102.0], [33.7, 102.0], [33.8, 102.0], [33.9, 102.0], [34.0, 102.0], [34.1, 102.0], [34.2, 102.0], [34.3, 102.0], [34.4, 102.0], [34.5, 102.0], [34.6, 102.0], [34.7, 102.0], [34.8, 102.0], [34.9, 102.0], [35.0, 102.0], [35.1, 102.0], [35.2, 102.0], [35.3, 102.0], [35.4, 102.0], [35.5, 102.0], [35.6, 102.0], [35.7, 102.0], [35.8, 102.0], [35.9, 102.0], [36.0, 102.0], [36.1, 102.0], [36.2, 102.0], [36.3, 102.0], [36.4, 102.0], [36.5, 102.0], [36.6, 102.0], [36.7, 102.0], [36.8, 102.0], [36.9, 102.0], [37.0, 102.0], [37.1, 102.0], [37.2, 102.0], [37.3, 102.0], [37.4, 102.0], [37.5, 102.0], [37.6, 102.0], [37.7, 102.0], [37.8, 102.0], [37.9, 102.0], [38.0, 102.0], [38.1, 102.0], [38.2, 102.0], [38.3, 102.0], [38.4, 102.0], [38.5, 102.0], [38.6, 102.0], [38.7, 102.0], [38.8, 102.0], [38.9, 102.0], [39.0, 102.0], [39.1, 102.0], [39.2, 102.0], [39.3, 102.0], [39.4, 102.0], [39.5, 102.0], [39.6, 102.0], [39.7, 102.0], [39.8, 102.0], [39.9, 102.0], [40.0, 102.0], [40.1, 102.0], [40.2, 102.0], [40.3, 102.0], [40.4, 102.0], [40.5, 102.0], [40.6, 102.0], [40.7, 102.0], [40.8, 102.0], [40.9, 102.0], [41.0, 102.0], [41.1, 102.0], [41.2, 102.0], [41.3, 102.0], [41.4, 102.0], [41.5, 102.0], [41.6, 102.0], [41.7, 102.0], [41.8, 102.0], [41.9, 102.0], [42.0, 102.0], [42.1, 102.0], [42.2, 102.0], [42.3, 102.0], [42.4, 102.0], [42.5, 102.0], [42.6, 102.0], [42.7, 102.0], [42.8, 102.0], [42.9, 102.0], [43.0, 102.0], [43.1, 102.0], [43.2, 102.0], [43.3, 102.0], [43.4, 102.0], [43.5, 102.0], [43.6, 102.0], [43.7, 102.0], [43.8, 102.0], [43.9, 102.0], [44.0, 102.0], [44.1, 102.0], [44.2, 102.0], [44.3, 102.0], [44.4, 102.0], [44.5, 102.0], [44.6, 102.0], [44.7, 102.0], [44.8, 102.0], [44.9, 102.0], [45.0, 102.0], [45.1, 102.0], [45.2, 102.0], [45.3, 102.0], [45.4, 102.0], [45.5, 102.0], [45.6, 102.0], [45.7, 102.0], [45.8, 102.0], [45.9, 102.0], [46.0, 102.0], [46.1, 102.0], [46.2, 102.0], [46.3, 102.0], [46.4, 102.0], [46.5, 102.0], [46.6, 102.0], [46.7, 102.0], [46.8, 102.0], [46.9, 102.0], [47.0, 102.0], [47.1, 102.0], [47.2, 102.0], [47.3, 102.0], [47.4, 102.0], [47.5, 102.0], [47.6, 102.0], [47.7, 102.0], [47.8, 102.0], [47.9, 102.0], [48.0, 102.0], [48.1, 102.0], [48.2, 102.0], [48.3, 102.0], [48.4, 102.0], [48.5, 102.0], [48.6, 102.0], [48.7, 102.0], [48.8, 102.0], [48.9, 102.0], [49.0, 102.0], [49.1, 102.0], [49.2, 102.0], [49.3, 102.0], [49.4, 102.0], [49.5, 102.0], [49.6, 102.0], [49.7, 102.0], [49.8, 102.0], [49.9, 102.0], [50.0, 102.0], [50.1, 102.0], [50.2, 102.0], [50.3, 102.0], [50.4, 102.0], [50.5, 102.0], [50.6, 102.0], [50.7, 102.0], [50.8, 102.0], [50.9, 102.0], [51.0, 102.0], [51.1, 102.0], [51.2, 102.0], [51.3, 102.0], [51.4, 102.0], [51.5, 102.0], [51.6, 102.0], [51.7, 102.0], [51.8, 102.0], [51.9, 102.0], [52.0, 102.0], [52.1, 102.0], [52.2, 102.0], [52.3, 102.0], [52.4, 102.0], [52.5, 102.0], [52.6, 102.0], [52.7, 102.0], [52.8, 102.0], [52.9, 102.0], [53.0, 102.0], [53.1, 102.0], [53.2, 102.0], [53.3, 102.0], [53.4, 102.0], [53.5, 102.0], [53.6, 102.0], [53.7, 102.0], [53.8, 102.0], [53.9, 102.0], [54.0, 102.0], [54.1, 102.0], [54.2, 102.0], [54.3, 102.0], [54.4, 102.0], [54.5, 102.0], [54.6, 102.0], [54.7, 102.0], [54.8, 102.0], [54.9, 102.0], [55.0, 102.0], [55.1, 102.0], [55.2, 102.0], [55.3, 102.0], [55.4, 102.0], [55.5, 102.0], [55.6, 102.0], [55.7, 102.0], [55.8, 102.0], [55.9, 102.0], [56.0, 102.0], [56.1, 102.0], [56.2, 102.0], [56.3, 102.0], [56.4, 102.0], [56.5, 102.0], [56.6, 102.0], [56.7, 102.0], [56.8, 102.0], [56.9, 102.0], [57.0, 102.0], [57.1, 102.0], [57.2, 102.0], [57.3, 102.0], [57.4, 102.0], [57.5, 102.0], [57.6, 102.0], [57.7, 102.0], [57.8, 102.0], [57.9, 102.0], [58.0, 102.0], [58.1, 102.0], [58.2, 103.0], [58.3, 103.0], [58.4, 103.0], [58.5, 103.0], [58.6, 103.0], [58.7, 103.0], [58.8, 103.0], [58.9, 103.0], [59.0, 103.0], [59.1, 103.0], [59.2, 103.0], [59.3, 103.0], [59.4, 103.0], [59.5, 103.0], [59.6, 103.0], [59.7, 103.0], [59.8, 103.0], [59.9, 103.0], [60.0, 103.0], [60.1, 103.0], [60.2, 103.0], [60.3, 103.0], [60.4, 103.0], [60.5, 103.0], [60.6, 103.0], [60.7, 103.0], [60.8, 103.0], [60.9, 103.0], [61.0, 103.0], [61.1, 103.0], [61.2, 103.0], [61.3, 103.0], [61.4, 103.0], [61.5, 103.0], [61.6, 103.0], [61.7, 103.0], [61.8, 103.0], [61.9, 103.0], [62.0, 103.0], [62.1, 103.0], [62.2, 103.0], [62.3, 103.0], [62.4, 103.0], [62.5, 103.0], [62.6, 103.0], [62.7, 103.0], [62.8, 103.0], [62.9, 103.0], [63.0, 103.0], [63.1, 103.0], [63.2, 103.0], [63.3, 103.0], [63.4, 103.0], [63.5, 103.0], [63.6, 103.0], [63.7, 103.0], [63.8, 103.0], [63.9, 103.0], [64.0, 103.0], [64.1, 103.0], [64.2, 103.0], [64.3, 103.0], [64.4, 103.0], [64.5, 103.0], [64.6, 103.0], [64.7, 103.0], [64.8, 103.0], [64.9, 103.0], [65.0, 103.0], [65.1, 103.0], [65.2, 103.0], [65.3, 103.0], [65.4, 103.0], [65.5, 103.0], [65.6, 103.0], [65.7, 103.0], [65.8, 103.0], [65.9, 103.0], [66.0, 103.0], [66.1, 103.0], [66.2, 103.0], [66.3, 103.0], [66.4, 103.0], [66.5, 103.0], [66.6, 103.0], [66.7, 103.0], [66.8, 103.0], [66.9, 103.0], [67.0, 103.0], [67.1, 103.0], [67.2, 103.0], [67.3, 103.0], [67.4, 103.0], [67.5, 103.0], [67.6, 104.0], [67.7, 104.0], [67.8, 104.0], [67.9, 104.0], [68.0, 104.0], [68.1, 104.0], [68.2, 104.0], [68.3, 104.0], [68.4, 104.0], [68.5, 104.0], [68.6, 104.0], [68.7, 104.0], [68.8, 104.0], [68.9, 104.0], [69.0, 104.0], [69.1, 104.0], [69.2, 104.0], [69.3, 104.0], [69.4, 104.0], [69.5, 104.0], [69.6, 104.0], [69.7, 104.0], [69.8, 104.0], [69.9, 104.0], [70.0, 104.0], [70.1, 104.0], [70.2, 104.0], [70.3, 104.0], [70.4, 104.0], [70.5, 104.0], [70.6, 104.0], [70.7, 104.0], [70.8, 104.0], [70.9, 104.0], [71.0, 104.0], [71.1, 104.0], [71.2, 104.0], [71.3, 104.0], [71.4, 104.0], [71.5, 104.0], [71.6, 104.0], [71.7, 104.0], [71.8, 104.0], [71.9, 104.0], [72.0, 104.0], [72.1, 104.0], [72.2, 104.0], [72.3, 104.0], [72.4, 104.0], [72.5, 104.0], [72.6, 104.0], [72.7, 105.0], [72.8, 105.0], [72.9, 105.0], [73.0, 105.0], [73.1, 105.0], [73.2, 105.0], [73.3, 105.0], [73.4, 105.0], [73.5, 105.0], [73.6, 105.0], [73.7, 105.0], [73.8, 105.0], [73.9, 105.0], [74.0, 105.0], [74.1, 105.0], [74.2, 105.0], [74.3, 105.0], [74.4, 105.0], [74.5, 105.0], [74.6, 105.0], [74.7, 105.0], [74.8, 105.0], [74.9, 105.0], [75.0, 105.0], [75.1, 105.0], [75.2, 105.0], [75.3, 105.0], [75.4, 105.0], [75.5, 105.0], [75.6, 105.0], [75.7, 105.0], [75.8, 105.0], [75.9, 105.0], [76.0, 105.0], [76.1, 105.0], [76.2, 106.0], [76.3, 106.0], [76.4, 106.0], [76.5, 106.0], [76.6, 106.0], [76.7, 106.0], [76.8, 106.0], [76.9, 106.0], [77.0, 106.0], [77.1, 106.0], [77.2, 106.0], [77.3, 106.0], [77.4, 106.0], [77.5, 106.0], [77.6, 106.0], [77.7, 106.0], [77.8, 106.0], [77.9, 106.0], [78.0, 106.0], [78.1, 106.0], [78.2, 106.0], [78.3, 106.0], [78.4, 106.0], [78.5, 106.0], [78.6, 106.0], [78.7, 107.0], [78.8, 107.0], [78.9, 107.0], [79.0, 107.0], [79.1, 107.0], [79.2, 107.0], [79.3, 107.0], [79.4, 107.0], [79.5, 107.0], [79.6, 107.0], [79.7, 107.0], [79.8, 107.0], [79.9, 107.0], [80.0, 107.0], [80.1, 107.0], [80.2, 107.0], [80.3, 107.0], [80.4, 107.0], [80.5, 107.0], [80.6, 107.0], [80.7, 107.0], [80.8, 107.0], [80.9, 108.0], [81.0, 108.0], [81.1, 108.0], [81.2, 108.0], [81.3, 108.0], [81.4, 108.0], [81.5, 108.0], [81.6, 108.0], [81.7, 108.0], [81.8, 108.0], [81.9, 108.0], [82.0, 108.0], [82.1, 108.0], [82.2, 108.0], [82.3, 108.0], [82.4, 108.0], [82.5, 108.0], [82.6, 108.0], [82.7, 109.0], [82.8, 109.0], [82.9, 109.0], [83.0, 109.0], [83.1, 109.0], [83.2, 109.0], [83.3, 109.0], [83.4, 109.0], [83.5, 109.0], [83.6, 109.0], [83.7, 109.0], [83.8, 109.0], [83.9, 109.0], [84.0, 109.0], [84.1, 109.0], [84.2, 109.0], [84.3, 110.0], [84.4, 110.0], [84.5, 110.0], [84.6, 110.0], [84.7, 110.0], [84.8, 110.0], [84.9, 110.0], [85.0, 110.0], [85.1, 110.0], [85.2, 110.0], [85.3, 110.0], [85.4, 110.0], [85.5, 110.0], [85.6, 111.0], [85.7, 111.0], [85.8, 111.0], [85.9, 111.0], [86.0, 111.0], [86.1, 111.0], [86.2, 111.0], [86.3, 111.0], [86.4, 111.0], [86.5, 111.0], [86.6, 111.0], [86.7, 111.0], [86.8, 112.0], [86.9, 112.0], [87.0, 112.0], [87.1, 112.0], [87.2, 112.0], [87.3, 112.0], [87.4, 112.0], [87.5, 112.0], [87.6, 112.0], [87.7, 112.0], [87.8, 113.0], [87.9, 113.0], [88.0, 113.0], [88.1, 113.0], [88.2, 113.0], [88.3, 113.0], [88.4, 113.0], [88.5, 113.0], [88.6, 113.0], [88.7, 114.0], [88.8, 114.0], [88.9, 114.0], [89.0, 114.0], [89.1, 114.0], [89.2, 114.0], [89.3, 114.0], [89.4, 114.0], [89.5, 115.0], [89.6, 115.0], [89.7, 115.0], [89.8, 115.0], [89.9, 115.0], [90.0, 115.0], [90.1, 115.0], [90.2, 115.0], [90.3, 116.0], [90.4, 116.0], [90.5, 116.0], [90.6, 116.0], [90.7, 116.0], [90.8, 116.0], [90.9, 116.0], [91.0, 117.0], [91.1, 117.0], [91.2, 117.0], [91.3, 117.0], [91.4, 117.0], [91.5, 117.0], [91.6, 117.0], [91.7, 118.0], [91.8, 118.0], [91.9, 118.0], [92.0, 118.0], [92.1, 118.0], [92.2, 119.0], [92.3, 119.0], [92.4, 119.0], [92.5, 119.0], [92.6, 119.0], [92.7, 120.0], [92.8, 120.0], [92.9, 120.0], [93.0, 120.0], [93.1, 121.0], [93.2, 121.0], [93.3, 121.0], [93.4, 121.0], [93.5, 121.0], [93.6, 122.0], [93.7, 122.0], [93.8, 122.0], [93.9, 123.0], [94.0, 123.0], [94.1, 123.0], [94.2, 123.0], [94.3, 124.0], [94.4, 124.0], [94.5, 124.0], [94.6, 125.0], [94.7, 125.0], [94.8, 125.0], [94.9, 126.0], [95.0, 126.0], [95.1, 126.0], [95.2, 127.0], [95.3, 127.0], [95.4, 128.0], [95.5, 128.0], [95.6, 128.0], [95.7, 129.0], [95.8, 129.0], [95.9, 130.0], [96.0, 130.0], [96.1, 130.0], [96.2, 131.0], [96.3, 131.0], [96.4, 132.0], [96.5, 132.0], [96.6, 133.0], [96.7, 133.0], [96.8, 134.0], [96.9, 134.0], [97.0, 135.0], [97.1, 136.0], [97.2, 136.0], [97.3, 137.0], [97.4, 138.0], [97.5, 139.0], [97.6, 140.0], [97.7, 140.0], [97.8, 141.0], [97.9, 142.0], [98.0, 143.0], [98.1, 144.0], [98.2, 146.0], [98.3, 147.0], [98.4, 148.0], [98.5, 149.0], [98.6, 151.0], [98.7, 153.0], [98.8, 156.0], [98.9, 158.0], [99.0, 161.0], [99.1, 165.0], [99.2, 168.0], [99.3, 173.0], [99.4, 181.0], [99.5, 191.0], [99.6, 211.0], [99.7, 239.0], [99.8, 282.0], [99.9, 299.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 100.0, "maxY": 398172.0, "series": [{"data": [[1100.0, 2.0], [300.0, 359.0], [200.0, 1444.0], [100.0, 398172.0], [400.0, 23.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 399998.0, "series": [{"data": [[0.0, 399998.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1892.9596499999898, "minX": 1.58524344E12, "maxY": 1892.9596499999898, "series": [{"data": [[1.58524344E12, 1892.9596499999898]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524344E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 101.0, "minX": 1.0, "maxY": 289.0, "series": [{"data": [[2.0, 101.0], [3.0, 101.0], [4.0, 101.0], [5.0, 101.0], [6.0, 101.0], [7.0, 102.0], [8.0, 102.0], [9.0, 101.0], [10.0, 101.0], [11.0, 101.0], [12.0, 101.0], [13.0, 101.0], [14.0, 101.0], [15.0, 101.0], [16.0, 101.0], [17.0, 101.0], [18.0, 101.0], [20.0, 101.0], [21.0, 101.0], [22.0, 101.0], [23.0, 101.0], [24.0, 101.0], [25.0, 101.66666666666667], [26.0, 101.0], [27.0, 101.0], [28.0, 101.0], [29.0, 101.0], [30.0, 101.0], [31.0, 101.0], [33.0, 101.0], [32.0, 101.0], [35.0, 101.0], [34.0, 101.0], [37.0, 101.0], [36.0, 101.0], [39.0, 101.0], [38.0, 101.0], [41.0, 101.0], [40.0, 101.5], [43.0, 101.0], [42.0, 101.5], [45.0, 101.0], [44.0, 101.0], [47.0, 101.5], [46.0, 101.0], [49.0, 101.0], [48.0, 102.0], [51.0, 101.5], [50.0, 101.0], [53.0, 101.0], [52.0, 101.0], [55.0, 102.0], [54.0, 102.0], [57.0, 101.25], [56.0, 101.5], [59.0, 101.33333333333333], [58.0, 101.0], [61.0, 102.0], [60.0, 101.4], [63.0, 101.0], [62.0, 101.0], [67.0, 102.0], [66.0, 102.0], [65.0, 101.0], [64.0, 101.0], [71.0, 102.0], [70.0, 101.0], [69.0, 101.0], [68.0, 101.0], [74.0, 101.0], [73.0, 101.25], [72.0, 102.0], [79.0, 101.0], [78.0, 101.5], [77.0, 101.0], [76.0, 101.0], [82.0, 101.33333333333333], [80.0, 101.33333333333333], [87.0, 101.0], [86.0, 101.5], [85.0, 101.0], [84.0, 102.0], [90.0, 101.0], [89.0, 101.0], [88.0, 101.0], [95.0, 101.0], [94.0, 101.2], [93.0, 101.0], [92.0, 101.5], [99.0, 101.0], [98.0, 101.0], [97.0, 102.0], [96.0, 101.0], [103.0, 101.5], [102.0, 101.0], [101.0, 101.0], [100.0, 101.5], [107.0, 101.0], [106.0, 101.0], [105.0, 101.0], [104.0, 101.0], [111.0, 102.0], [110.0, 101.25], [109.0, 101.66666666666667], [108.0, 101.0], [115.0, 101.0], [113.0, 101.5], [112.0, 101.66666666666667], [119.0, 101.33333333333336], [117.0, 101.0], [116.0, 101.75], [123.0, 101.42857142857143], [122.0, 101.33333333333333], [121.0, 101.0], [120.0, 101.0], [126.0, 101.0], [125.0, 102.0], [124.0, 101.0], [135.0, 101.0], [134.0, 102.0], [133.0, 101.0], [132.0, 101.5], [131.0, 101.0], [130.0, 101.0], [129.0, 101.0], [128.0, 101.0], [143.0, 101.3], [142.0, 101.0], [141.0, 101.55555555555556], [140.0, 101.0], [139.0, 101.0], [137.0, 101.0], [136.0, 101.0], [151.0, 101.0], [150.0, 101.0], [149.0, 101.0], [147.0, 102.0], [145.0, 101.16666666666667], [144.0, 101.0], [159.0, 101.0], [158.0, 101.0], [157.0, 101.0], [156.0, 101.33333333333334], [154.0, 101.0], [153.0, 102.0], [152.0, 102.0], [167.0, 101.5], [166.0, 101.0], [165.0, 101.5], [164.0, 101.0], [162.0, 101.0], [161.0, 102.0], [160.0, 101.0], [175.0, 101.0], [174.0, 101.5], [173.0, 101.66666666666667], [172.0, 101.33333333333333], [171.0, 101.0], [170.0, 101.0], [169.0, 101.0], [168.0, 101.75], [183.0, 102.0], [182.0, 101.0], [181.0, 101.33333333333333], [180.0, 102.0], [179.0, 101.08333333333334], [178.0, 101.4], [177.0, 101.5], [176.0, 101.33333333333334], [191.0, 101.2], [190.0, 101.0], [189.0, 101.0], [188.0, 101.71428571428571], [187.0, 101.0], [185.0, 102.0], [184.0, 101.10000000000002], [199.0, 101.0], [198.0, 101.5], [197.0, 101.0], [196.0, 101.0], [195.0, 101.33333333333333], [194.0, 101.0], [193.0, 101.0], [192.0, 101.0], [205.0, 102.0], [204.0, 101.2727272727273], [202.0, 101.25], [201.0, 101.0], [200.0, 101.0], [215.0, 101.5], [214.0, 101.0], [213.0, 101.0], [212.0, 101.2], [211.0, 101.0], [210.0, 101.5], [209.0, 102.0], [208.0, 101.0], [223.0, 101.0], [222.0, 101.0], [221.0, 101.2], [220.0, 101.4], [219.0, 101.0], [218.0, 101.6], [217.0, 101.5], [216.0, 101.0], [231.0, 102.0], [230.0, 101.0], [229.0, 101.2], [228.0, 102.0], [227.0, 101.2], [226.0, 101.71428571428571], [225.0, 101.28571428571429], [224.0, 101.0], [239.0, 102.0], [238.0, 101.2], [236.0, 102.0], [235.0, 101.0], [234.0, 102.0], [233.0, 101.0], [232.0, 101.5], [247.0, 101.25], [246.0, 102.0], [245.0, 101.25], [244.0, 101.3157894736842], [243.0, 101.0], [242.0, 101.46153846153847], [241.0, 101.10000000000001], [240.0, 101.28571428571429], [255.0, 101.5], [254.0, 101.125], [252.0, 101.0], [250.0, 101.0], [249.0, 102.0], [248.0, 101.5], [268.0, 182.23529411764707], [264.0, 226.09090909090912], [262.0, 231.875], [265.0, 164.0], [266.0, 183.55555555555557], [267.0, 213.0], [269.0, 117.66666666666666], [270.0, 194.57142857142858], [271.0, 190.11111111111111], [263.0, 145.84615384615384], [257.0, 102.0], [256.0, 101.0], [259.0, 101.75], [258.0, 101.15384615384616], [261.0, 102.0], [260.0, 101.6], [273.0, 254.11111111111106], [272.0, 202.5], [274.0, 152.0], [275.0, 152.42857142857144], [277.0, 217.0], [276.0, 101.75], [278.0, 200.71428571428572], [279.0, 190.375], [280.0, 148.75], [287.0, 103.5], [286.0, 101.71428571428572], [284.0, 139.63636363636363], [285.0, 123.5], [281.0, 289.0], [282.0, 286.0], [283.0, 106.25], [290.0, 200.66666666666663], [288.0, 102.5], [289.0, 101.30769230769232], [291.0, 229.63636363636363], [292.0, 207.31034482758625], [293.0, 241.00000000000003], [295.0, 104.6], [294.0, 101.3076923076923], [296.0, 102.58333333333333], [297.0, 101.0], [299.0, 101.66666666666667], [298.0, 101.0], [300.0, 110.2], [302.0, 107.75], [301.0, 101.33333333333334], [303.0, 101.0], [318.0, 101.69999999999999], [306.0, 105.33333333333333], [311.0, 105.85714285714285], [305.0, 101.0], [304.0, 101.33333333333333], [310.0, 101.0], [309.0, 101.28571428571429], [312.0, 105.88888888888889], [313.0, 116.5], [316.0, 117.66666666666667], [307.0, 101.16666666666667], [319.0, 101.57142857142857], [317.0, 101.16666666666667], [315.0, 101.60000000000001], [314.0, 102.0], [334.0, 101.0], [329.0, 103.64285714285717], [331.0, 125.66666666666667], [332.0, 103.83333333333334], [335.0, 196.76190476190482], [333.0, 101.4], [328.0, 101.33333333333334], [327.0, 101.0], [320.0, 101.0], [323.0, 102.0], [322.0, 102.0], [326.0, 101.0], [325.0, 101.25], [324.0, 102.0], [336.0, 256.0], [337.0, 138.7142857142857], [339.0, 101.4], [338.0, 102.0], [348.0, 138.66666666666666], [349.0, 130.61111111111111], [350.0, 108.55555555555556], [351.0, 126.15384615384617], [340.0, 126.09090909090911], [341.0, 139.25], [342.0, 116.23809523809527], [343.0, 174.45454545454547], [344.0, 145.7142857142857], [345.0, 254.0], [346.0, 223.23076923076928], [347.0, 138.27272727272728], [353.0, 133.54545454545456], [352.0, 107.22727272727273], [354.0, 106.75], [355.0, 150.1904761904762], [356.0, 120.0], [357.0, 131.37500000000003], [358.0, 134.14285714285714], [359.0, 104.11111111111111], [360.0, 120.41666666666667], [361.0, 101.5], [366.0, 122.56000000000003], [367.0, 127.10000000000002], [364.0, 165.3], [365.0, 125.5], [362.0, 199.0], [363.0, 132.36363636363637], [369.0, 131.36363636363635], [368.0, 125.79999999999998], [370.0, 115.00000000000001], [371.0, 116.5], [372.0, 131.2], [373.0, 126.71428571428572], [374.0, 143.21052631578948], [375.0, 126.2777777777778], [376.0, 151.0], [382.0, 119.5], [383.0, 103.57142857142858], [380.0, 104.66666666666667], [381.0, 102.11111111111111], [377.0, 122.5], [378.0, 105.5], [379.0, 108.85000000000001], [385.0, 104.83333333333333], [384.0, 118.71428571428574], [387.0, 111.40740740740739], [386.0, 101.54545454545455], [396.0, 105.25], [397.0, 103.3225806451613], [398.0, 109.13333333333334], [399.0, 108.9090909090909], [388.0, 102.28571428571428], [389.0, 107.0], [390.0, 107.25], [391.0, 105.0], [392.0, 103.0], [393.0, 104.41666666666666], [394.0, 102.6], [395.0, 104.5], [401.0, 106.0], [400.0, 106.66666666666666], [402.0, 103.49999999999999], [403.0, 109.2], [404.0, 109.0], [405.0, 106.0], [406.0, 108.27027027027029], [407.0, 101.33333333333334], [408.0, 114.0], [414.0, 110.95454545454545], [415.0, 101.42857142857143], [412.0, 110.2], [413.0, 104.43750000000001], [409.0, 104.83333333333333], [410.0, 105.55000000000001], [411.0, 111.52941176470588], [417.0, 109.33333333333333], [416.0, 104.90909090909092], [418.0, 103.39999999999999], [419.0, 102.20689655172416], [420.0, 105.92307692307692], [421.0, 111.24999999999999], [422.0, 114.0], [423.0, 107.58000000000004], [424.0, 118.91666666666667], [430.0, 109.85714285714285], [431.0, 111.73333333333333], [428.0, 106.875], [429.0, 105.66666666666667], [425.0, 126.0], [426.0, 114.8], [427.0, 108.25], [433.0, 115.33333333333333], [432.0, 105.52380952380953], [434.0, 118.30769230769232], [435.0, 109.07142857142857], [436.0, 108.76923076923077], [437.0, 117.0], [438.0, 120.1], [439.0, 115.54545454545455], [440.0, 104.88888888888887], [446.0, 104.3809523809524], [447.0, 106.0], [444.0, 137.875], [445.0, 122.0], [441.0, 106.20833333333336], [442.0, 104.32432432432432], [443.0, 107.8125], [449.0, 108.53846153846153], [448.0, 105.45454545454545], [450.0, 103.6], [451.0, 107.33333333333333], [452.0, 109.25641025641026], [453.0, 102.77777777777777], [454.0, 106.00000000000001], [455.0, 102.00000000000001], [456.0, 108.0], [462.0, 111.07142857142857], [463.0, 105.81578947368422], [460.0, 102.62499999999999], [461.0, 108.0], [457.0, 128.35], [458.0, 116.18181818181819], [459.0, 106.91666666666666], [465.0, 106.2], [464.0, 110.38888888888889], [466.0, 102.8], [467.0, 115.13333333333334], [468.0, 104.66666666666667], [469.0, 110.8], [470.0, 106.0625], [471.0, 108.66666666666666], [472.0, 111.33333333333333], [479.0, 103.12499999999997], [478.0, 102.33333333333333], [476.0, 105.88235294117646], [477.0, 103.42857142857144], [473.0, 102.90909090909092], [474.0, 102.33333333333334], [475.0, 109.99999999999999], [481.0, 103.11111111111111], [480.0, 101.82758620689657], [482.0, 118.35000000000001], [483.0, 111.30769230769232], [484.0, 105.91304347826089], [485.0, 102.52631578947367], [486.0, 107.17647058823528], [487.0, 109.33333333333336], [489.0, 105.62500000000001], [495.0, 116.88], [488.0, 101.0], [493.0, 102.375], [492.0, 101.0], [494.0, 108.28571428571429], [490.0, 113.66666666666667], [491.0, 112.4782608695652], [497.0, 106.66666666666667], [496.0, 109.81818181818181], [498.0, 103.66666666666666], [499.0, 119.6470588235294], [500.0, 108.86206896551724], [501.0, 104.67241379310344], [502.0, 107.6923076923077], [503.0, 113.0], [504.0, 107.86666666666667], [510.0, 110.69565217391305], [511.0, 108.33333333333334], [508.0, 102.35714285714286], [509.0, 104.47619047619047], [505.0, 111.92307692307692], [506.0, 102.7272727272727], [507.0, 110.25], [514.0, 106.0], [512.0, 125.2857142857143], [526.0, 111.38461538461539], [524.0, 105.68421052631578], [516.0, 103.24137931034483], [518.0, 108.89999999999998], [528.0, 104.19999999999999], [542.0, 108.31428571428573], [540.0, 109.04166666666669], [538.0, 110.14285714285714], [536.0, 111.85714285714286], [530.0, 109.14285714285714], [532.0, 103.3076923076923], [534.0, 103.78947368421053], [522.0, 109.63636363636364], [520.0, 101.28571428571429], [546.0, 105.37931034482757], [550.0, 108.6], [544.0, 107.27777777777776], [558.0, 110.0], [556.0, 103.85714285714285], [554.0, 105.93750000000001], [548.0, 103.61538461538461], [568.0, 118.125], [570.0, 115.0], [572.0, 117.0], [574.0, 106.5], [560.0, 106.36363636363637], [562.0, 101.57142857142856], [564.0, 107.0], [566.0, 110.28846153846155], [552.0, 118.31707317073169], [578.0, 104.46153846153847], [576.0, 106.52631578947368], [590.0, 108.8], [588.0, 107.66666666666667], [580.0, 108.66666666666667], [582.0, 103.49999999999999], [592.0, 112.8181818181818], [594.0, 101.34782608695653], [606.0, 107.61538461538461], [602.0, 140.53846153846155], [604.0, 101.05263157894737], [600.0, 122.0], [596.0, 114.47058823529412], [598.0, 113.87804878048779], [584.0, 115.3], [586.0, 117.66666666666666], [612.0, 112.82352941176471], [614.0, 119.66], [608.0, 109.57142857142857], [620.0, 109.54545454545453], [622.0, 101.0], [618.0, 126.93023255813952], [610.0, 113.43478260869567], [632.0, 102.86486486486487], [634.0, 116.44444444444444], [636.0, 106.47727272727273], [638.0, 117.96774193548389], [624.0, 107.11363636363639], [626.0, 124.8], [630.0, 118.56], [616.0, 157.0], [646.0, 104.75], [640.0, 102.83333333333331], [654.0, 106.13888888888889], [652.0, 117.4], [650.0, 116.66666666666667], [642.0, 127.57142857142857], [644.0, 101.0], [664.0, 120.78947368421052], [666.0, 101.0], [668.0, 114.78571428571428], [670.0, 120.05882352941177], [656.0, 101.36842105263158], [658.0, 116.22222222222223], [660.0, 110.73333333333333], [662.0, 122.90909090909093], [648.0, 125.41025641025645], [676.0, 110.88888888888889], [678.0, 123.4647887323944], [672.0, 107.47619047619048], [686.0, 113.1], [684.0, 104.6938775510204], [674.0, 102.0], [696.0, 142.97560975609753], [698.0, 142.3888888888889], [700.0, 130.12500000000003], [688.0, 133.14285714285717], [702.0, 101.5], [690.0, 112.04761904761904], [692.0, 121.8], [694.0, 101.71428571428572], [680.0, 103.27272727272727], [682.0, 101.39130434782608], [732.0, 106.8888888888889], [708.0, 106.14814814814814], [718.0, 129.37037037037038], [706.0, 101.66666666666667], [704.0, 101.53846153846153], [716.0, 101.29411764705881], [710.0, 109.11904761904763], [720.0, 125.0], [722.0, 101.43750000000001], [734.0, 101.6], [728.0, 128.94736842105263], [730.0, 101.77777777777777], [724.0, 120.70967741935485], [726.0, 115.95555555555553], [712.0, 116.52631578947366], [714.0, 108.72727272727273], [760.0, 114.18181818181819], [736.0, 140.0], [738.0, 118.625], [740.0, 114.11111111111113], [742.0, 101.75], [762.0, 111.325], [764.0, 124.5], [766.0, 228.6], [752.0, 106.33333333333334], [754.0, 109.86666666666667], [756.0, 132.45833333333334], [758.0, 101.20000000000003], [750.0, 165.42105263157896], [748.0, 101.6], [746.0, 101.5], [744.0, 101.77777777777777], [770.0, 112.18181818181819], [774.0, 126.39215686274511], [768.0, 113.8], [782.0, 118.92000000000002], [780.0, 111.42105263157895], [778.0, 133.36363636363637], [772.0, 133.73684210526315], [792.0, 123.4], [794.0, 118.16000000000003], [796.0, 129.0666666666667], [798.0, 115.27777777777777], [784.0, 123.0], [786.0, 114.8918918918919], [788.0, 120.33333333333334], [790.0, 117.57142857142856], [776.0, 111.1875], [802.0, 123.14999999999998], [800.0, 116.0], [814.0, 108.70588235294116], [812.0, 106.78260869565217], [804.0, 125.54166666666664], [806.0, 101.30769230769229], [824.0, 108.46153846153847], [826.0, 112.00000000000003], [828.0, 129.6578947368421], [830.0, 114.13333333333334], [816.0, 123.93333333333334], [818.0, 102.3793103448276], [820.0, 105.88235294117646], [822.0, 118.0289855072464], [810.0, 120.41935483870971], [808.0, 101.38775510204081], [838.0, 104.72222222222223], [832.0, 110.00000000000001], [844.0, 103.84313725490196], [846.0, 102.5], [842.0, 106.94736842105263], [834.0, 103.81818181818181], [836.0, 101.17647058823529], [858.0, 108.65151515151517], [856.0, 101.25], [860.0, 109.47999999999998], [862.0, 122.0], [848.0, 123.65624999999999], [850.0, 102.96078431372547], [852.0, 121.05263157894737], [854.0, 120.67999999999999], [840.0, 112.58333333333334], [866.0, 109.45454545454544], [864.0, 112.42857142857142], [878.0, 135.33333333333334], [876.0, 137.37142857142854], [874.0, 108.6086956521739], [868.0, 105.44444444444444], [870.0, 104.97368421052633], [894.0, 115.36363636363637], [890.0, 101.9090909090909], [888.0, 101.55555555555556], [880.0, 101.86363636363635], [882.0, 162.14285714285717], [884.0, 116.55405405405406], [886.0, 101.41176470588235], [872.0, 105.68627450980392], [898.0, 127.43396226415089], [896.0, 111.18749999999999], [910.0, 108.2], [908.0, 106.13513513513513], [900.0, 139.0], [902.0, 104.91666666666666], [912.0, 154.33333333333334], [926.0, 120.45000000000002], [924.0, 117.76470588235294], [922.0, 117.0625], [920.0, 147.76923076923072], [914.0, 122.41463414634147], [916.0, 116.26666666666671], [918.0, 102.85714285714286], [904.0, 124.58695652173911], [906.0, 107.30434782608695], [934.0, 113.94444444444444], [928.0, 119.77777777777777], [930.0, 120.31034482758623], [932.0, 143.27272727272728], [944.0, 131.12500000000003], [958.0, 112.6140350877193], [956.0, 145.4], [954.0, 113.15789473684212], [952.0, 126.77777777777781], [946.0, 109.36363636363636], [948.0, 107.625], [950.0, 113.03030303030305], [936.0, 128.71428571428572], [940.0, 101.63333333333333], [938.0, 101.5], [942.0, 102.22222222222221], [962.0, 124.83333333333334], [960.0, 123.71568627450984], [974.0, 120.9090909090909], [972.0, 108.22727272727273], [970.0, 115.64285714285714], [964.0, 111.20879120879117], [966.0, 102.45454545454544], [976.0, 132.6410256410257], [990.0, 103.0], [988.0, 108.97560975609755], [986.0, 109.53333333333335], [984.0, 114.02941176470588], [978.0, 107.81967213114753], [980.0, 111.46666666666667], [982.0, 102.32857142857141], [968.0, 111.58139534883716], [998.0, 101.5], [992.0, 102.15384615384615], [1006.0, 103.29032258064515], [1004.0, 102.78571428571428], [1002.0, 102.48717948717949], [996.0, 115.38235294117646], [994.0, 101.95744680851065], [1016.0, 115.76190476190476], [1018.0, 109.7560975609756], [1020.0, 102.43478260869567], [1022.0, 111.80000000000003], [1008.0, 104.02941176470588], [1010.0, 102.36000000000001], [1012.0, 102.8695652173913], [1014.0, 103.5873015873016], [1000.0, 102.63157894736841], [1024.0, 107.56410256410258], [1032.0, 108.94827586206895], [1036.0, 120.53658536585368], [1028.0, 116.58139534883719], [1052.0, 113.0], [1048.0, 116.51351351351353], [1044.0, 103.79999999999998], [1040.0, 111.70833333333334], [1072.0, 105.6829268292683], [1076.0, 103.0], [1080.0, 103.2043010752688], [1084.0, 106.8125], [1056.0, 102.53846153846156], [1060.0, 102.078125], [1064.0, 102.30357142857139], [1068.0, 102.91999999999999], [1092.0, 104.07407407407406], [1088.0, 103.23999999999997], [1116.0, 101.65853658536588], [1112.0, 102.71875], [1108.0, 102.23529411764707], [1104.0, 103.30357142857143], [1096.0, 104.24390243902444], [1100.0, 103.75000000000001], [1120.0, 101.71428571428571], [1148.0, 103.16666666666667], [1144.0, 104.41666666666666], [1140.0, 104.18367346938776], [1136.0, 102.63636363636363], [1124.0, 102.11627906976743], [1128.0, 103.79411764705883], [1132.0, 103.18181818181819], [1156.0, 103.10000000000001], [1152.0, 103.44943820224718], [1180.0, 102.01249999999997], [1176.0, 101.91176470588233], [1172.0, 105.0], [1160.0, 103.4848484848485], [1164.0, 103.44444444444447], [1184.0, 102.87234042553189], [1212.0, 103.9642857142857], [1208.0, 105.63636363636363], [1204.0, 104.64406779661016], [1200.0, 107.3030303030303], [1188.0, 101.88888888888889], [1192.0, 102.92499999999997], [1196.0, 108.8], [1168.0, 105.1923076923077], [1220.0, 104.70270270270271], [1216.0, 105.2608695652174], [1244.0, 103.63043478260869], [1240.0, 105.47058823529413], [1224.0, 103.13333333333333], [1228.0, 102.83333333333333], [1272.0, 119.8064516129032], [1276.0, 106.0], [1260.0, 101.24999999999999], [1256.0, 101.0], [1248.0, 101.41666666666666], [1268.0, 132.0793650793651], [1264.0, 114.96774193548387], [1236.0, 103.51785714285712], [1232.0, 112.875], [1288.0, 106.13333333333335], [1280.0, 111.2954545454545], [1304.0, 107.13815789473682], [1308.0, 101.65217391304348], [1284.0, 108.03333333333332], [1292.0, 105.07407407407405], [1312.0, 106.66666666666666], [1340.0, 121.9], [1336.0, 115.72727272727272], [1332.0, 107.87037037037038], [1328.0, 115.71764705882356], [1316.0, 108.63157894736842], [1320.0, 105.97222222222224], [1324.0, 112.0], [1300.0, 113.53571428571429], [1296.0, 105.86666666666666], [1348.0, 113.26865671641795], [1344.0, 111.51923076923076], [1372.0, 102.15000000000002], [1368.0, 102.0], [1364.0, 101.36363636363636], [1352.0, 114.73076923076921], [1356.0, 129.5769230769231], [1376.0, 102.6304347826087], [1404.0, 102.44444444444441], [1400.0, 105.49275362318842], [1396.0, 105.70454545454545], [1392.0, 107.61904761904762], [1380.0, 103.52380952380953], [1384.0, 104.70588235294119], [1388.0, 105.70000000000002], [1360.0, 106.4857142857143], [1412.0, 104.92073170731703], [1408.0, 109.82926829268293], [1436.0, 104.45161290322581], [1432.0, 101.93333333333332], [1428.0, 102.68421052631578], [1416.0, 106.56666666666665], [1420.0, 104.0], [1440.0, 106.92592592592592], [1468.0, 105.12500000000003], [1464.0, 104.81632653061224], [1460.0, 105.13333333333335], [1456.0, 109.15], [1444.0, 101.75000000000001], [1448.0, 106.83749999999999], [1452.0, 104.12121212121212], [1424.0, 102.43478260869563], [1476.0, 106.18918918918918], [1472.0, 107.00000000000001], [1500.0, 103.76923076923077], [1496.0, 101.8], [1492.0, 101.56962025316454], [1480.0, 102.37096774193546], [1484.0, 103.62857142857142], [1504.0, 102.89552238805969], [1532.0, 102.13636363636364], [1528.0, 108.35245901639345], [1524.0, 106.75], [1520.0, 108.8], [1508.0, 102.91666666666667], [1512.0, 108.62264150943395], [1516.0, 106.51470588235293], [1488.0, 103.04000000000002], [1584.0, 128.98666666666674], [1560.0, 102.0], [1536.0, 112.52631578947368], [1540.0, 103.33333333333333], [1544.0, 102.0], [1568.0, 114.65306122448978], [1596.0, 107.5], [1592.0, 115.81196581196582], [1588.0, 113.94594594594594], [1572.0, 124.10526315789473], [1576.0, 114.6530612244898], [1580.0, 101.78571428571429], [1552.0, 132.15476190476193], [1556.0, 102.00000000000001], [1564.0, 102.23684210526314], [1604.0, 107.34285714285716], [1600.0, 118.03703703703702], [1628.0, 106.15384615384616], [1624.0, 113.70270270270271], [1608.0, 104.42857142857142], [1612.0, 113.4], [1632.0, 117.0], [1660.0, 105.08108108108108], [1656.0, 101.67741935483873], [1652.0, 119.39999999999999], [1648.0, 116.69230769230771], [1636.0, 118.67391304347831], [1640.0, 109.84523809523807], [1644.0, 112.41025641025642], [1616.0, 110.87931034482759], [1620.0, 101.35714285714286], [1676.0, 107.22222222222221], [1668.0, 114.62121212121211], [1692.0, 112.2037037037037], [1664.0, 101.83333333333333], [1688.0, 109.59999999999998], [1684.0, 112.94915254237289], [1672.0, 104.93478260869566], [1712.0, 111.81818181818181], [1716.0, 103.6842105263158], [1720.0, 106.65517241379311], [1724.0, 109.0], [1696.0, 106.59090909090908], [1700.0, 107.01923076923077], [1704.0, 108.5416666666667], [1708.0, 107.38461538461537], [1680.0, 104.03061224489794], [1732.0, 111.95348837209302], [1728.0, 109.31683168316832], [1756.0, 103.74999999999999], [1752.0, 124.71153846153851], [1748.0, 124.3918918918919], [1736.0, 105.23809523809524], [1740.0, 104.31428571428569], [1760.0, 148.11764705882354], [1788.0, 117.785046728972], [1784.0, 107.27777777777779], [1776.0, 102.10344827586209], [1780.0, 121.35714285714283], [1764.0, 128.90909090909093], [1768.0, 107.94736842105263], [1772.0, 107.07692307692308], [1744.0, 104.85714285714286], [1844.0, 164.63636363636365], [1840.0, 125.00000000000001], [1800.0, 138.1612903225806], [1792.0, 102.3157894736842], [1804.0, 112.28571428571429], [1848.0, 163.51351351351346], [1852.0, 120.76923076923076], [1824.0, 104.97674418604652], [1828.0, 115.49999999999999], [1836.0, 131.66666666666663], [1832.0, 103.7777777777778], [1808.0, 103.76470588235294], [1816.0, 102.0], [1812.0, 101.0], [1820.0, 119.24999999999997], [1860.0, 115.91304347826086], [1856.0, 115.5882352941177], [1884.0, 118.0], [1880.0, 112.21621621621621], [1864.0, 137.3333333333333], [1868.0, 101.88888888888889], [1904.0, 125.15384615384616], [1908.0, 119.52941176470588], [1912.0, 224.0114942528735], [1916.0, 169.2452830188679], [1888.0, 103.6111111111111], [1892.0, 116.67261904761904], [1896.0, 119.85526315789473], [1900.0, 126.38983050847457], [1872.0, 123.17857142857146], [1876.0, 117.85245901639345], [1924.0, 270.55263157894746], [1920.0, 175.6769230769231], [1948.0, 150.68484848484852], [1944.0, 154.70967741935485], [1940.0, 201.8163265306122], [1928.0, 171.9], [1932.0, 235.54545454545453], [1952.0, 113.87234042553192], [1980.0, 107.11111111111111], [1976.0, 164.30434782608697], [1972.0, 110.78571428571429], [1968.0, 144.15624999999997], [1956.0, 127.40540540540542], [1960.0, 172.17708333333331], [1964.0, 165.02083333333334], [1936.0, 171.5363636363637], [1984.0, 106.77272727272725], [1988.0, 103.303664921466], [1992.0, 105.78125000000001], [1996.0, 108.22580645161291], [2000.0, 104.72153894576834], [1029.0, 108.2340425531915], [1025.0, 110.15094339622641], [1053.0, 108.54545454545456], [1049.0, 114.68181818181819], [1045.0, 106.71428571428572], [1041.0, 109.53846153846153], [1033.0, 108.12500000000003], [1037.0, 112.19565217391305], [1073.0, 105.63636363636363], [1077.0, 106.70588235294116], [1081.0, 104.42666666666668], [1085.0, 106.44736842105263], [1057.0, 103.96428571428571], [1061.0, 103.22222222222223], [1065.0, 103.61538461538461], [1069.0, 104.1388888888889], [1089.0, 108.70731707317071], [1117.0, 102.45000000000002], [1113.0, 102.68750000000001], [1109.0, 103.14999999999999], [1105.0, 103.16666666666666], [1093.0, 101.78947368421052], [1097.0, 103.68965517241378], [1101.0, 104.37499999999999], [1145.0, 103.73333333333335], [1149.0, 103.53658536585368], [1141.0, 103.78571428571429], [1137.0, 103.71999999999998], [1121.0, 102.0], [1125.0, 104.8181818181818], [1129.0, 105.78571428571428], [1133.0, 103.33333333333333], [1157.0, 103.39130434782606], [1153.0, 102.46969696969695], [1181.0, 103.0181818181818], [1177.0, 102.30232558139534], [1173.0, 101.28571428571429], [1161.0, 104.53846153846155], [1165.0, 101.67567567567568], [1185.0, 103.23529411764707], [1213.0, 106.25], [1209.0, 106.65625000000001], [1205.0, 104.82352941176471], [1201.0, 106.11999999999999], [1189.0, 103.04444444444445], [1193.0, 104.81818181818181], [1197.0, 105.31034482758619], [1169.0, 102.2], [1221.0, 104.125], [1217.0, 105.09374999999997], [1245.0, 106.9], [1241.0, 102.64705882352939], [1237.0, 105.2], [1225.0, 103.53846153846153], [1229.0, 106.49999999999999], [1261.0, 116.0], [1253.0, 101.23529411764706], [1249.0, 101.25], [1265.0, 121.47222222222223], [1269.0, 120.21167883211679], [1273.0, 120.04545454545452], [1277.0, 103.5], [1233.0, 102.41379310344827], [1293.0, 109.40540540540539], [1281.0, 111.04347826086956], [1285.0, 108.66666666666667], [1289.0, 113.08474576271185], [1329.0, 113.67307692307692], [1333.0, 113.13636363636364], [1337.0, 119.39285714285717], [1341.0, 120.16071428571428], [1313.0, 101.84523809523812], [1317.0, 103.96226415094341], [1321.0, 107.63636363636364], [1325.0, 117.41176470588236], [1297.0, 109.3846153846154], [1305.0, 101.5681818181818], [1301.0, 106.75], [1309.0, 101.34482758620688], [1349.0, 125.10714285714288], [1345.0, 106.40000000000002], [1373.0, 102.33333333333336], [1369.0, 101.71874999999999], [1365.0, 101.88172043010755], [1353.0, 123.39215686274505], [1357.0, 109.12500000000001], [1377.0, 105.55102040816325], [1405.0, 105.87999999999998], [1401.0, 108.23333333333335], [1397.0, 105.53448275862073], [1393.0, 106.94736842105263], [1381.0, 104.6774193548387], [1385.0, 104.03448275862071], [1389.0, 102.95121951219511], [1361.0, 101.92307692307692], [1413.0, 109.86956521739127], [1409.0, 106.11538461538463], [1437.0, 103.00000000000003], [1433.0, 102.29729729729728], [1429.0, 102.41269841269843], [1417.0, 109.26530612244895], [1421.0, 108.28], [1441.0, 103.58620689655173], [1469.0, 103.01612903225806], [1465.0, 102.375], [1461.0, 106.95833333333334], [1457.0, 103.08247422680412], [1445.0, 103.88372093023256], [1449.0, 103.61538461538461], [1453.0, 107.1685393258427], [1425.0, 102.33333333333334], [1477.0, 103.4], [1473.0, 107.66666666666669], [1501.0, 101.76288659793816], [1497.0, 106.40384615384617], [1493.0, 104.40909090909095], [1481.0, 102.10810810810813], [1485.0, 103.2894736842105], [1505.0, 102.375], [1533.0, 102.51111111111112], [1529.0, 107.37837837837834], [1525.0, 107.125], [1521.0, 107.75862068965515], [1509.0, 105.3653846153846], [1513.0, 103.08620689655174], [1517.0, 104.07142857142854], [1489.0, 105.40259740259742], [1589.0, 107.12000000000002], [1537.0, 105.40384615384612], [1565.0, 123.29411764705881], [1541.0, 102.30357142857143], [1545.0, 101.21428571428571], [1569.0, 102.03125000000001], [1597.0, 103.46153846153847], [1593.0, 103.31578947368419], [1585.0, 109.90384615384613], [1549.0, 101.54545454545453], [1573.0, 112.50561797752809], [1577.0, 111.68571428571427], [1581.0, 105.92682926829265], [1553.0, 125.83673469387755], [1557.0, 115.73214285714285], [1561.0, 103.20833333333333], [1605.0, 102.98039215686275], [1601.0, 111.01639344262298], [1629.0, 109.33928571428574], [1625.0, 114.31111111111109], [1621.0, 116.78571428571428], [1609.0, 107.07575757575758], [1613.0, 115.36470588235292], [1633.0, 107.79365079365074], [1661.0, 102.74193548387095], [1657.0, 106.97260273972599], [1653.0, 111.80000000000001], [1649.0, 123.3333333333333], [1637.0, 118.78378378378379], [1641.0, 115.33783783783785], [1645.0, 129.62499999999997], [1617.0, 124.59677419354841], [1669.0, 107.73913043478262], [1665.0, 113.3939393939394], [1693.0, 105.1764705882353], [1689.0, 103.73770491803279], [1685.0, 102.44444444444444], [1673.0, 103.53571428571429], [1677.0, 104.99999999999999], [1713.0, 103.52000000000001], [1717.0, 111.82051282051283], [1721.0, 106.42857142857144], [1725.0, 112.45714285714284], [1697.0, 108.3137254901961], [1701.0, 108.38709677419352], [1705.0, 111.57142857142858], [1709.0, 107.97826086956522], [1681.0, 109.73469387755101], [1733.0, 111.0], [1729.0, 108.08333333333333], [1757.0, 102.1219512195122], [1753.0, 111.47222222222221], [1749.0, 111.43243243243244], [1737.0, 105.2], [1741.0, 104.83333333333334], [1761.0, 131.78409090909093], [1789.0, 112.98148148148148], [1785.0, 104.0], [1781.0, 113.37500000000003], [1777.0, 123.12264150943393], [1765.0, 118.15384615384615], [1773.0, 114.91666666666667], [1769.0, 102.0], [1745.0, 102.86666666666666], [1845.0, 121.4857142857143], [1793.0, 124.35714285714285], [1801.0, 102.5], [1797.0, 102.25], [1805.0, 104.04545454545453], [1841.0, 134.9090909090909], [1849.0, 125.53599999999992], [1853.0, 154.06451612903228], [1825.0, 116.92307692307692], [1829.0, 129.34883720930227], [1833.0, 118.38461538461539], [1837.0, 145.74999999999994], [1809.0, 106.13636363636363], [1817.0, 101.72972972972974], [1813.0, 101.0], [1821.0, 121.13888888888887], [1861.0, 132.36363636363637], [1857.0, 130.8666666666666], [1885.0, 117.23529411764707], [1881.0, 103.75862068965515], [1877.0, 106.94736842105263], [1865.0, 112.33333333333331], [1869.0, 102.3], [1905.0, 114.51249999999999], [1909.0, 128.2692307692308], [1913.0, 146.80555555555554], [1917.0, 262.39490445859866], [1889.0, 105.52631578947367], [1893.0, 114.31578947368422], [1897.0, 122.59615384615381], [1901.0, 105.23076923076924], [1873.0, 114.21052631578948], [1925.0, 188.0], [1921.0, 195.34532374100715], [1949.0, 172.69565217391303], [1945.0, 128.72340425531917], [1941.0, 213.6842105263158], [1929.0, 269.00826446280985], [1933.0, 163.3406593406594], [1981.0, 105.97435897435896], [1953.0, 218.4], [1977.0, 133.44000000000003], [1973.0, 125.6923076923077], [1969.0, 155.47586206896543], [1957.0, 179.6629213483147], [1961.0, 110.6875], [1965.0, 143.21212121212125], [1937.0, 119.1764705882353], [1985.0, 109.67391304347824], [1989.0, 110.4782608695652], [1993.0, 120.21794871794877], [1997.0, 110.36363636363639], [515.0, 106.0], [527.0, 108.35], [525.0, 107.125], [523.0, 108.875], [513.0, 112.04545454545456], [517.0, 105.625], [519.0, 111.96153846153847], [543.0, 116.47619047619047], [541.0, 111.70370370370371], [539.0, 101.54347826086958], [537.0, 119.22222222222221], [529.0, 127.91176470588235], [531.0, 110.16666666666667], [533.0, 103.53333333333333], [535.0, 102.0], [521.0, 103.59459459459458], [547.0, 105.99999999999999], [559.0, 104.67692307692309], [545.0, 101.14285714285715], [557.0, 102.4], [555.0, 117.49122807017541], [549.0, 107.83333333333333], [551.0, 109.11764705882354], [569.0, 112.5909090909091], [571.0, 110.0], [573.0, 108.91836734693878], [575.0, 101.4], [561.0, 105.5], [563.0, 109.86666666666666], [565.0, 113.80952380952381], [567.0, 115.88235294117648], [553.0, 108.94871794871796], [583.0, 113.23809523809524], [579.0, 110.32142857142856], [591.0, 116.875], [587.0, 122.67999999999999], [585.0, 101.1875], [589.0, 101.44444444444444], [577.0, 103.828125], [581.0, 107.75], [607.0, 105.5], [595.0, 102.0], [593.0, 101.26666666666667], [605.0, 105.37931034482759], [603.0, 107.19999999999999], [601.0, 108.74576271186442], [597.0, 110.00000000000001], [599.0, 104.13953488372094], [613.0, 102.60000000000001], [609.0, 124.39999999999999], [611.0, 101.42857142857144], [623.0, 136.7037037037037], [619.0, 115.88235294117646], [621.0, 101.89999999999998], [615.0, 121.71428571428572], [633.0, 131.58333333333334], [635.0, 106.57142857142857], [637.0, 131.57446808510642], [639.0, 104.91176470588236], [625.0, 101.2], [627.0, 119.21428571428572], [629.0, 119.66666666666667], [631.0, 115.0909090909091], [617.0, 104.29032258064518], [643.0, 107.96296296296296], [641.0, 106.66666666666666], [655.0, 101.64285714285715], [653.0, 118.85714285714285], [651.0, 115.22857142857143], [645.0, 113.22222222222223], [647.0, 111.99999999999999], [665.0, 132.9090909090909], [667.0, 116.57142857142857], [669.0, 115.0952380952381], [671.0, 123.39285714285712], [657.0, 131.7297297297297], [659.0, 101.16666666666667], [661.0, 116.84615384615384], [663.0, 104.57142857142857], [649.0, 138.78571428571428], [677.0, 109.75], [673.0, 116.57894736842105], [675.0, 101.375], [687.0, 112.0], [685.0, 108.90909090909089], [683.0, 136.4], [679.0, 124.0909090909091], [697.0, 166.5], [699.0, 166.0689655172414], [701.0, 183.45454545454544], [703.0, 104.58333333333333], [689.0, 146.26666666666668], [691.0, 125.8409090909091], [693.0, 106.18518518518516], [695.0, 101.47826086956522], [681.0, 103.62499999999999], [735.0, 122.05405405405405], [709.0, 137.0344827586207], [705.0, 106.81818181818183], [707.0, 101.28571428571429], [729.0, 134.3684210526316], [711.0, 101.0], [733.0, 102.0], [731.0, 101.0], [723.0, 120.32142857142856], [721.0, 101.0], [725.0, 140.54838709677423], [727.0, 138.68085106382978], [713.0, 115.00000000000003], [717.0, 101.16666666666667], [715.0, 102.25000000000001], [719.0, 119.78048780487805], [741.0, 126.125], [737.0, 133.4181818181818], [751.0, 140.62499999999997], [739.0, 134.12499999999997], [743.0, 123.2], [761.0, 112.57575757575756], [763.0, 105.19047619047619], [765.0, 109.37333333333338], [767.0, 108.08000000000001], [753.0, 107.33333333333333], [757.0, 112.69230769230771], [755.0, 101.11111111111113], [759.0, 110.10000000000001], [749.0, 122.92105263157895], [747.0, 101.375], [745.0, 101.4146341463415], [771.0, 129.04166666666663], [783.0, 105.4375], [769.0, 101.6], [781.0, 104.38461538461539], [779.0, 108.26666666666667], [773.0, 102.55555555555554], [775.0, 115.375], [793.0, 148.88235294117644], [795.0, 109.4], [797.0, 111.52631578947371], [799.0, 115.8], [785.0, 107.83999999999999], [787.0, 111.94827586206898], [789.0, 118.16666666666664], [791.0, 115.53846153846152], [777.0, 128.41666666666669], [805.0, 109.09302325581396], [801.0, 136.58064516129036], [815.0, 108.0], [813.0, 103.20689655172413], [811.0, 111.8846153846154], [803.0, 128.99999999999997], [807.0, 112.15384615384616], [827.0, 101.75757575757575], [825.0, 101.33333333333334], [829.0, 120.74509803921569], [831.0, 110.1], [817.0, 102.93548387096774], [819.0, 112.47999999999999], [821.0, 130.99999999999994], [823.0, 126.94444444444447], [809.0, 133.60606060606062], [835.0, 107.3030303030303], [833.0, 105.125], [847.0, 115.41666666666667], [845.0, 107.80000000000001], [843.0, 104.5945945945946], [837.0, 110.41379310344827], [839.0, 106.63636363636361], [857.0, 105.23076923076923], [859.0, 104.66666666666667], [861.0, 128.24], [863.0, 101.57142857142857], [849.0, 105.38709677419354], [853.0, 113.58333333333334], [851.0, 101.33333333333334], [855.0, 107.21428571428568], [841.0, 119.51724137931033], [869.0, 119.0], [865.0, 113.26829268292681], [867.0, 101.5], [879.0, 124.71999999999997], [877.0, 122.9811320754717], [875.0, 113.47272727272725], [871.0, 112.0], [889.0, 101.0], [893.0, 101.33333333333334], [891.0, 101.5], [895.0, 134.0], [881.0, 158.5263157894737], [883.0, 128.47222222222226], [885.0, 104.44444444444444], [887.0, 101.55555555555556], [873.0, 123.42857142857142], [899.0, 108.35], [911.0, 105.49999999999999], [909.0, 113.64285714285712], [907.0, 117.51428571428572], [905.0, 101.28571428571428], [897.0, 130.0285714285714], [901.0, 108.57142857142856], [903.0, 106.11538461538461], [927.0, 127.89655172413794], [925.0, 115.875], [923.0, 107.43589743589745], [921.0, 106.20930232558139], [913.0, 132.3846153846154], [915.0, 136.39999999999998], [917.0, 109.03030303030305], [919.0, 101.89999999999999], [935.0, 113.6607142857143], [931.0, 112.0], [929.0, 113.7], [933.0, 121.86666666666666], [959.0, 122.84313725490195], [957.0, 128.79166666666669], [955.0, 132.26666666666665], [953.0, 134.83333333333331], [945.0, 105.87179487179486], [947.0, 117.50000000000001], [949.0, 127.83333333333334], [951.0, 136.07142857142858], [937.0, 108.5], [941.0, 101.4], [939.0, 101.4], [943.0, 102.28205128205126], [963.0, 109.11627906976742], [975.0, 118.3611111111111], [973.0, 110.375], [971.0, 106.0], [961.0, 131.5081967213115], [965.0, 105.67441860465117], [967.0, 124.55555555555554], [991.0, 104.89473684210526], [989.0, 102.85714285714285], [987.0, 105.22388059701494], [985.0, 106.05128205128207], [977.0, 113.56249999999999], [979.0, 112.84444444444446], [981.0, 103.43902439024389], [983.0, 106.90476190476191], [969.0, 120.74025974025976], [995.0, 103.16666666666666], [993.0, 107.33333333333331], [1007.0, 104.41666666666666], [1005.0, 102.76666666666668], [1003.0, 103.0952380952381], [997.0, 102.57142857142857], [999.0, 104.14285714285714], [1017.0, 104.50943396226414], [1019.0, 103.26666666666667], [1021.0, 108.51428571428572], [1023.0, 110.64383561643834], [1009.0, 104.64285714285714], [1011.0, 106.0], [1013.0, 104.27500000000002], [1015.0, 112.81818181818181], [1001.0, 102.5], [1030.0, 114.23076923076923], [1054.0, 102.22448979591837], [1026.0, 101.42857142857143], [1050.0, 102.26315789473684], [1046.0, 113.80434782608697], [1042.0, 117.50000000000001], [1034.0, 113.82352941176471], [1038.0, 108.375], [1074.0, 104.88461538461539], [1078.0, 105.55000000000001], [1082.0, 106.5], [1086.0, 103.36666666666666], [1058.0, 101.55555555555556], [1062.0, 103.95833333333331], [1066.0, 102.54166666666666], [1070.0, 104.71428571428571], [1094.0, 106.38709677419355], [1090.0, 104.9830508474576], [1118.0, 101.88235294117648], [1114.0, 101.87500000000001], [1110.0, 104.76271186440681], [1106.0, 103.41463414634148], [1098.0, 102.98076923076923], [1102.0, 107.07692307692308], [1150.0, 103.86956521739128], [1146.0, 104.15151515151516], [1142.0, 103.39473684210526], [1138.0, 104.36842105263158], [1122.0, 103.25000000000003], [1126.0, 102.74358974358972], [1130.0, 104.62068965517241], [1134.0, 104.45714285714286], [1158.0, 101.52173913043478], [1182.0, 102.95833333333331], [1178.0, 103.00000000000001], [1174.0, 102.18181818181817], [1154.0, 105.14285714285712], [1162.0, 102.1341463414634], [1166.0, 102.46153846153847], [1214.0, 105.88], [1210.0, 103.82105263157894], [1206.0, 103.65671641791046], [1202.0, 106.01428571428568], [1186.0, 103.40740740740743], [1190.0, 102.18269230769232], [1194.0, 105.61111111111111], [1198.0, 105.8695652173913], [1170.0, 102.57142857142857], [1222.0, 103.65384615384615], [1242.0, 103.625], [1238.0, 102.18309859154927], [1218.0, 107.23333333333332], [1246.0, 101.3921568627451], [1226.0, 102.6857142857143], [1230.0, 105.60000000000001], [1262.0, 121.83870967741937], [1258.0, 101.0], [1254.0, 102.0], [1250.0, 101.52941176470588], [1278.0, 124.7560975609756], [1274.0, 118.72941176470589], [1270.0, 121.96296296296298], [1266.0, 127.46703296703305], [1234.0, 103.625], [1294.0, 104.76923076923076], [1286.0, 114.52380952380953], [1302.0, 108.86363636363637], [1282.0, 112.28571428571426], [1310.0, 101.69999999999999], [1306.0, 101.14285714285715], [1290.0, 117.04504504504503], [1342.0, 110.53448275862071], [1338.0, 106.79687499999997], [1334.0, 108.08108108108107], [1330.0, 116.92500000000001], [1314.0, 102.00000000000003], [1318.0, 108.41666666666667], [1322.0, 109.2439024390244], [1326.0, 121.53333333333335], [1298.0, 120.0], [1350.0, 103.18181818181817], [1374.0, 102.31858407079646], [1370.0, 101.77777777777781], [1366.0, 101.70689655172411], [1346.0, 132.78947368421058], [1354.0, 104.25423728813558], [1358.0, 113.51239669421483], [1406.0, 108.5669291338583], [1402.0, 107.68115942028984], [1398.0, 106.35937500000001], [1394.0, 106.13043478260872], [1378.0, 102.88372093023254], [1382.0, 104.07936507936509], [1386.0, 108.17073170731706], [1390.0, 104.47169811320757], [1362.0, 101.49056603773585], [1414.0, 102.32], [1438.0, 104.79661016949154], [1434.0, 104.42857142857142], [1430.0, 101.92307692307693], [1410.0, 112.3], [1418.0, 103.40322580645163], [1422.0, 103.66666666666669], [1470.0, 105.3939393939394], [1466.0, 106.34146341463419], [1462.0, 101.61538461538461], [1458.0, 103.67999999999999], [1442.0, 102.25000000000001], [1446.0, 104.39285714285714], [1450.0, 102.15686274509804], [1454.0, 103.13333333333333], [1426.0, 101.53424657534245], [1478.0, 104.94897959183672], [1502.0, 103.40816326530613], [1498.0, 105.39024390243902], [1494.0, 104.61904761904762], [1474.0, 104.66666666666664], [1482.0, 106.16666666666666], [1486.0, 102.4615384615385], [1534.0, 107.97222222222219], [1530.0, 105.1764705882353], [1526.0, 104.84210526315789], [1522.0, 105.48076923076921], [1506.0, 102.97560975609751], [1510.0, 101.66666666666667], [1514.0, 107.39024390243902], [1518.0, 102.26771653543305], [1490.0, 102.54545454545453], [1594.0, 113.78571428571429], [1538.0, 109.82352941176471], [1566.0, 123.35714285714285], [1550.0, 108.55072463768121], [1546.0, 101.65384615384617], [1542.0, 101.43939393939395], [1586.0, 101.4705882352941], [1570.0, 117.56521739130437], [1598.0, 101.6666666666667], [1574.0, 106.62068965517243], [1578.0, 104.65929203539821], [1582.0, 108.63999999999997], [1554.0, 107.14285714285714], [1558.0, 102.37037037037037], [1562.0, 110.13235294117649], [1606.0, 108.54929577464787], [1630.0, 107.3076923076923], [1626.0, 127.16666666666666], [1622.0, 115.31578947368423], [1602.0, 103.87301587301589], [1610.0, 106.93103448275862], [1614.0, 109.9558823529412], [1662.0, 104.14285714285712], [1658.0, 110.58333333333337], [1654.0, 129.45454545454544], [1650.0, 113.83783783783784], [1634.0, 102.33333333333334], [1638.0, 108.77272727272727], [1642.0, 102.46739130434783], [1646.0, 125.98484848484843], [1618.0, 119.59090909090907], [1670.0, 101.62222222222225], [1666.0, 108.68686868686873], [1694.0, 107.47058823529412], [1690.0, 102.50000000000001], [1686.0, 106.82978723404256], [1674.0, 102.72916666666667], [1678.0, 107.8125], [1714.0, 113.2051282051282], [1718.0, 106.35416666666666], [1722.0, 105.33333333333331], [1726.0, 111.39534883720927], [1698.0, 106.953488372093], [1702.0, 107.25000000000001], [1706.0, 107.58333333333333], [1710.0, 104.32432432432434], [1682.0, 110.26666666666665], [1734.0, 113.17999999999999], [1754.0, 116.64285714285712], [1750.0, 131.8165137614679], [1730.0, 114.0625], [1758.0, 101.92156862745098], [1738.0, 112.23913043478255], [1742.0, 115.83], [1786.0, 125.99999999999999], [1782.0, 104.83333333333334], [1778.0, 101.0], [1762.0, 133.98245614035088], [1766.0, 126.4545454545454], [1770.0, 105.82000000000001], [1774.0, 105.60416666666666], [1746.0, 127.1764705882353], [1846.0, 114.73913043478262], [1794.0, 120.2272727272727], [1798.0, 105.0], [1802.0, 102.61904761904766], [1806.0, 104.8918918918919], [1842.0, 103.88888888888889], [1850.0, 125.97029702970296], [1854.0, 129.93162393162393], [1826.0, 124.57894736842107], [1830.0, 136.57272727272724], [1834.0, 146.5], [1838.0, 129.5], [1810.0, 107.5609756097561], [1818.0, 105.13333333333333], [1814.0, 101.25], [1822.0, 119.06578947368423], [1870.0, 107.75], [1858.0, 111.80769230769228], [1866.0, 102.33333333333333], [1862.0, 102.5], [1878.0, 113.69387755102042], [1886.0, 114.9135802469136], [1882.0, 108.80555555555554], [1906.0, 107.18644067796609], [1910.0, 121.40206185567008], [1914.0, 280.76923076923083], [1918.0, 228.64615384615385], [1890.0, 114.4090909090909], [1894.0, 111.61538461538463], [1898.0, 111.27586206896551], [1902.0, 103.13043478260869], [1874.0, 108.95081967213115], [1926.0, 115.47058823529412], [1950.0, 185.44444444444446], [1946.0, 211.34999999999997], [1942.0, 124.66666666666666], [1922.0, 276.49999999999994], [1930.0, 167.65853658536585], [1934.0, 203.64150943396228], [1982.0, 120.11363636363635], [1978.0, 115.46464646464646], [1974.0, 120.72222222222221], [1970.0, 131.43589743589746], [1954.0, 165.90476190476195], [1958.0, 113.85365853658531], [1962.0, 171.0769230769231], [1966.0, 156.75000000000006], [1938.0, 134.0], [1986.0, 116.1923076923077], [1994.0, 106.24675324675324], [1998.0, 102.11893203883487], [1990.0, 101.68493150684931], [1027.0, 106.78846153846155], [1055.0, 104.3421052631579], [1051.0, 102.94117647058823], [1047.0, 121.03030303030303], [1043.0, 111.87912087912088], [1031.0, 105.48], [1035.0, 104.63636363636363], [1039.0, 114.23333333333335], [1075.0, 104.37777777777777], [1079.0, 103.88461538461539], [1083.0, 101.92682926829269], [1087.0, 102.14285714285714], [1059.0, 103.63043478260867], [1063.0, 107.16666666666669], [1067.0, 102.953125], [1071.0, 102.0], [1095.0, 104.59090909090911], [1099.0, 105.08333333333333], [1091.0, 104.93750000000003], [1119.0, 102.12857142857142], [1115.0, 101.88888888888889], [1111.0, 102.33333333333331], [1107.0, 103.96428571428574], [1103.0, 102.57692307692307], [1147.0, 105.97872340425533], [1151.0, 104.0869565217391], [1143.0, 104.9787234042553], [1139.0, 104.53488372093024], [1123.0, 102.78333333333335], [1127.0, 104.3], [1131.0, 105.42222222222222], [1135.0, 104.57142857142857], [1159.0, 103.33333333333333], [1183.0, 103.04615384615386], [1179.0, 102.61538461538463], [1175.0, 102.5], [1155.0, 108.81666666666666], [1163.0, 102.76190476190476], [1167.0, 108.93749999999999], [1215.0, 103.96296296296296], [1211.0, 104.32142857142854], [1207.0, 106.44186046511626], [1203.0, 104.33333333333331], [1187.0, 104.28205128205128], [1191.0, 102.70588235294119], [1195.0, 103.87804878048779], [1199.0, 104.47727272727273], [1171.0, 103.19999999999996], [1223.0, 104.49999999999999], [1243.0, 101.78378378378378], [1239.0, 102.95238095238092], [1219.0, 103.22641509433963], [1247.0, 102.0], [1227.0, 102.45833333333333], [1231.0, 105.78571428571432], [1267.0, 134.16000000000005], [1271.0, 122.15], [1275.0, 110.66666666666667], [1279.0, 104.74468085106382], [1263.0, 113.83333333333336], [1259.0, 102.00000000000001], [1255.0, 101.0], [1251.0, 101.0], [1235.0, 105.14285714285712], [1291.0, 104.99999999999999], [1283.0, 111.0], [1311.0, 114.06666666666666], [1287.0, 110.25], [1335.0, 108.79166666666664], [1331.0, 101.42857142857143], [1295.0, 107.08333333333333], [1339.0, 125.14999999999998], [1343.0, 131.5], [1315.0, 103.43478260869564], [1319.0, 103.92424242424241], [1323.0, 111.86956521739128], [1327.0, 105.71428571428571], [1303.0, 110.45714285714286], [1299.0, 107.30434782608694], [1307.0, 101.42105263157896], [1351.0, 109.68421052631578], [1375.0, 101.46666666666667], [1371.0, 102.21739130434781], [1367.0, 101.84313725490196], [1347.0, 107.5], [1355.0, 109.66666666666667], [1359.0, 126.38372093023253], [1407.0, 109.91379310344827], [1403.0, 109.77777777777777], [1399.0, 111.19230769230768], [1395.0, 107.075], [1379.0, 104.49090909090908], [1383.0, 107.2222222222222], [1387.0, 104.73972602739724], [1391.0, 103.4375], [1363.0, 102.13978494623655], [1415.0, 104.78846153846155], [1439.0, 102.55172413793102], [1435.0, 102.38461538461537], [1431.0, 103.39622641509438], [1411.0, 104.43010752688171], [1419.0, 105.0153846153846], [1423.0, 102.5], [1471.0, 103.57638888888891], [1467.0, 103.109375], [1463.0, 107.37755102040816], [1459.0, 105.03703703703702], [1443.0, 104.02083333333334], [1447.0, 102.22580645161288], [1451.0, 103.6190476190476], [1455.0, 105.5], [1427.0, 103.29411764705884], [1479.0, 104.78431372549018], [1503.0, 102.90624999999999], [1499.0, 101.25], [1495.0, 102.30769230769232], [1475.0, 106.06521739130436], [1483.0, 103.10000000000001], [1487.0, 102.05454545454549], [1535.0, 102.55223880597015], [1531.0, 104.23333333333332], [1527.0, 103.85714285714285], [1523.0, 103.57142857142857], [1507.0, 110.63265306122447], [1511.0, 104.43750000000001], [1515.0, 108.09230769230768], [1519.0, 108.44444444444444], [1491.0, 102.42307692307689], [1551.0, 108.29761904761907], [1539.0, 105.81521739130436], [1547.0, 101.53061224489795], [1543.0, 102.125], [1559.0, 102.62499999999997], [1567.0, 114.60465116279066], [1599.0, 109.6], [1595.0, 109.95348837209305], [1591.0, 116.2121212121212], [1587.0, 125.70769230769235], [1571.0, 106.65137614678899], [1575.0, 113.14062499999999], [1583.0, 114.80392156862747], [1579.0, 101.70192307692312], [1555.0, 101.97894736842102], [1563.0, 124.39506172839513], [1607.0, 104.57142857142854], [1631.0, 122.88505747126437], [1627.0, 118.44444444444444], [1623.0, 106.21568627450985], [1603.0, 104.92592592592594], [1611.0, 108.11904761904758], [1615.0, 122.75], [1663.0, 110.6774193548387], [1659.0, 120.84482758620692], [1655.0, 123.74999999999999], [1651.0, 106.6989247311828], [1635.0, 119.46774193548387], [1643.0, 111.47222222222223], [1639.0, 101.71428571428571], [1647.0, 114.6470588235294], [1619.0, 114.92499999999998], [1675.0, 112.36764705882354], [1667.0, 102.66666666666669], [1695.0, 104.23529411764706], [1691.0, 107.44444444444444], [1687.0, 106.46153846153847], [1671.0, 112.14150943396227], [1715.0, 112.21311475409836], [1679.0, 102.21875000000001], [1719.0, 113.33333333333334], [1723.0, 115.6190476190476], [1727.0, 109.72093023255815], [1699.0, 106.95000000000002], [1703.0, 107.23255813953487], [1707.0, 111.00000000000001], [1711.0, 110.19480519480516], [1683.0, 110.24390243902437], [1735.0, 105.83636363636363], [1759.0, 139.77777777777777], [1755.0, 132.11594202898556], [1751.0, 110.0], [1731.0, 105.55263157894738], [1739.0, 102.39285714285715], [1743.0, 118.25], [1787.0, 128.84615384615384], [1791.0, 102.69999999999997], [1783.0, 105.32258064516128], [1779.0, 116.60273972602741], [1763.0, 142.8301886792453], [1767.0, 105.61904761904762], [1771.0, 105.0], [1775.0, 101.85714285714286], [1747.0, 103.37037037037038], [1847.0, 138.9340659340659], [1799.0, 106.0909090909091], [1795.0, 102.0], [1803.0, 129.43478260869566], [1807.0, 108.45283018867927], [1843.0, 103.23076923076924], [1855.0, 141.12745098039213], [1851.0, 103.2727272727273], [1827.0, 123.5], [1831.0, 127.96610169491522], [1835.0, 133.59459459459464], [1839.0, 123.9142857142857], [1811.0, 107.25000000000001], [1819.0, 104.70588235294119], [1815.0, 101.0], [1823.0, 118.25], [1867.0, 116.36363636363636], [1859.0, 108.70175438596493], [1887.0, 108.22499999999998], [1883.0, 105.35087719298244], [1879.0, 110.76785714285717], [1863.0, 123.7762237762238], [1871.0, 107.05263157894736], [1907.0, 107.03125], [1915.0, 259.23287671232873], [1911.0, 101.66666666666666], [1919.0, 231.9090909090909], [1891.0, 107.16666666666669], [1895.0, 115.0], [1899.0, 110.1029411764706], [1903.0, 116.29166666666666], [1875.0, 129.58333333333334], [1927.0, 215.43835616438352], [1951.0, 128.8026315789474], [1947.0, 154.0], [1943.0, 132.8526315789474], [1923.0, 229.67532467532462], [1931.0, 213.07547169811312], [1935.0, 133.49999999999997], [1955.0, 164.72641509433961], [1983.0, 111.79104477611939], [1979.0, 105.35135135135134], [1975.0, 138.1639344262295], [1971.0, 145.59420289855078], [1959.0, 115.25], [1963.0, 107.8], [1967.0, 149.60526315789474], [1939.0, 211.8818897637795], [1987.0, 107.46666666666664], [1991.0, 103.68421052631574], [1995.0, 102.24651162790698], [1999.0, 110.90990990991], [1.0, 102.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1892.9595950000255, 106.4614675000011]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 786666.6666666666, "minX": 1.58524344E12, "maxY": 860000.0, "series": [{"data": [[1.58524344E12, 786666.6666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58524344E12, 860000.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524344E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 106.4614675000011, "minX": 1.58524344E12, "maxY": 106.4614675000011, "series": [{"data": [[1.58524344E12, 106.4614675000011]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524344E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 106.4550025000007, "minX": 1.58524344E12, "maxY": 106.4550025000007, "series": [{"data": [[1.58524344E12, 106.4550025000007]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524344E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.10301249999999718, "minX": 1.58524344E12, "maxY": 0.10301249999999718, "series": [{"data": [[1.58524344E12, 0.10301249999999718]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524344E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 101.0, "minX": 1.58524344E12, "maxY": 1163.0, "series": [{"data": [[1.58524344E12, 1163.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58524344E12, 101.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58524344E12, 102.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58524344E12, 109.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58524344E12, 103.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524344E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 101.0, "minX": 49.0, "maxY": 125.0, "series": [{"data": [[9504.0, 102.0], [10736.0, 107.0], [49.0, 101.0], [13932.0, 114.0], [14695.0, 102.0], [1078.0, 120.0], [17038.0, 111.0], [16894.0, 102.0], [17514.0, 111.0], [18520.0, 105.0], [18492.0, 105.0], [19229.0, 103.0], [18997.0, 102.0], [19449.0, 101.0], [19256.0, 102.0], [19105.0, 102.0], [19291.0, 102.0], [19508.0, 102.0], [19738.0, 102.0], [19471.0, 102.0], [19468.0, 102.0], [19678.0, 102.0], [19774.0, 102.0], [19597.0, 102.0], [3832.0, 101.0], [5155.0, 125.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19774.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 101.0, "minX": 49.0, "maxY": 125.0, "series": [{"data": [[9504.0, 102.0], [10736.0, 107.0], [49.0, 101.0], [13932.0, 114.0], [14695.0, 102.0], [1078.0, 120.0], [17038.0, 111.0], [16894.0, 102.0], [17514.0, 111.0], [18520.0, 105.0], [18492.0, 105.0], [19229.0, 103.0], [18997.0, 102.0], [19449.0, 101.0], [19256.0, 102.0], [19105.0, 102.0], [19291.0, 102.0], [19508.0, 102.0], [19738.0, 102.0], [19471.0, 102.0], [19468.0, 102.0], [19678.0, 102.0], [19774.0, 102.0], [19597.0, 102.0], [3832.0, 101.0], [5155.0, 125.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19774.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524344E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524344E12, 6666.666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524344E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524344E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524344E12, 6666.666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524344E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524344E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524344E12, 6666.666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524344E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524344E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524344E12, 6666.666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524344E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

