/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 101.0, "minX": 0.0, "maxY": 683.0, "series": [{"data": [[0.0, 101.0], [0.1, 111.0], [0.2, 128.0], [0.3, 138.0], [0.4, 148.0], [0.5, 155.0], [0.6, 161.0], [0.7, 169.0], [0.8, 174.0], [0.9, 181.0], [1.0, 189.0], [1.1, 192.0], [1.2, 200.0], [1.3, 205.0], [1.4, 210.0], [1.5, 215.0], [1.6, 221.0], [1.7, 229.0], [1.8, 235.0], [1.9, 238.0], [2.0, 246.0], [2.1, 250.0], [2.2, 258.0], [2.3, 264.0], [2.4, 270.0], [2.5, 274.0], [2.6, 281.0], [2.7, 286.0], [2.8, 291.0], [2.9, 295.0], [3.0, 300.0], [3.1, 301.0], [3.2, 308.0], [3.3, 310.0], [3.4, 312.0], [3.5, 319.0], [3.6, 321.0], [3.7, 327.0], [3.8, 329.0], [3.9, 334.0], [4.0, 338.0], [4.1, 341.0], [4.2, 347.0], [4.3, 350.0], [4.4, 355.0], [4.5, 359.0], [4.6, 364.0], [4.7, 368.0], [4.8, 372.0], [4.9, 375.0], [5.0, 380.0], [5.1, 382.0], [5.2, 384.0], [5.3, 390.0], [5.4, 392.0], [5.5, 398.0], [5.6, 400.0], [5.7, 401.0], [5.8, 405.0], [5.9, 410.0], [6.0, 412.0], [6.1, 418.0], [6.2, 420.0], [6.3, 422.0], [6.4, 428.0], [6.5, 431.0], [6.6, 438.0], [6.7, 443.0], [6.8, 447.0], [6.9, 453.0], [7.0, 458.0], [7.1, 463.0], [7.2, 468.0], [7.3, 472.0], [7.4, 476.0], [7.5, 480.0], [7.6, 482.0], [7.7, 484.0], [7.8, 490.0], [7.9, 492.0], [8.0, 493.0], [8.1, 498.0], [8.2, 499.0], [8.3, 499.0], [8.4, 500.0], [8.5, 500.0], [8.6, 500.0], [8.7, 500.0], [8.8, 500.0], [8.9, 500.0], [9.0, 500.0], [9.1, 500.0], [9.2, 500.0], [9.3, 500.0], [9.4, 500.0], [9.5, 500.0], [9.6, 500.0], [9.7, 500.0], [9.8, 500.0], [9.9, 500.0], [10.0, 500.0], [10.1, 500.0], [10.2, 500.0], [10.3, 500.0], [10.4, 500.0], [10.5, 500.0], [10.6, 500.0], [10.7, 500.0], [10.8, 500.0], [10.9, 500.0], [11.0, 500.0], [11.1, 500.0], [11.2, 500.0], [11.3, 500.0], [11.4, 500.0], [11.5, 500.0], [11.6, 500.0], [11.7, 500.0], [11.8, 500.0], [11.9, 500.0], [12.0, 500.0], [12.1, 500.0], [12.2, 500.0], [12.3, 500.0], [12.4, 500.0], [12.5, 500.0], [12.6, 500.0], [12.7, 500.0], [12.8, 500.0], [12.9, 500.0], [13.0, 500.0], [13.1, 500.0], [13.2, 500.0], [13.3, 500.0], [13.4, 500.0], [13.5, 500.0], [13.6, 500.0], [13.7, 500.0], [13.8, 500.0], [13.9, 500.0], [14.0, 500.0], [14.1, 500.0], [14.2, 500.0], [14.3, 500.0], [14.4, 500.0], [14.5, 500.0], [14.6, 501.0], [14.7, 501.0], [14.8, 501.0], [14.9, 501.0], [15.0, 501.0], [15.1, 501.0], [15.2, 501.0], [15.3, 501.0], [15.4, 501.0], [15.5, 501.0], [15.6, 501.0], [15.7, 501.0], [15.8, 501.0], [15.9, 501.0], [16.0, 501.0], [16.1, 501.0], [16.2, 501.0], [16.3, 501.0], [16.4, 501.0], [16.5, 501.0], [16.6, 501.0], [16.7, 501.0], [16.8, 501.0], [16.9, 501.0], [17.0, 501.0], [17.1, 501.0], [17.2, 501.0], [17.3, 501.0], [17.4, 501.0], [17.5, 501.0], [17.6, 501.0], [17.7, 501.0], [17.8, 501.0], [17.9, 501.0], [18.0, 501.0], [18.1, 501.0], [18.2, 501.0], [18.3, 501.0], [18.4, 501.0], [18.5, 501.0], [18.6, 501.0], [18.7, 501.0], [18.8, 501.0], [18.9, 501.0], [19.0, 501.0], [19.1, 501.0], [19.2, 501.0], [19.3, 501.0], [19.4, 501.0], [19.5, 501.0], [19.6, 501.0], [19.7, 501.0], [19.8, 501.0], [19.9, 501.0], [20.0, 501.0], [20.1, 501.0], [20.2, 501.0], [20.3, 501.0], [20.4, 501.0], [20.5, 501.0], [20.6, 501.0], [20.7, 501.0], [20.8, 501.0], [20.9, 501.0], [21.0, 501.0], [21.1, 501.0], [21.2, 501.0], [21.3, 501.0], [21.4, 501.0], [21.5, 501.0], [21.6, 501.0], [21.7, 501.0], [21.8, 501.0], [21.9, 501.0], [22.0, 501.0], [22.1, 501.0], [22.2, 501.0], [22.3, 501.0], [22.4, 501.0], [22.5, 501.0], [22.6, 501.0], [22.7, 501.0], [22.8, 501.0], [22.9, 501.0], [23.0, 501.0], [23.1, 501.0], [23.2, 501.0], [23.3, 501.0], [23.4, 501.0], [23.5, 501.0], [23.6, 501.0], [23.7, 501.0], [23.8, 501.0], [23.9, 501.0], [24.0, 501.0], [24.1, 501.0], [24.2, 501.0], [24.3, 501.0], [24.4, 501.0], [24.5, 501.0], [24.6, 501.0], [24.7, 501.0], [24.8, 501.0], [24.9, 501.0], [25.0, 501.0], [25.1, 501.0], [25.2, 501.0], [25.3, 501.0], [25.4, 501.0], [25.5, 501.0], [25.6, 501.0], [25.7, 501.0], [25.8, 501.0], [25.9, 501.0], [26.0, 501.0], [26.1, 501.0], [26.2, 501.0], [26.3, 501.0], [26.4, 501.0], [26.5, 501.0], [26.6, 501.0], [26.7, 501.0], [26.8, 501.0], [26.9, 501.0], [27.0, 501.0], [27.1, 501.0], [27.2, 501.0], [27.3, 501.0], [27.4, 501.0], [27.5, 501.0], [27.6, 501.0], [27.7, 501.0], [27.8, 501.0], [27.9, 501.0], [28.0, 501.0], [28.1, 501.0], [28.2, 501.0], [28.3, 501.0], [28.4, 501.0], [28.5, 501.0], [28.6, 501.0], [28.7, 501.0], [28.8, 501.0], [28.9, 501.0], [29.0, 501.0], [29.1, 501.0], [29.2, 501.0], [29.3, 501.0], [29.4, 501.0], [29.5, 501.0], [29.6, 501.0], [29.7, 501.0], [29.8, 501.0], [29.9, 501.0], [30.0, 501.0], [30.1, 501.0], [30.2, 501.0], [30.3, 501.0], [30.4, 501.0], [30.5, 501.0], [30.6, 501.0], [30.7, 501.0], [30.8, 501.0], [30.9, 501.0], [31.0, 501.0], [31.1, 501.0], [31.2, 501.0], [31.3, 501.0], [31.4, 501.0], [31.5, 501.0], [31.6, 501.0], [31.7, 501.0], [31.8, 501.0], [31.9, 501.0], [32.0, 501.0], [32.1, 501.0], [32.2, 501.0], [32.3, 501.0], [32.4, 501.0], [32.5, 501.0], [32.6, 501.0], [32.7, 501.0], [32.8, 501.0], [32.9, 501.0], [33.0, 501.0], [33.1, 501.0], [33.2, 501.0], [33.3, 501.0], [33.4, 501.0], [33.5, 501.0], [33.6, 501.0], [33.7, 501.0], [33.8, 501.0], [33.9, 501.0], [34.0, 501.0], [34.1, 501.0], [34.2, 501.0], [34.3, 501.0], [34.4, 501.0], [34.5, 501.0], [34.6, 501.0], [34.7, 501.0], [34.8, 501.0], [34.9, 501.0], [35.0, 501.0], [35.1, 501.0], [35.2, 501.0], [35.3, 501.0], [35.4, 501.0], [35.5, 501.0], [35.6, 501.0], [35.7, 501.0], [35.8, 501.0], [35.9, 501.0], [36.0, 501.0], [36.1, 501.0], [36.2, 501.0], [36.3, 501.0], [36.4, 501.0], [36.5, 501.0], [36.6, 501.0], [36.7, 501.0], [36.8, 501.0], [36.9, 501.0], [37.0, 501.0], [37.1, 501.0], [37.2, 501.0], [37.3, 501.0], [37.4, 501.0], [37.5, 501.0], [37.6, 501.0], [37.7, 501.0], [37.8, 501.0], [37.9, 501.0], [38.0, 501.0], [38.1, 501.0], [38.2, 501.0], [38.3, 501.0], [38.4, 501.0], [38.5, 501.0], [38.6, 501.0], [38.7, 501.0], [38.8, 501.0], [38.9, 501.0], [39.0, 501.0], [39.1, 501.0], [39.2, 501.0], [39.3, 501.0], [39.4, 501.0], [39.5, 501.0], [39.6, 501.0], [39.7, 501.0], [39.8, 501.0], [39.9, 501.0], [40.0, 501.0], [40.1, 501.0], [40.2, 501.0], [40.3, 501.0], [40.4, 501.0], [40.5, 501.0], [40.6, 501.0], [40.7, 501.0], [40.8, 501.0], [40.9, 501.0], [41.0, 501.0], [41.1, 501.0], [41.2, 501.0], [41.3, 501.0], [41.4, 501.0], [41.5, 501.0], [41.6, 501.0], [41.7, 501.0], [41.8, 501.0], [41.9, 501.0], [42.0, 501.0], [42.1, 501.0], [42.2, 501.0], [42.3, 501.0], [42.4, 501.0], [42.5, 501.0], [42.6, 501.0], [42.7, 501.0], [42.8, 501.0], [42.9, 501.0], [43.0, 501.0], [43.1, 501.0], [43.2, 501.0], [43.3, 501.0], [43.4, 501.0], [43.5, 501.0], [43.6, 501.0], [43.7, 501.0], [43.8, 501.0], [43.9, 501.0], [44.0, 501.0], [44.1, 501.0], [44.2, 501.0], [44.3, 501.0], [44.4, 501.0], [44.5, 501.0], [44.6, 501.0], [44.7, 501.0], [44.8, 501.0], [44.9, 501.0], [45.0, 501.0], [45.1, 501.0], [45.2, 501.0], [45.3, 501.0], [45.4, 501.0], [45.5, 501.0], [45.6, 501.0], [45.7, 501.0], [45.8, 501.0], [45.9, 501.0], [46.0, 501.0], [46.1, 501.0], [46.2, 501.0], [46.3, 501.0], [46.4, 501.0], [46.5, 501.0], [46.6, 501.0], [46.7, 501.0], [46.8, 501.0], [46.9, 501.0], [47.0, 501.0], [47.1, 501.0], [47.2, 501.0], [47.3, 501.0], [47.4, 501.0], [47.5, 501.0], [47.6, 501.0], [47.7, 501.0], [47.8, 501.0], [47.9, 501.0], [48.0, 501.0], [48.1, 501.0], [48.2, 501.0], [48.3, 501.0], [48.4, 501.0], [48.5, 501.0], [48.6, 501.0], [48.7, 501.0], [48.8, 501.0], [48.9, 501.0], [49.0, 501.0], [49.1, 501.0], [49.2, 501.0], [49.3, 501.0], [49.4, 501.0], [49.5, 501.0], [49.6, 501.0], [49.7, 501.0], [49.8, 501.0], [49.9, 501.0], [50.0, 501.0], [50.1, 501.0], [50.2, 501.0], [50.3, 501.0], [50.4, 501.0], [50.5, 501.0], [50.6, 501.0], [50.7, 501.0], [50.8, 501.0], [50.9, 501.0], [51.0, 501.0], [51.1, 501.0], [51.2, 501.0], [51.3, 501.0], [51.4, 501.0], [51.5, 501.0], [51.6, 501.0], [51.7, 501.0], [51.8, 501.0], [51.9, 501.0], [52.0, 501.0], [52.1, 501.0], [52.2, 501.0], [52.3, 501.0], [52.4, 501.0], [52.5, 501.0], [52.6, 501.0], [52.7, 501.0], [52.8, 501.0], [52.9, 501.0], [53.0, 501.0], [53.1, 501.0], [53.2, 501.0], [53.3, 501.0], [53.4, 501.0], [53.5, 501.0], [53.6, 501.0], [53.7, 501.0], [53.8, 501.0], [53.9, 501.0], [54.0, 501.0], [54.1, 501.0], [54.2, 501.0], [54.3, 501.0], [54.4, 501.0], [54.5, 501.0], [54.6, 501.0], [54.7, 501.0], [54.8, 501.0], [54.9, 501.0], [55.0, 501.0], [55.1, 501.0], [55.2, 501.0], [55.3, 501.0], [55.4, 501.0], [55.5, 501.0], [55.6, 501.0], [55.7, 501.0], [55.8, 501.0], [55.9, 501.0], [56.0, 501.0], [56.1, 501.0], [56.2, 501.0], [56.3, 501.0], [56.4, 501.0], [56.5, 501.0], [56.6, 501.0], [56.7, 501.0], [56.8, 501.0], [56.9, 501.0], [57.0, 501.0], [57.1, 501.0], [57.2, 501.0], [57.3, 501.0], [57.4, 501.0], [57.5, 501.0], [57.6, 501.0], [57.7, 501.0], [57.8, 501.0], [57.9, 501.0], [58.0, 501.0], [58.1, 501.0], [58.2, 501.0], [58.3, 501.0], [58.4, 501.0], [58.5, 501.0], [58.6, 501.0], [58.7, 501.0], [58.8, 501.0], [58.9, 501.0], [59.0, 501.0], [59.1, 501.0], [59.2, 501.0], [59.3, 501.0], [59.4, 501.0], [59.5, 501.0], [59.6, 501.0], [59.7, 501.0], [59.8, 501.0], [59.9, 501.0], [60.0, 501.0], [60.1, 501.0], [60.2, 501.0], [60.3, 501.0], [60.4, 501.0], [60.5, 501.0], [60.6, 501.0], [60.7, 501.0], [60.8, 501.0], [60.9, 501.0], [61.0, 501.0], [61.1, 501.0], [61.2, 501.0], [61.3, 501.0], [61.4, 501.0], [61.5, 501.0], [61.6, 501.0], [61.7, 501.0], [61.8, 501.0], [61.9, 501.0], [62.0, 501.0], [62.1, 501.0], [62.2, 501.0], [62.3, 501.0], [62.4, 501.0], [62.5, 501.0], [62.6, 501.0], [62.7, 501.0], [62.8, 501.0], [62.9, 501.0], [63.0, 501.0], [63.1, 501.0], [63.2, 501.0], [63.3, 501.0], [63.4, 501.0], [63.5, 501.0], [63.6, 501.0], [63.7, 501.0], [63.8, 501.0], [63.9, 501.0], [64.0, 501.0], [64.1, 501.0], [64.2, 501.0], [64.3, 501.0], [64.4, 501.0], [64.5, 501.0], [64.6, 501.0], [64.7, 501.0], [64.8, 501.0], [64.9, 501.0], [65.0, 501.0], [65.1, 501.0], [65.2, 501.0], [65.3, 501.0], [65.4, 501.0], [65.5, 501.0], [65.6, 501.0], [65.7, 501.0], [65.8, 501.0], [65.9, 501.0], [66.0, 501.0], [66.1, 501.0], [66.2, 501.0], [66.3, 501.0], [66.4, 501.0], [66.5, 501.0], [66.6, 501.0], [66.7, 501.0], [66.8, 501.0], [66.9, 501.0], [67.0, 501.0], [67.1, 501.0], [67.2, 501.0], [67.3, 501.0], [67.4, 501.0], [67.5, 501.0], [67.6, 501.0], [67.7, 501.0], [67.8, 501.0], [67.9, 501.0], [68.0, 501.0], [68.1, 501.0], [68.2, 501.0], [68.3, 501.0], [68.4, 501.0], [68.5, 501.0], [68.6, 501.0], [68.7, 501.0], [68.8, 501.0], [68.9, 501.0], [69.0, 501.0], [69.1, 501.0], [69.2, 501.0], [69.3, 501.0], [69.4, 501.0], [69.5, 501.0], [69.6, 501.0], [69.7, 501.0], [69.8, 501.0], [69.9, 501.0], [70.0, 501.0], [70.1, 501.0], [70.2, 501.0], [70.3, 501.0], [70.4, 501.0], [70.5, 501.0], [70.6, 501.0], [70.7, 501.0], [70.8, 501.0], [70.9, 501.0], [71.0, 501.0], [71.1, 501.0], [71.2, 501.0], [71.3, 501.0], [71.4, 501.0], [71.5, 501.0], [71.6, 501.0], [71.7, 501.0], [71.8, 501.0], [71.9, 501.0], [72.0, 501.0], [72.1, 501.0], [72.2, 501.0], [72.3, 501.0], [72.4, 501.0], [72.5, 501.0], [72.6, 501.0], [72.7, 501.0], [72.8, 501.0], [72.9, 501.0], [73.0, 501.0], [73.1, 501.0], [73.2, 501.0], [73.3, 501.0], [73.4, 501.0], [73.5, 501.0], [73.6, 501.0], [73.7, 501.0], [73.8, 501.0], [73.9, 501.0], [74.0, 501.0], [74.1, 501.0], [74.2, 501.0], [74.3, 501.0], [74.4, 501.0], [74.5, 501.0], [74.6, 501.0], [74.7, 501.0], [74.8, 501.0], [74.9, 501.0], [75.0, 501.0], [75.1, 501.0], [75.2, 501.0], [75.3, 501.0], [75.4, 502.0], [75.5, 502.0], [75.6, 502.0], [75.7, 502.0], [75.8, 502.0], [75.9, 502.0], [76.0, 502.0], [76.1, 502.0], [76.2, 502.0], [76.3, 502.0], [76.4, 502.0], [76.5, 502.0], [76.6, 502.0], [76.7, 502.0], [76.8, 502.0], [76.9, 502.0], [77.0, 502.0], [77.1, 502.0], [77.2, 502.0], [77.3, 502.0], [77.4, 502.0], [77.5, 502.0], [77.6, 502.0], [77.7, 502.0], [77.8, 502.0], [77.9, 502.0], [78.0, 502.0], [78.1, 502.0], [78.2, 502.0], [78.3, 502.0], [78.4, 502.0], [78.5, 502.0], [78.6, 502.0], [78.7, 502.0], [78.8, 502.0], [78.9, 502.0], [79.0, 502.0], [79.1, 502.0], [79.2, 502.0], [79.3, 502.0], [79.4, 502.0], [79.5, 502.0], [79.6, 502.0], [79.7, 502.0], [79.8, 502.0], [79.9, 502.0], [80.0, 502.0], [80.1, 502.0], [80.2, 502.0], [80.3, 502.0], [80.4, 502.0], [80.5, 502.0], [80.6, 502.0], [80.7, 502.0], [80.8, 502.0], [80.9, 502.0], [81.0, 502.0], [81.1, 502.0], [81.2, 502.0], [81.3, 502.0], [81.4, 502.0], [81.5, 502.0], [81.6, 502.0], [81.7, 502.0], [81.8, 502.0], [81.9, 502.0], [82.0, 502.0], [82.1, 502.0], [82.2, 502.0], [82.3, 502.0], [82.4, 502.0], [82.5, 502.0], [82.6, 502.0], [82.7, 502.0], [82.8, 502.0], [82.9, 502.0], [83.0, 502.0], [83.1, 502.0], [83.2, 502.0], [83.3, 502.0], [83.4, 502.0], [83.5, 502.0], [83.6, 502.0], [83.7, 502.0], [83.8, 502.0], [83.9, 502.0], [84.0, 502.0], [84.1, 502.0], [84.2, 502.0], [84.3, 502.0], [84.4, 502.0], [84.5, 502.0], [84.6, 502.0], [84.7, 502.0], [84.8, 502.0], [84.9, 502.0], [85.0, 502.0], [85.1, 502.0], [85.2, 502.0], [85.3, 502.0], [85.4, 502.0], [85.5, 502.0], [85.6, 502.0], [85.7, 502.0], [85.8, 502.0], [85.9, 502.0], [86.0, 502.0], [86.1, 502.0], [86.2, 502.0], [86.3, 502.0], [86.4, 502.0], [86.5, 502.0], [86.6, 502.0], [86.7, 502.0], [86.8, 502.0], [86.9, 502.0], [87.0, 502.0], [87.1, 502.0], [87.2, 502.0], [87.3, 502.0], [87.4, 502.0], [87.5, 502.0], [87.6, 502.0], [87.7, 502.0], [87.8, 502.0], [87.9, 502.0], [88.0, 502.0], [88.1, 502.0], [88.2, 502.0], [88.3, 502.0], [88.4, 502.0], [88.5, 502.0], [88.6, 502.0], [88.7, 502.0], [88.8, 502.0], [88.9, 502.0], [89.0, 502.0], [89.1, 502.0], [89.2, 502.0], [89.3, 502.0], [89.4, 502.0], [89.5, 502.0], [89.6, 502.0], [89.7, 502.0], [89.8, 502.0], [89.9, 502.0], [90.0, 502.0], [90.1, 502.0], [90.2, 502.0], [90.3, 502.0], [90.4, 502.0], [90.5, 502.0], [90.6, 502.0], [90.7, 502.0], [90.8, 502.0], [90.9, 502.0], [91.0, 502.0], [91.1, 502.0], [91.2, 502.0], [91.3, 502.0], [91.4, 502.0], [91.5, 502.0], [91.6, 502.0], [91.7, 502.0], [91.8, 502.0], [91.9, 502.0], [92.0, 502.0], [92.1, 502.0], [92.2, 502.0], [92.3, 502.0], [92.4, 502.0], [92.5, 502.0], [92.6, 502.0], [92.7, 502.0], [92.8, 502.0], [92.9, 502.0], [93.0, 502.0], [93.1, 502.0], [93.2, 502.0], [93.3, 502.0], [93.4, 502.0], [93.5, 502.0], [93.6, 503.0], [93.7, 503.0], [93.8, 503.0], [93.9, 503.0], [94.0, 503.0], [94.1, 503.0], [94.2, 503.0], [94.3, 503.0], [94.4, 503.0], [94.5, 503.0], [94.6, 503.0], [94.7, 503.0], [94.8, 503.0], [94.9, 503.0], [95.0, 503.0], [95.1, 503.0], [95.2, 503.0], [95.3, 503.0], [95.4, 503.0], [95.5, 504.0], [95.6, 504.0], [95.7, 504.0], [95.8, 504.0], [95.9, 504.0], [96.0, 505.0], [96.1, 505.0], [96.2, 506.0], [96.3, 506.0], [96.4, 507.0], [96.5, 507.0], [96.6, 507.0], [96.7, 508.0], [96.8, 508.0], [96.9, 508.0], [97.0, 508.0], [97.1, 508.0], [97.2, 508.0], [97.3, 509.0], [97.4, 509.0], [97.5, 509.0], [97.6, 509.0], [97.7, 509.0], [97.8, 509.0], [97.9, 509.0], [98.0, 509.0], [98.1, 509.0], [98.2, 509.0], [98.3, 510.0], [98.4, 510.0], [98.5, 510.0], [98.6, 510.0], [98.7, 510.0], [98.8, 510.0], [98.9, 510.0], [99.0, 511.0], [99.1, 511.0], [99.2, 511.0], [99.3, 512.0], [99.4, 513.0], [99.5, 514.0], [99.6, 516.0], [99.7, 519.0], [99.8, 525.0], [99.9, 576.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 256.0, "minX": 100.0, "maxY": 366263.0, "series": [{"data": [[300.0, 10262.0], [600.0, 256.0], [200.0, 7153.0], [100.0, 4747.0], [400.0, 11319.0], [500.0, 366263.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 58068.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 341932.0, "series": [{"data": [[0.0, 58068.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 341932.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1805.5580978871722, "minX": 1.5852444E12, "maxY": 2000.0, "series": [{"data": [[1.5852444E12, 1805.5580978871722], [1.58524446E12, 2000.0], [1.58524452E12, 1887.0245541077536]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524452E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 101.0, "minX": 1.0, "maxY": 632.3125, "series": [{"data": [[2.0, 102.0], [4.0, 101.0], [5.0, 101.0], [7.0, 101.5], [9.0, 101.0], [11.0, 101.5], [12.0, 102.0], [13.0, 102.0], [14.0, 101.0], [15.0, 101.0], [16.0, 101.0], [18.0, 101.0], [19.0, 101.0], [20.0, 101.0], [21.0, 102.0], [22.0, 102.0], [23.0, 101.0], [25.0, 101.0], [26.0, 101.0], [27.0, 101.0], [29.0, 102.0], [32.0, 102.0], [34.0, 102.0], [37.0, 101.0], [36.0, 102.0], [39.0, 101.0], [38.0, 101.0], [41.0, 101.0], [43.0, 101.0], [45.0, 101.0], [44.0, 101.0], [47.0, 101.0], [49.0, 101.0], [48.0, 101.0], [53.0, 101.0], [55.0, 102.0], [54.0, 102.0], [56.0, 102.0], [61.0, 101.0], [60.0, 101.0], [66.0, 101.0], [64.0, 101.0], [71.0, 102.0], [70.0, 102.0], [69.0, 101.0], [68.0, 101.0], [75.0, 101.0], [72.0, 102.0], [79.0, 102.0], [77.0, 101.0], [76.0, 101.0], [80.0, 102.0], [87.0, 101.0], [84.0, 101.0], [90.0, 102.0], [88.0, 101.66666666666667], [93.0, 101.0], [98.0, 101.0], [97.0, 101.0], [103.0, 102.0], [101.0, 101.0], [100.0, 101.0], [107.0, 101.0], [106.0, 102.0], [105.0, 102.0], [104.0, 101.5], [111.0, 101.33333333333333], [108.0, 101.0], [114.0, 101.0], [113.0, 102.0], [119.0, 102.25], [118.0, 102.0], [123.0, 101.0], [122.0, 101.0], [120.0, 102.0], [127.0, 101.0], [124.0, 101.0], [132.0, 102.0], [130.0, 102.0], [129.0, 101.0], [128.0, 101.0], [142.0, 101.0], [140.0, 101.0], [139.0, 101.0], [138.0, 101.0], [151.0, 101.0], [146.0, 102.0], [144.0, 102.0], [159.0, 101.0], [158.0, 101.0], [155.0, 101.0], [154.0, 101.0], [166.0, 102.0], [165.0, 101.0], [164.0, 101.0], [163.0, 101.0], [162.0, 101.0], [161.0, 101.0], [160.0, 103.0], [175.0, 101.0], [174.0, 101.0], [173.0, 101.0], [172.0, 101.0], [171.0, 101.66666666666667], [169.0, 102.0], [183.0, 102.0], [181.0, 102.0], [180.0, 101.0], [176.0, 103.0], [191.0, 101.0], [190.0, 101.0], [189.0, 101.0], [188.0, 102.0], [187.0, 102.0], [186.0, 102.0], [184.0, 102.0], [199.0, 101.0], [197.0, 102.0], [196.0, 102.0], [195.0, 103.0], [194.0, 103.0], [193.0, 102.0], [192.0, 101.0], [206.0, 102.0], [205.0, 102.0], [204.0, 102.0], [201.0, 109.0], [200.0, 101.0], [214.0, 101.0], [210.0, 101.0], [209.0, 116.0], [223.0, 108.0], [221.0, 108.0], [218.0, 102.0], [216.0, 101.66666666666667], [231.0, 101.6], [230.0, 102.0], [228.0, 109.25], [227.0, 108.5], [226.0, 108.5], [225.0, 108.0], [224.0, 108.0], [239.0, 103.0], [237.0, 103.0], [236.0, 102.0], [235.0, 102.0], [234.0, 102.5], [233.0, 103.0], [246.0, 102.0], [245.0, 103.0], [244.0, 102.0], [243.0, 102.0], [241.0, 102.75], [240.0, 103.0], [255.0, 216.11764705882354], [254.0, 109.0], [252.0, 110.5], [251.0, 109.5], [250.0, 110.0], [249.0, 109.75], [248.0, 102.0], [258.0, 229.6], [257.0, 160.4], [259.0, 170.49999999999997], [269.0, 114.22222222222223], [260.0, 189.8], [261.0, 170.83333333333334], [262.0, 225.91891891891893], [263.0, 117.0], [264.0, 138.9], [267.0, 142.75], [266.0, 111.0], [265.0, 110.0], [271.0, 109.0], [270.0, 109.8], [279.0, 254.42857142857144], [274.0, 169.28571428571428], [273.0, 110.0], [275.0, 116.66666666666667], [276.0, 146.25], [277.0, 145.4], [278.0, 143.4], [280.0, 198.0], [281.0, 194.5], [282.0, 214.16666666666666], [284.0, 219.04761904761904], [285.0, 253.90000000000003], [286.0, 244.4], [287.0, 117.0], [288.0, 251.59459459459464], [289.0, 218.61111111111111], [290.0, 111.0], [293.0, 150.0], [292.0, 112.0], [302.0, 139.875], [303.0, 119.0], [300.0, 115.0], [291.0, 111.66666666666667], [299.0, 111.0], [296.0, 111.0], [295.0, 111.0], [294.0, 111.0], [316.0, 156.4], [306.0, 168.5], [307.0, 181.375], [308.0, 141.5], [311.0, 105.0], [305.0, 119.0], [309.0, 118.5], [312.0, 105.0], [314.0, 142.0], [313.0, 121.75], [315.0, 142.0], [317.0, 189.75], [318.0, 121.0], [334.0, 127.0], [320.0, 147.75], [323.0, 207.0], [322.0, 120.0], [324.0, 228.7142857142857], [325.0, 261.0], [327.0, 128.0], [335.0, 127.0], [328.0, 128.0], [332.0, 127.0], [331.0, 128.0], [330.0, 128.0], [339.0, 217.66666666666666], [341.0, 202.54545454545453], [340.0, 128.0], [342.0, 152.07692307692307], [343.0, 176.4761904761905], [336.0, 127.0], [338.0, 127.0], [337.0, 127.0], [351.0, 155.50000000000003], [350.0, 156.25], [349.0, 145.0], [348.0, 142.0], [347.0, 136.0], [345.0, 136.0], [365.0, 155.0], [358.0, 145.55172413793102], [356.0, 161.0], [359.0, 149.5], [360.0, 148.66666666666666], [361.0, 151.44444444444446], [362.0, 143.2222222222222], [363.0, 148.8], [364.0, 155.54545454545453], [355.0, 161.0], [354.0, 161.0], [353.0, 160.16666666666666], [366.0, 161.36363636363637], [367.0, 159.0], [369.0, 171.5], [368.0, 166.39999999999998], [370.0, 159.8125], [371.0, 167.4736842105263], [372.0, 167.46153846153848], [373.0, 174.25], [374.0, 161.79999999999998], [375.0, 165.83333333333334], [382.0, 155.0], [381.0, 151.0], [396.0, 196.36363636363637], [390.0, 173.75], [389.0, 160.2857142857143], [388.0, 154.75], [391.0, 163.83333333333331], [386.0, 154.2], [392.0, 195.16666666666666], [393.0, 183.9090909090909], [394.0, 200.7], [395.0, 194.46153846153845], [397.0, 213.66666666666666], [398.0, 169.33333333333334], [399.0, 145.0], [413.0, 150.36363636363635], [402.0, 156.44444444444446], [401.0, 150.0], [400.0, 153.0], [406.0, 129.75], [405.0, 129.0], [404.0, 129.0], [403.0, 163.5], [410.0, 191.3846153846154], [411.0, 142.5], [412.0, 187.33333333333334], [415.0, 113.0], [409.0, 130.0], [408.0, 130.0], [429.0, 130.0], [416.0, 167.66666666666666], [419.0, 129.5], [422.0, 124.33333333333333], [420.0, 130.14285714285714], [423.0, 131.0], [425.0, 144.0], [427.0, 126.0], [430.0, 129.25], [426.0, 130.0], [424.0, 130.44444444444446], [434.0, 145.81818181818178], [433.0, 150.4], [435.0, 163.77777777777777], [445.0, 138.0], [444.0, 138.0], [436.0, 151.8181818181818], [437.0, 164.45454545454544], [438.0, 160.77777777777777], [439.0, 161.71428571428572], [447.0, 139.0], [440.0, 137.0], [443.0, 138.0], [441.0, 137.0], [446.0, 145.5], [460.0, 193.6], [454.0, 187.00000000000003], [453.0, 181.875], [452.0, 139.0], [455.0, 172.625], [448.0, 138.0], [451.0, 139.375], [450.0, 138.0], [456.0, 195.07692307692307], [457.0, 185.30434782608697], [458.0, 174.40000000000003], [459.0, 183.9090909090909], [461.0, 208.75], [462.0, 190.22222222222223], [463.0, 166.5], [465.0, 179.33333333333334], [464.0, 194.8], [466.0, 191.5], [467.0, 174.30000000000004], [468.0, 192.88888888888889], [469.0, 237.7], [470.0, 201.83333333333334], [471.0, 263.5714285714286], [472.0, 284.75], [478.0, 184.35294117647064], [479.0, 203.75], [476.0, 210.9411764705882], [477.0, 224.0], [473.0, 271.86666666666673], [474.0, 246.66666666666669], [475.0, 236.125], [481.0, 186.66666666666669], [480.0, 196.57142857142856], [482.0, 192.89285714285717], [493.0, 172.2], [483.0, 173.2], [484.0, 194.66666666666669], [485.0, 217.0], [486.0, 204.3529411764706], [487.0, 240.33333333333334], [488.0, 236.24999999999997], [489.0, 230.33333333333334], [490.0, 210.25], [491.0, 235.0], [508.0, 172.0], [510.0, 190.2], [511.0, 195.42857142857144], [509.0, 172.0], [505.0, 173.0], [503.0, 173.0], [497.0, 177.94117647058823], [496.0, 177.0], [499.0, 180.66666666666666], [498.0, 180.33333333333331], [502.0, 172.0], [501.0, 172.66666666666666], [500.0, 180.0], [514.0, 234.2142857142857], [512.0, 186.04545454545453], [526.0, 179.76923076923077], [524.0, 177.8947368421053], [522.0, 157.92307692307693], [516.0, 193.61111111111111], [518.0, 161.42105263157896], [528.0, 162.9090909090909], [542.0, 143.3], [540.0, 134.14285714285714], [538.0, 137.88888888888889], [536.0, 141.99999999999997], [530.0, 163.16666666666669], [532.0, 153.57142857142856], [534.0, 167.73333333333335], [520.0, 160.00000000000003], [550.0, 137.875], [544.0, 154.8181818181818], [546.0, 157.61538461538464], [548.0, 151.4], [574.0, 149.6153846153846], [560.0, 189.0], [572.0, 156.05000000000004], [570.0, 190.25], [568.0, 178.75], [562.0, 166.87499999999997], [564.0, 175.14285714285714], [566.0, 177.27272727272728], [552.0, 160.85714285714286], [556.0, 173.2], [554.0, 165.0], [558.0, 190.0], [578.0, 132.75], [576.0, 137.28571428571428], [590.0, 169.66666666666669], [588.0, 132.7857142857143], [586.0, 162.6875], [580.0, 124.84210526315789], [582.0, 135.14285714285714], [592.0, 145.28571428571428], [604.0, 172.5], [602.0, 153.9090909090909], [600.0, 138.3], [594.0, 135.0625], [596.0, 139.20000000000002], [598.0, 151.33333333333334], [584.0, 131.33333333333334], [614.0, 150.27272727272728], [612.0, 176.5625], [610.0, 191.33333333333331], [608.0, 198.8], [622.0, 174.33333333333334], [620.0, 164.71428571428575], [632.0, 134.54545454545453], [634.0, 178.58823529411765], [636.0, 169.44444444444443], [638.0, 142.0], [624.0, 181.76470588235293], [626.0, 153.42857142857142], [628.0, 147.6], [630.0, 155.16666666666669], [616.0, 179.54545454545453], [618.0, 147.91666666666666], [642.0, 138.5], [640.0, 167.72000000000003], [654.0, 154.46666666666667], [652.0, 148.00000000000003], [650.0, 148.5], [644.0, 175.32000000000002], [646.0, 139.59999999999997], [656.0, 174.5], [660.0, 200.5], [658.0, 208.0], [664.0, 187.5], [666.0, 181.72727272727272], [668.0, 177.87499999999997], [670.0, 171.91666666666669], [648.0, 144.63636363636365], [674.0, 169.39999999999998], [672.0, 180.29999999999998], [686.0, 157.63636363636365], [684.0, 191.14285714285714], [682.0, 161.1818181818182], [676.0, 178.57142857142858], [678.0, 167.5], [688.0, 182.0], [702.0, 163.5], [700.0, 179.21052631578948], [698.0, 148.79999999999998], [696.0, 162.88888888888889], [690.0, 161.0], [692.0, 169.8235294117647], [694.0, 164.39999999999998], [680.0, 177.17857142857142], [734.0, 179.85714285714286], [704.0, 151.75], [706.0, 205.00000000000003], [720.0, 195.8], [732.0, 178.375], [730.0, 204.0], [728.0, 175.4545454545455], [708.0, 233.28571428571428], [722.0, 200.92], [724.0, 182.14285714285714], [726.0, 177.70000000000002], [714.0, 168.16666666666666], [712.0, 235.0], [716.0, 173.69230769230768], [718.0, 176.0909090909091], [738.0, 196.36363636363637], [736.0, 183.86956521739128], [750.0, 165.93333333333337], [748.0, 170.75], [746.0, 198.0], [740.0, 191.58823529411765], [742.0, 196.89999999999998], [752.0, 184.6], [766.0, 211.73684210526318], [764.0, 196.82352941176472], [762.0, 198.9], [760.0, 220.4], [754.0, 182.42857142857144], [758.0, 212.0], [756.0, 217.49999999999997], [744.0, 200.63888888888894], [770.0, 184.7], [768.0, 200.63157894736838], [782.0, 202.70588235294122], [780.0, 232.5217391304348], [778.0, 198.66666666666666], [772.0, 212.79999999999998], [774.0, 194.0], [784.0, 215.28571428571433], [798.0, 187.69230769230768], [796.0, 193.0], [794.0, 213.66666666666669], [792.0, 184.87500000000003], [786.0, 184.21428571428572], [788.0, 196.16666666666666], [790.0, 221.125], [776.0, 198.91666666666669], [826.0, 189.0], [800.0, 186.50000000000003], [802.0, 175.75], [804.0, 190.6153846153846], [816.0, 214.74193548387098], [830.0, 236.70370370370372], [828.0, 240.18518518518516], [824.0, 213.63157894736844], [806.0, 226.83333333333334], [818.0, 200.16666666666669], [820.0, 185.28571428571428], [822.0, 200.83333333333337], [814.0, 183.12500000000003], [812.0, 228.0], [810.0, 225.75], [808.0, 220.4], [834.0, 235.27272727272728], [832.0, 216.64705882352942], [846.0, 218.64705882352942], [844.0, 214.35714285714286], [842.0, 196.88888888888889], [836.0, 226.85714285714286], [838.0, 190.66666666666666], [848.0, 215.89999999999998], [856.0, 205.5], [858.0, 230.0], [862.0, 233.35999999999996], [860.0, 230.1], [850.0, 212.55555555555554], [852.0, 180.92857142857142], [854.0, 185.85714285714286], [840.0, 230.0], [866.0, 204.7058823529412], [864.0, 212.375], [878.0, 240.0], [876.0, 206.89473684210526], [874.0, 218.66666666666666], [868.0, 224.85714285714283], [870.0, 211.0], [892.0, 244.23333333333332], [894.0, 250.91304347826085], [890.0, 229.25], [888.0, 231.61111111111111], [882.0, 255.5625], [884.0, 250.64285714285714], [886.0, 220.87096774193546], [872.0, 202.11111111111106], [900.0, 202.63636363636365], [896.0, 224.63636363636363], [906.0, 252.0], [910.0, 261.66666666666663], [908.0, 262.6666666666667], [898.0, 201.28571428571428], [902.0, 220.13636363636365], [914.0, 230.22222222222223], [912.0, 245.71428571428572], [926.0, 213.5], [924.0, 231.83783783783787], [922.0, 213.61538461538458], [920.0, 234.3030303030303], [916.0, 212.42857142857144], [918.0, 228.07692307692312], [904.0, 230.66666666666666], [930.0, 251.23529411764704], [928.0, 212.41666666666666], [942.0, 255.9090909090909], [940.0, 214.00000000000003], [938.0, 239.17391304347828], [932.0, 230.76470588235296], [934.0, 232.64705882352945], [944.0, 212.11111111111111], [958.0, 264.0], [956.0, 270.91489361702133], [954.0, 254.23333333333332], [952.0, 234.10526315789474], [946.0, 254.5], [948.0, 253.0], [950.0, 244.0], [936.0, 222.4], [984.0, 177.6923076923077], [966.0, 234.45454545454544], [964.0, 249.5], [960.0, 263.2], [974.0, 263.037037037037], [986.0, 187.4], [988.0, 212.0], [990.0, 194.91666666666666], [976.0, 232.44444444444446], [978.0, 262.70370370370375], [980.0, 258.875], [982.0, 211.10000000000002], [968.0, 250.72222222222223], [970.0, 257.0], [972.0, 255.14814814814818], [994.0, 238.05263157894737], [992.0, 204.72727272727272], [1006.0, 247.6153846153846], [1004.0, 243.30769230769226], [1002.0, 231.1111111111111], [996.0, 214.5333333333333], [998.0, 207.75], [1016.0, 246.9130434782609], [1018.0, 274.97058823529414], [1020.0, 276.1481481481482], [1022.0, 279.3333333333333], [1014.0, 271.8], [1012.0, 266.2], [1010.0, 258.0], [1008.0, 258.0], [1000.0, 266.46938775510205], [1028.0, 234.4], [1024.0, 273.18750000000006], [1052.0, 238.8260869565217], [1048.0, 259.9375], [1044.0, 253.42105263157896], [1040.0, 262.063829787234], [1032.0, 272.47058823529414], [1036.0, 263.99999999999994], [1056.0, 277.30769230769226], [1084.0, 272.125], [1080.0, 272.1428571428571], [1076.0, 277.375], [1072.0, 277.93333333333334], [1064.0, 292.0], [1060.0, 291.0], [1068.0, 256.52941176470586], [1092.0, 281.3142857142857], [1088.0, 253.06250000000003], [1108.0, 293.25], [1116.0, 263.33333333333337], [1112.0, 301.0], [1104.0, 272.27272727272725], [1096.0, 272.16666666666663], [1100.0, 238.4], [1120.0, 286.14285714285717], [1148.0, 305.73770491803305], [1144.0, 268.6363636363636], [1140.0, 268.28571428571433], [1136.0, 276.81249999999994], [1124.0, 292.59459459459464], [1128.0, 278.7], [1132.0, 294.7619047619048], [1156.0, 273.40909090909093], [1152.0, 303.5454545454545], [1180.0, 312.5], [1176.0, 274.25], [1172.0, 288.49999999999994], [1184.0, 316.4594594594595], [1212.0, 329.0], [1208.0, 318.6923076923077], [1204.0, 289.3333333333333], [1200.0, 266.87500000000006], [1164.0, 309.54545454545456], [1160.0, 307.2352941176472], [1188.0, 289.1875], [1192.0, 294.4117647058824], [1196.0, 258.3333333333333], [1168.0, 274.99999999999994], [1220.0, 324.25], [1244.0, 280.91666666666674], [1240.0, 330.12727272727284], [1236.0, 312.0], [1216.0, 351.0], [1228.0, 321.51428571428573], [1224.0, 321.0], [1264.0, 339.0], [1248.0, 284.3500000000001], [1276.0, 341.8888888888889], [1268.0, 330.4], [1272.0, 340.0], [1252.0, 295.0869565217391], [1256.0, 329.5], [1232.0, 286.68965517241384], [1284.0, 324.3157894736842], [1280.0, 318.0416666666667], [1308.0, 330.090909090909], [1304.0, 299.8461538461538], [1300.0, 318.0], [1288.0, 309.2941176470588], [1292.0, 328.77777777777777], [1316.0, 329.0], [1312.0, 333.04545454545456], [1340.0, 323.5555555555555], [1336.0, 338.375], [1328.0, 363.8571428571429], [1332.0, 303.28], [1320.0, 338.0192307692308], [1296.0, 346.5588235294117], [1352.0, 316.2105263157894], [1344.0, 357.1041666666667], [1372.0, 366.6296296296295], [1348.0, 358.90909090909093], [1356.0, 318.7586206896552], [1380.0, 318.89473684210526], [1376.0, 339.83333333333337], [1404.0, 359.7380952380952], [1400.0, 324.89473684210526], [1396.0, 318.18181818181813], [1392.0, 353.7777777777778], [1384.0, 354.98550724637676], [1388.0, 364.0], [1368.0, 344.16666666666663], [1364.0, 372.3333333333333], [1360.0, 346.46153846153845], [1412.0, 350.1219512195121], [1408.0, 378.68000000000006], [1416.0, 379.1111111111111], [1420.0, 380.0000000000001], [1428.0, 380.9615384615384], [1424.0, 384.8181818181818], [1432.0, 355.37037037037044], [1436.0, 337.41860465116275], [1440.0, 372.36206896551727], [1468.0, 366.9999999999999], [1464.0, 391.44444444444446], [1460.0, 386.0], [1456.0, 336.6], [1444.0, 362.91666666666663], [1448.0, 346.4], [1452.0, 333.125], [1484.0, 371.3396226415094], [1472.0, 378.6], [1476.0, 392.3333333333333], [1480.0, 394.36363636363643], [1500.0, 382.1176470588235], [1504.0, 385.8571428571429], [1528.0, 412.0], [1524.0, 412.3181818181818], [1532.0, 375.2631578947368], [1520.0, 356.0769230769231], [1508.0, 350.71428571428567], [1512.0, 401.88888888888886], [1516.0, 402.2105263157895], [1488.0, 387.57142857142856], [1492.0, 320.2380952380953], [1496.0, 381.72093023255815], [1540.0, 340.9230769230769], [1536.0, 371.8421052631579], [1564.0, 418.3333333333333], [1560.0, 418.0], [1556.0, 383.9411764705881], [1544.0, 370.42857142857144], [1548.0, 381.76], [1568.0, 416.48837209302326], [1596.0, 395.904761904762], [1592.0, 391.6279069767442], [1588.0, 413.1304347826087], [1584.0, 399.90476190476187], [1572.0, 357.14285714285717], [1580.0, 443.0], [1576.0, 438.304347826087], [1552.0, 359.0769230769231], [1604.0, 397.27777777777777], [1600.0, 388.33333333333337], [1628.0, 454.6], [1624.0, 428.75], [1608.0, 359.25000000000006], [1620.0, 380.05263157894734], [1616.0, 418.7222222222222], [1632.0, 379.65217391304344], [1660.0, 427.25], [1656.0, 385.03999999999996], [1652.0, 391.22222222222223], [1648.0, 378.77777777777777], [1612.0, 444.0], [1636.0, 393.1379310344828], [1640.0, 394.6666666666667], [1644.0, 409.63999999999993], [1712.0, 425.90000000000003], [1688.0, 454.5], [1672.0, 418.8], [1676.0, 421.87499999999994], [1720.0, 398.1794871794872], [1724.0, 480.8], [1696.0, 467.2407407407408], [1700.0, 421.10526315789474], [1704.0, 406.87999999999994], [1708.0, 440.5], [1680.0, 438.0], [1684.0, 413.7222222222221], [1692.0, 431.38461538461536], [1664.0, 442.22222222222223], [1668.0, 455.7], [1736.0, 415.9583333333334], [1732.0, 395.6315789473685], [1728.0, 472.875], [1756.0, 485.7692307692308], [1752.0, 402.29999999999995], [1740.0, 450.9183673469388], [1764.0, 446.9428571428572], [1760.0, 461.30769230769226], [1788.0, 436.4054054054054], [1780.0, 483.0], [1776.0, 484.0714285714286], [1784.0, 440.15789473684214], [1768.0, 490.7777777777778], [1772.0, 466.64102564102564], [1744.0, 465.8695652173913], [1748.0, 448.25925925925924], [1800.0, 404.2903225806451], [1792.0, 416.93333333333334], [1820.0, 428.62068965517244], [1796.0, 403.8333333333333], [1804.0, 391.07317073170736], [1840.0, 477.5], [1844.0, 407.75], [1848.0, 455.8], [1852.0, 459.25000000000006], [1832.0, 485.14814814814804], [1836.0, 454.30769230769226], [1812.0, 370.0], [1808.0, 370.0], [1816.0, 443.2941176470588], [1864.0, 443.0322580645161], [1916.0, 445.52941176470586], [1860.0, 492.0], [1856.0, 501.0], [1868.0, 500.82608695652175], [1904.0, 449.3529411764706], [1912.0, 500.1764705882353], [1908.0, 500.1739130434782], [1872.0, 467.2], [1884.0, 465.6363636363637], [1880.0, 493.0], [1876.0, 496.6666666666667], [1888.0, 446.3333333333333], [1892.0, 418.2857142857142], [1896.0, 436.44444444444446], [1900.0, 465.1578947368421], [1928.0, 517.1818181818181], [1920.0, 495.3], [1948.0, 527.6], [1924.0, 487.33333333333337], [1952.0, 575.38], [1980.0, 508.66666666666663], [1968.0, 532.7931034482758], [1972.0, 447.0], [1956.0, 430.0], [1960.0, 563.9411764705884], [1964.0, 515.3829787234043], [1936.0, 480.7368421052631], [1940.0, 632.3125], [1944.0, 489.4375], [1984.0, 473.02777777777777], [1988.0, 474.85714285714283], [1992.0, 494.9140625], [1996.0, 496.6887966804979], [2000.0, 501.3308023257826], [1025.0, 270.5833333333333], [1053.0, 240.83333333333331], [1049.0, 274.19999999999993], [1045.0, 249.5], [1041.0, 247.5], [1029.0, 267.625], [1033.0, 244.15384615384616], [1037.0, 278.7142857142858], [1085.0, 237.85714285714286], [1081.0, 261.0], [1077.0, 287.49999999999994], [1073.0, 252.0909090909091], [1057.0, 291.5909090909091], [1065.0, 292.2], [1061.0, 291.0], [1069.0, 262.3636363636364], [1089.0, 249.45], [1117.0, 260.05263157894734], [1113.0, 301.0344827586207], [1109.0, 301.0], [1105.0, 276.77499999999986], [1093.0, 254.72727272727272], [1097.0, 279.1666666666667], [1101.0, 246.05882352941177], [1149.0, 261.2], [1145.0, 273.66666666666663], [1141.0, 281.0454545454546], [1137.0, 307.1764705882353], [1121.0, 300.5217391304348], [1125.0, 304.0645161290323], [1129.0, 284.5652173913044], [1133.0, 289.79999999999995], [1153.0, 277.18181818181813], [1181.0, 293.78260869565224], [1177.0, 291.4615384615385], [1173.0, 280.53846153846155], [1157.0, 269.0], [1161.0, 310.5], [1165.0, 311.36842105263156], [1209.0, 327.3076923076923], [1213.0, 336.25], [1205.0, 303.1354166666667], [1201.0, 290.6500000000001], [1185.0, 278.93333333333334], [1189.0, 299.8666666666667], [1193.0, 276.0625], [1197.0, 280.11111111111114], [1169.0, 263.0], [1221.0, 321.6923076923077], [1217.0, 317.87499999999994], [1245.0, 332.8846153846154], [1241.0, 334.12195121951225], [1237.0, 307.07692307692304], [1225.0, 319.69230769230774], [1229.0, 302.6976744186047], [1269.0, 361.6666666666667], [1273.0, 354.0], [1277.0, 339.7391304347827], [1265.0, 308.593220338983], [1249.0, 274.73333333333335], [1253.0, 304.73913043478257], [1257.0, 331.90000000000003], [1261.0, 329.14285714285717], [1233.0, 311.7105263157894], [1285.0, 309.44444444444446], [1281.0, 316.972602739726], [1309.0, 325.6], [1305.0, 313.4642857142858], [1301.0, 293.09999999999997], [1289.0, 319.4545454545454], [1293.0, 301.4], [1329.0, 340.47999999999996], [1333.0, 318.62499999999994], [1337.0, 322.8490566037736], [1341.0, 330.07142857142844], [1317.0, 338.33333333333337], [1313.0, 337.0], [1321.0, 338.7272727272727], [1325.0, 365.3275862068966], [1297.0, 322.8125], [1353.0, 333.27272727272725], [1345.0, 335.6666666666667], [1373.0, 357.2631578947369], [1349.0, 336.7586206896551], [1357.0, 329.4545454545455], [1381.0, 318.89473684210526], [1377.0, 345.93939393939394], [1405.0, 334.3], [1401.0, 336.0], [1397.0, 322.3478260869566], [1393.0, 360.96], [1385.0, 331.46428571428567], [1389.0, 364.3714285714285], [1365.0, 372.0], [1361.0, 344.6666666666667], [1369.0, 337.8974358974359], [1421.0, 365.6666666666667], [1457.0, 366.5357142857143], [1437.0, 369.425], [1409.0, 367.0], [1413.0, 349.9047619047618], [1461.0, 391.6363636363636], [1465.0, 389.4545454545455], [1469.0, 353.3846153846154], [1429.0, 381.0], [1425.0, 382.57142857142856], [1433.0, 332.8181818181817], [1441.0, 355.3529411764706], [1445.0, 372.7826086956521], [1449.0, 355.91666666666663], [1453.0, 324.2777777777777], [1485.0, 332.14285714285717], [1481.0, 357.20512820512823], [1477.0, 392.6428571428571], [1473.0, 397.2], [1501.0, 379.6111111111111], [1505.0, 390.03846153846166], [1533.0, 372.74999999999994], [1521.0, 371.85714285714283], [1525.0, 428.0769230769231], [1529.0, 412.0], [1509.0, 366.5], [1517.0, 408.7647058823529], [1489.0, 387.33333333333337], [1493.0, 391.7272727272728], [1497.0, 326.75], [1541.0, 346.44444444444446], [1537.0, 386.41428571428577], [1565.0, 412.00000000000006], [1561.0, 417.63157894736844], [1557.0, 370.00000000000006], [1545.0, 366.7142857142857], [1549.0, 379.9166666666667], [1569.0, 395.97435897435895], [1597.0, 349.1578947368421], [1589.0, 420.43749999999994], [1593.0, 359.3333333333333], [1585.0, 395.96875], [1581.0, 377.625], [1577.0, 444.0], [1573.0, 419.0], [1553.0, 377.33333333333326], [1613.0, 423.02564102564105], [1649.0, 370.54545454545445], [1601.0, 371.2], [1605.0, 415.672268907563], [1609.0, 346.5], [1653.0, 399.61111111111114], [1657.0, 388.80769230769226], [1661.0, 436.2222222222223], [1617.0, 416.5113636363637], [1621.0, 391.7], [1629.0, 460.3], [1625.0, 430.69230769230774], [1633.0, 378.05], [1637.0, 382.55], [1641.0, 433.5277777777777], [1645.0, 371.6428571428571], [1673.0, 408.0], [1669.0, 443.6379310344828], [1665.0, 459.8399999999999], [1693.0, 411.8095238095239], [1677.0, 424.41666666666663], [1713.0, 443.5128205128206], [1717.0, 480.22641509433976], [1721.0, 460.98214285714283], [1725.0, 472.73684210526324], [1697.0, 440.4999999999999], [1701.0, 400.55555555555554], [1705.0, 450.52380952380963], [1709.0, 440.0], [1681.0, 433.88888888888886], [1685.0, 443.15789473684214], [1689.0, 421.9166666666667], [1737.0, 402.44444444444434], [1733.0, 423.07500000000005], [1729.0, 471.8235294117647], [1757.0, 482.0], [1753.0, 464.8709677419355], [1741.0, 429.3461538461539], [1761.0, 458.25], [1789.0, 461.6818181818182], [1781.0, 481.62499999999994], [1777.0, 484.6666666666667], [1785.0, 404.60606060606057], [1765.0, 451.20833333333326], [1769.0, 496.8260869565217], [1773.0, 408.25], [1745.0, 460.05263157894734], [1749.0, 400.55555555555554], [1797.0, 408.6346153846154], [1793.0, 402.42857142857144], [1821.0, 407.80952380952385], [1817.0, 495.87878787878793], [1801.0, 402.0], [1805.0, 396.125], [1841.0, 415.64285714285717], [1845.0, 477.83870967741944], [1849.0, 450.5], [1853.0, 462.57142857142856], [1825.0, 495.25], [1829.0, 493.0], [1833.0, 459.775], [1837.0, 434.4117647058823], [1813.0, 360.4776119402985], [1809.0, 370.3333333333333], [1861.0, 499.3571428571429], [1865.0, 462.11538461538464], [1857.0, 500.8235294117647], [1869.0, 501.0], [1905.0, 489.10416666666663], [1913.0, 491.0], [1917.0, 501.0], [1873.0, 474.125], [1877.0, 492.0], [1881.0, 500.3636363636364], [1885.0, 455.6842105263158], [1889.0, 426.54545454545456], [1893.0, 484.62068965517244], [1897.0, 419.25], [1901.0, 429.875], [1929.0, 501.0], [1921.0, 451.57894736842104], [1949.0, 426.6], [1933.0, 440.5454545454546], [1925.0, 523.7499999999999], [1953.0, 555.6153846153845], [1981.0, 509.4285714285714], [1977.0, 500.85714285714283], [1969.0, 529.8333333333333], [1973.0, 466.4], [1961.0, 592.2], [1957.0, 517.5], [1965.0, 540.5625], [1937.0, 491.4117647058823], [1941.0, 530.2857142857143], [1945.0, 561.7073170731709], [1985.0, 494.9518072289158], [1989.0, 479.27272727272737], [1993.0, 486.34920634920644], [1997.0, 429.125], [515.0, 214.8181818181818], [527.0, 182.33333333333334], [525.0, 163.57142857142856], [523.0, 156.5], [513.0, 199.75], [517.0, 160.0], [519.0, 163.7058823529412], [543.0, 151.44444444444446], [541.0, 146.2], [539.0, 134.99999999999997], [537.0, 140.4736842105263], [529.0, 160.8235294117647], [531.0, 165.93333333333334], [533.0, 177.23076923076923], [535.0, 160.63636363636363], [521.0, 169.0], [551.0, 147.12499999999997], [547.0, 150.35714285714286], [545.0, 157.73333333333332], [549.0, 139.75], [561.0, 179.375], [575.0, 148.75], [573.0, 162.71428571428572], [571.0, 169.28571428571428], [569.0, 172.3], [563.0, 183.6818181818182], [565.0, 166.72727272727272], [567.0, 165.57142857142856], [553.0, 161.2], [557.0, 188.0], [555.0, 166.0], [559.0, 189.0], [579.0, 125.0], [591.0, 127.4], [589.0, 129.7142857142857], [587.0, 135.55555555555554], [577.0, 163.14634146341461], [581.0, 127.0], [583.0, 139.28571428571428], [605.0, 189.8], [607.0, 198.2], [603.0, 164.45], [601.0, 133.11111111111111], [593.0, 127.75], [595.0, 127.73333333333333], [597.0, 135.0], [599.0, 191.0], [585.0, 136.66666666666666], [613.0, 177.33333333333334], [619.0, 162.30769230769232], [611.0, 169.16666666666666], [609.0, 194.23333333333332], [623.0, 168.13333333333335], [621.0, 175.6153846153846], [615.0, 159.6], [633.0, 171.31034482758622], [635.0, 152.22222222222223], [637.0, 147.15384615384616], [639.0, 184.42857142857147], [625.0, 171.77272727272725], [627.0, 164.77272727272725], [629.0, 146.85714285714286], [631.0, 156.22222222222223], [617.0, 151.5], [643.0, 164.58333333333337], [655.0, 169.0], [653.0, 142.42857142857144], [651.0, 142.22222222222223], [641.0, 136.33333333333334], [645.0, 148.92307692307693], [647.0, 139.46153846153845], [665.0, 161.8], [667.0, 170.18181818181822], [669.0, 175.23076923076923], [671.0, 173.375], [663.0, 190.0], [661.0, 200.66666666666666], [659.0, 204.0], [657.0, 200.25], [649.0, 139.5], [675.0, 169.1818181818182], [687.0, 158.36363636363637], [685.0, 164.42857142857142], [683.0, 168.26666666666665], [673.0, 191.35714285714286], [677.0, 170.63157894736844], [679.0, 171.375], [703.0, 167.75], [701.0, 153.22222222222223], [699.0, 172.2], [697.0, 154.25], [689.0, 186.44444444444446], [691.0, 186.37499999999997], [693.0, 178.50000000000003], [695.0, 168.37500000000003], [681.0, 170.375], [733.0, 177.84615384615384], [707.0, 179.16666666666666], [711.0, 235.0], [709.0, 234.0], [717.0, 198.11111111111111], [705.0, 152.16666666666666], [735.0, 186.33333333333337], [731.0, 184.71428571428572], [729.0, 177.49999999999997], [721.0, 201.99999999999997], [723.0, 186.37500000000003], [725.0, 179.5], [727.0, 178.63636363636363], [715.0, 168.4], [713.0, 238.70000000000002], [719.0, 170.77777777777777], [739.0, 188.9375], [751.0, 190.11111111111111], [749.0, 168.9411764705882], [747.0, 159.33333333333331], [737.0, 179.70000000000002], [741.0, 175.4], [743.0, 190.44444444444446], [767.0, 231.1428571428571], [765.0, 185.63636363636363], [763.0, 182.0], [761.0, 223.16000000000003], [753.0, 181.66666666666666], [759.0, 214.66666666666666], [757.0, 212.0], [755.0, 216.0], [745.0, 169.45454545454544], [771.0, 194.30769230769232], [783.0, 195.5], [781.0, 203.95454545454547], [779.0, 185.3846153846154], [769.0, 196.0], [773.0, 192.0909090909091], [775.0, 180.81818181818178], [799.0, 196.3846153846154], [797.0, 205.6], [795.0, 210.07142857142856], [793.0, 196.16666666666666], [785.0, 198.0], [787.0, 214.52173913043478], [789.0, 180.44444444444446], [791.0, 190.08333333333334], [777.0, 213.0], [829.0, 235.19230769230768], [805.0, 171.0], [807.0, 220.0], [801.0, 174.0], [803.0, 191.46666666666667], [831.0, 209.125], [827.0, 205.10000000000002], [825.0, 218.69230769230768], [817.0, 201.45454545454547], [819.0, 185.59999999999997], [821.0, 222.60465116279062], [823.0, 187.55555555555554], [813.0, 207.5], [809.0, 220.0], [815.0, 192.2857142857143], [835.0, 202.05882352941177], [847.0, 201.75], [845.0, 192.75], [843.0, 201.83333333333337], [833.0, 223.2], [837.0, 224.42424242424244], [839.0, 204.6153846153846], [863.0, 195.5], [861.0, 230.33333333333334], [859.0, 230.0], [857.0, 229.0], [849.0, 195.53846153846155], [851.0, 215.875], [853.0, 205.4736842105263], [855.0, 209.08333333333337], [841.0, 191.0909090909091], [867.0, 225.50000000000003], [879.0, 223.63157894736844], [877.0, 220.0909090909091], [875.0, 230.5], [865.0, 196.05882352941174], [869.0, 232.36000000000004], [871.0, 233.61904761904762], [881.0, 216.0], [895.0, 234.5], [891.0, 251.71428571428572], [893.0, 273.0], [889.0, 268.05], [883.0, 228.22222222222223], [885.0, 257.4375], [887.0, 240.00000000000003], [873.0, 197.5], [903.0, 230.30769230769232], [899.0, 201.44444444444446], [907.0, 255.75], [897.0, 222.33333333333334], [911.0, 254.0], [909.0, 262.25], [901.0, 196.85714285714286], [927.0, 228.76923076923077], [913.0, 239.8], [925.0, 234.8], [923.0, 220.66666666666669], [921.0, 224.16666666666666], [915.0, 224.00000000000003], [917.0, 205.45454545454547], [919.0, 225.8235294117647], [905.0, 244.1111111111111], [931.0, 228.25000000000003], [943.0, 221.44444444444446], [941.0, 239.26666666666665], [939.0, 223.1578947368421], [929.0, 242.80000000000004], [933.0, 212.61538461538464], [935.0, 224.78571428571428], [957.0, 266.5833333333333], [959.0, 264.0], [955.0, 209.7142857142857], [953.0, 256.85714285714283], [945.0, 213.5], [947.0, 217.08333333333334], [949.0, 219.0], [951.0, 229.06250000000003], [937.0, 244.0], [967.0, 243.28571428571425], [971.0, 265.94117647058823], [965.0, 234.17647058823533], [963.0, 248.04761904761907], [961.0, 251.12000000000003], [975.0, 224.0], [985.0, 203.8125], [987.0, 217.79999999999998], [989.0, 182.88235294117644], [991.0, 244.0], [977.0, 262.32], [979.0, 248.76923076923077], [981.0, 224.54545454545453], [983.0, 215.88888888888889], [969.0, 244.5], [973.0, 255.66666666666663], [995.0, 260.4], [1007.0, 271.51851851851853], [1005.0, 254.78571428571428], [1003.0, 222.05555555555554], [993.0, 248.42857142857144], [997.0, 253.45161290322582], [999.0, 231.78571428571428], [1017.0, 250.54545454545453], [1019.0, 258.5714285714286], [1021.0, 238.42857142857142], [1023.0, 255.3913043478261], [1015.0, 280.50000000000006], [1013.0, 266.0], [1011.0, 259.45833333333337], [1009.0, 263.75], [1001.0, 254.0], [1030.0, 251.59999999999997], [1026.0, 256.0], [1054.0, 229.625], [1050.0, 244.14285714285714], [1046.0, 228.5], [1042.0, 238.35714285714286], [1034.0, 260.17857142857144], [1038.0, 261.00000000000006], [1086.0, 282.53571428571433], [1082.0, 275.7058823529413], [1078.0, 250.4], [1074.0, 269.85714285714283], [1058.0, 279.6], [1066.0, 246.42857142857144], [1062.0, 291.0], [1070.0, 282.3928571428572], [1094.0, 265.25000000000006], [1118.0, 271.2222222222223], [1114.0, 300.3333333333333], [1110.0, 300.2857142857143], [1106.0, 272.55555555555554], [1090.0, 263.96153846153845], [1098.0, 237.54545454545453], [1102.0, 280.51282051282044], [1150.0, 280.00000000000006], [1146.0, 277.5000000000001], [1142.0, 256.7142857142857], [1138.0, 271.34782608695656], [1122.0, 276.2], [1126.0, 300.0], [1130.0, 298.02631578947364], [1134.0, 286.75], [1158.0, 307.5555555555556], [1154.0, 286.6296296296296], [1182.0, 275.875], [1178.0, 292.91666666666663], [1174.0, 281.1538461538462], [1170.0, 295.962962962963], [1214.0, 353.0], [1210.0, 327.875], [1206.0, 287.8333333333333], [1202.0, 278.0526315789474], [1166.0, 316.0], [1162.0, 310.09090909090907], [1186.0, 284.92857142857144], [1190.0, 306.2413793103447], [1194.0, 263.5], [1198.0, 297.6923076923077], [1218.0, 276.1363636363637], [1242.0, 331.4642857142858], [1246.0, 310.8863636363636], [1238.0, 304.125], [1234.0, 294.7826086956522], [1230.0, 299.7857142857142], [1226.0, 316.85], [1222.0, 337.8], [1278.0, 318.2142857142857], [1274.0, 340.2972972972972], [1270.0, 363.41176470588243], [1266.0, 290.1], [1250.0, 289.70000000000005], [1254.0, 314.0285714285716], [1262.0, 330.75], [1258.0, 336.06666666666666], [1294.0, 354.57142857142867], [1286.0, 301.0909090909091], [1306.0, 296.2058823529412], [1302.0, 350.2968750000001], [1282.0, 307.2173913043478], [1290.0, 322.1142857142858], [1318.0, 296.9599999999999], [1314.0, 329.6666666666667], [1342.0, 321.2380952380953], [1334.0, 305.2222222222221], [1338.0, 316.0], [1330.0, 319.12], [1322.0, 329.16666666666663], [1298.0, 346.46153846153845], [1358.0, 337.7916666666666], [1350.0, 327.2307692307692], [1374.0, 340.625], [1346.0, 300.49999999999994], [1354.0, 344.4782608695653], [1378.0, 353.8], [1406.0, 368.54545454545456], [1402.0, 338.2105263157895], [1398.0, 327.24999999999994], [1394.0, 355.6153846153845], [1382.0, 334.240506329114], [1386.0, 355.3666666666667], [1390.0, 348.3877551020408], [1366.0, 376.47368421052624], [1362.0, 346.6666666666667], [1370.0, 318.99999999999994], [1410.0, 376.7411764705882], [1458.0, 385.69696969696963], [1418.0, 353.7735849056605], [1414.0, 357.3214285714286], [1438.0, 390.65306122448993], [1422.0, 362.53846153846155], [1430.0, 372.61111111111103], [1426.0, 381.9], [1434.0, 322.4666666666665], [1466.0, 385.4799999999999], [1462.0, 391.0], [1470.0, 371.90384615384625], [1442.0, 349.64000000000004], [1446.0, 334.88235294117646], [1450.0, 372.74683544303804], [1454.0, 361.7878787878788], [1482.0, 359.8], [1494.0, 357.909090909091], [1474.0, 399.0545454545455], [1478.0, 396.2527472527472], [1502.0, 359.15], [1486.0, 368.1333333333333], [1534.0, 390.78787878787887], [1530.0, 394.42857142857144], [1526.0, 418.5625000000001], [1522.0, 403.9052631578946], [1506.0, 387.5192307692308], [1510.0, 402.0], [1514.0, 401.8], [1518.0, 402.29999999999995], [1490.0, 391.9574468085107], [1498.0, 387.6333333333333], [1542.0, 392.01694915254245], [1550.0, 374.74999999999994], [1566.0, 411.66666666666663], [1562.0, 418.2], [1558.0, 399.8571428571429], [1538.0, 401.2608695652173], [1546.0, 345.625], [1570.0, 368.14285714285717], [1598.0, 389.2857142857142], [1594.0, 387.72], [1590.0, 391.5652173913044], [1586.0, 375.59999999999997], [1582.0, 385.64285714285717], [1578.0, 444.0], [1574.0, 423.35], [1554.0, 391.66666666666663], [1606.0, 435.5102040816326], [1650.0, 383.7692307692308], [1602.0, 353.66666666666663], [1630.0, 455.30769230769226], [1626.0, 447.54166666666663], [1610.0, 443.1538461538462], [1618.0, 421.8571428571429], [1622.0, 381.5625], [1662.0, 431.85714285714283], [1658.0, 360.05882352941177], [1654.0, 355.19999999999993], [1614.0, 414.0], [1634.0, 406.15], [1638.0, 422.7894736842105], [1642.0, 391.09999999999997], [1646.0, 411.40384615384613], [1714.0, 378.20000000000005], [1670.0, 398.4642857142857], [1674.0, 430.0], [1678.0, 426.8], [1718.0, 480.3636363636363], [1722.0, 406.1], [1726.0, 472.6666666666667], [1698.0, 419.8235294117647], [1702.0, 456.7045454545455], [1710.0, 439.19047619047615], [1706.0, 443.25000000000006], [1682.0, 433.88888888888874], [1686.0, 436.33333333333337], [1690.0, 423.82222222222214], [1694.0, 436.4827586206897], [1666.0, 465.89473684210526], [1742.0, 449.9523809523809], [1734.0, 412.99999999999994], [1758.0, 480.2142857142857], [1754.0, 407.6923076923077], [1738.0, 396.40000000000003], [1790.0, 455.69491525423723], [1762.0, 458.1666666666667], [1786.0, 415.5333333333333], [1782.0, 400.47368421052636], [1778.0, 484.0], [1766.0, 394.14285714285717], [1770.0, 418.1081081081081], [1774.0, 483.25], [1746.0, 453.8], [1750.0, 434.42105263157896], [1802.0, 395.8598130841121], [1794.0, 416.3939393939393], [1818.0, 497.33333333333337], [1822.0, 489.5581395348838], [1798.0, 409.20000000000005], [1806.0, 378.29999999999995], [1842.0, 453.0270270270269], [1846.0, 447.9565217391304], [1850.0, 483.1025641025641], [1854.0, 475.05000000000007], [1830.0, 493.0], [1826.0, 499.30769230769226], [1834.0, 422.093023255814], [1838.0, 419.7368421052632], [1814.0, 374.50000000000006], [1866.0, 443.0526315789474], [1862.0, 501.1153846153846], [1870.0, 430.6666666666667], [1914.0, 462.27272727272725], [1906.0, 500.20000000000005], [1918.0, 500.74545454545455], [1874.0, 490.35], [1882.0, 501.0], [1878.0, 498.75], [1886.0, 472.43859649122817], [1890.0, 499.4444444444444], [1894.0, 437.75], [1898.0, 436.64285714285717], [1902.0, 420.6666666666667], [1926.0, 621.8333333333333], [1922.0, 457.53571428571433], [1942.0, 429.61904761904765], [1950.0, 470.77777777777777], [1930.0, 501.0], [1934.0, 447.5416666666667], [1974.0, 447.0], [1978.0, 500.7142857142857], [1982.0, 486.5468749999999], [1970.0, 452.2], [1954.0, 578.0], [1958.0, 521.0], [1962.0, 590.0000000000002], [1966.0, 526.1111111111112], [1938.0, 440.68421052631584], [1946.0, 578.5384615384615], [1990.0, 500.09574468085117], [1986.0, 458.625], [1994.0, 498.79533678756485], [1998.0, 430.0], [1031.0, 249.08695652173913], [1035.0, 227.5], [1027.0, 276.18181818181813], [1055.0, 237.29411764705884], [1051.0, 270.99999999999994], [1047.0, 263.40624999999994], [1043.0, 233.25000000000003], [1039.0, 279.9142857142856], [1087.0, 284.5714285714286], [1083.0, 256.375], [1079.0, 276.7586206896551], [1075.0, 260.6875], [1067.0, 256.875], [1063.0, 296.3103448275862], [1071.0, 288.0666666666668], [1091.0, 247.16666666666666], [1099.0, 273.3571428571429], [1119.0, 278.2105263157895], [1107.0, 293.8888888888889], [1115.0, 301.0], [1111.0, 306.4444444444444], [1095.0, 254.83333333333334], [1103.0, 272.7272727272727], [1151.0, 275.52941176470586], [1147.0, 247.83333333333334], [1143.0, 284.44444444444446], [1139.0, 250.9375], [1123.0, 286.08823529411774], [1127.0, 284.8666666666666], [1131.0, 274.0416666666667], [1135.0, 285.5], [1159.0, 303.3333333333333], [1155.0, 268.6190476190476], [1175.0, 283.9090909090909], [1183.0, 301.3225806451613], [1179.0, 288.06249999999994], [1171.0, 303.1034482758621], [1163.0, 309.0], [1167.0, 268.70370370370364], [1207.0, 290.25], [1211.0, 329.0], [1215.0, 347.45454545454544], [1203.0, 297.5135135135135], [1187.0, 326.92307692307696], [1191.0, 310.93103448275855], [1195.0, 303.43478260869574], [1199.0, 260.5], [1219.0, 301.8666666666666], [1243.0, 329.0555555555555], [1239.0, 289.75], [1247.0, 305.52941176470586], [1235.0, 319.37373737373736], [1223.0, 326.5714285714286], [1227.0, 320.54545454545456], [1231.0, 288.5], [1267.0, 316.21428571428567], [1271.0, 360.75], [1275.0, 321.3333333333333], [1279.0, 305.5121951219514], [1251.0, 294.0833333333333], [1255.0, 325.25], [1263.0, 339.0], [1287.0, 312.9411764705882], [1311.0, 330.0], [1307.0, 313.2], [1303.0, 328.2571428571428], [1283.0, 296.34999999999997], [1291.0, 289.4], [1295.0, 295.6923076923077], [1319.0, 293.78571428571433], [1331.0, 316.50000000000006], [1335.0, 316.9615384615385], [1339.0, 335.23999999999995], [1343.0, 318.8333333333333], [1315.0, 330.0], [1323.0, 368.037037037037], [1299.0, 355.5714285714286], [1359.0, 334.0], [1351.0, 311.14285714285717], [1371.0, 353.5882352941176], [1375.0, 339.79487179487177], [1347.0, 354.17777777777775], [1355.0, 352.2637362637361], [1379.0, 348.8], [1407.0, 340.8108108108107], [1403.0, 358.22680412371113], [1399.0, 318.6], [1395.0, 336.5263157894737], [1383.0, 324.08333333333337], [1387.0, 338.57692307692315], [1391.0, 337.4705882352941], [1367.0, 374.5784313725489], [1363.0, 359.65624999999994], [1423.0, 382.5517241379311], [1415.0, 358.45454545454544], [1411.0, 366.3999999999999], [1419.0, 360.1612903225806], [1459.0, 390.07142857142844], [1463.0, 392.4358974358975], [1467.0, 385.5849056603774], [1471.0, 362.75], [1431.0, 332.2972972972973], [1427.0, 381.16666666666663], [1435.0, 342.6571428571428], [1439.0, 324.99999999999994], [1443.0, 340.8235294117647], [1447.0, 365.6111111111111], [1451.0, 357.8333333333334], [1455.0, 346.6666666666667], [1487.0, 362.34374999999994], [1483.0, 377.7702702702702], [1495.0, 332.875], [1479.0, 392.89473684210526], [1475.0, 393.0], [1503.0, 330.1666666666667], [1535.0, 377.04878048780483], [1523.0, 411.3846153846154], [1527.0, 411.75], [1531.0, 363.0], [1507.0, 380.09999999999997], [1515.0, 401.0909090909092], [1511.0, 401.0], [1519.0, 376.64285714285705], [1491.0, 334.375], [1499.0, 357.8], [1543.0, 391.2666666666666], [1551.0, 406.15000000000003], [1567.0, 416.64285714285717], [1563.0, 418.4], [1559.0, 399.59259259259255], [1539.0, 402.17647058823525], [1547.0, 409.0833333333333], [1599.0, 379.00000000000006], [1595.0, 378.57142857142856], [1591.0, 393.66666666666674], [1587.0, 366.88235294117646], [1571.0, 382.6923076923077], [1579.0, 445.46153846153845], [1575.0, 428.0], [1583.0, 385.55172413793105], [1555.0, 417.6307692307692], [1607.0, 394.99999999999994], [1603.0, 378.96], [1611.0, 444.25000000000006], [1651.0, 383.625], [1655.0, 370.0], [1659.0, 425.7551020408163], [1663.0, 435.6666666666667], [1619.0, 380.2307692307693], [1631.0, 385.2631578947368], [1627.0, 453.14285714285717], [1623.0, 426.22499999999997], [1635.0, 401.58620689655174], [1639.0, 393.8571428571429], [1643.0, 382.0], [1647.0, 393.07142857142856], [1675.0, 421.75], [1671.0, 381.8666666666667], [1687.0, 432.811320754717], [1667.0, 464.5897435897436], [1695.0, 388.6], [1679.0, 428.59259259259255], [1715.0, 451.29032258064507], [1719.0, 480.75], [1727.0, 468.5], [1699.0, 405.75], [1703.0, 398.53333333333336], [1707.0, 435.0000000000001], [1711.0, 442.0], [1683.0, 416.0], [1691.0, 429.421052631579], [1743.0, 390.33333333333326], [1735.0, 393.625], [1731.0, 456.8571428571429], [1759.0, 473.07142857142856], [1755.0, 472.1379310344826], [1739.0, 435.97058823529414], [1763.0, 416.1333333333333], [1791.0, 425.83673469387753], [1787.0, 406.23999999999995], [1783.0, 399.89285714285717], [1779.0, 483.4], [1771.0, 467.2307692307693], [1767.0, 489.6666666666667], [1747.0, 437.2857142857143], [1751.0, 430.3333333333333], [1803.0, 393.7142857142857], [1795.0, 403.14285714285717], [1819.0, 497.0], [1823.0, 428.625], [1799.0, 404.28571428571433], [1807.0, 376.7692307692308], [1843.0, 407.8461538461538], [1847.0, 432.5333333333333], [1851.0, 488.19178082191775], [1855.0, 463.10714285714283], [1827.0, 492.0], [1831.0, 497.7368421052632], [1835.0, 438.037037037037], [1839.0, 422.27272727272725], [1811.0, 370.64705882352933], [1815.0, 405.25000000000006], [1863.0, 485.05555555555554], [1859.0, 498.88], [1871.0, 429.2142857142857], [1867.0, 493.6666666666667], [1915.0, 466.7741935483872], [1911.0, 498.53333333333336], [1919.0, 500.78947368421046], [1879.0, 498.25], [1883.0, 435.3414634146341], [1887.0, 419.70370370370364], [1891.0, 420.25], [1895.0, 430.2105263157895], [1899.0, 449.375], [1903.0, 451.8571428571429], [1927.0, 500.1111111111111], [1923.0, 529.8333333333333], [1943.0, 537.7894736842105], [1951.0, 428.2], [1931.0, 630.2631578947369], [1935.0, 434.92857142857144], [1983.0, 471.2592592592593], [1979.0, 507.6666666666667], [1975.0, 510.0625], [1971.0, 489.3913043478261], [1955.0, 437.0833333333333], [1963.0, 540.6666666666666], [1959.0, 501.11111111111114], [1967.0, 537.0], [1939.0, 481.0555555555556], [1947.0, 549.578947368421], [1987.0, 488.5981308411215], [1991.0, 492.7647058823529], [1995.0, 493.35555555555567], [1999.0, 496.5680473372781], [1.0, 102.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1943.9221275000061, 487.827452500005]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 112851.35, "minX": 1.5852444E12, "maxY": 801658.35, "series": [{"data": [[1.5852444E12, 175838.15], [1.58524446E12, 801658.35], [1.58524452E12, 362503.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5852444E12, 112851.35], [1.58524446E12, 514497.15], [1.58524452E12, 232651.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524452E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 446.7599116005218, "minX": 1.5852444E12, "maxY": 501.37732395601967, "series": [{"data": [[1.5852444E12, 446.7599116005218], [1.58524446E12, 501.37732395601967], [1.58524452E12, 477.7830607152767]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524452E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 446.6948312979839, "minX": 1.5852444E12, "maxY": 501.3749294821134, "series": [{"data": [[1.5852444E12, 446.6948312979839], [1.58524446E12, 501.3749294821134], [1.58524452E12, 477.7809444598443]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524452E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.27741428703446774, "minX": 1.5852444E12, "maxY": 0.38072739050086435, "series": [{"data": [[1.5852444E12, 0.38072739050086435], [1.58524446E12, 0.29161181942407743], [1.58524452E12, 0.27741428703446774]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524452E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 101.0, "minX": 1.5852444E12, "maxY": 683.0, "series": [{"data": [[1.5852444E12, 548.0], [1.58524446E12, 555.0], [1.58524452E12, 683.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5852444E12, 102.0], [1.58524446E12, 108.0], [1.58524452E12, 101.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5852444E12, 502.0], [1.58524446E12, 502.0], [1.58524452E12, 501.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5852444E12, 512.0], [1.58524446E12, 509.0], [1.58524452E12, 620.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5852444E12, 507.0], [1.58524446E12, 502.0], [1.58524452E12, 502.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524452E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 519.0, "maxY": 503.0, "series": [{"data": [[519.0, 109.0], [860.0, 199.0], [3781.0, 501.0], [3962.0, 501.0], [3919.0, 501.0], [3869.0, 176.0], [3894.0, 501.0], [3922.0, 502.0], [3947.0, 501.0], [3906.0, 501.0], [3954.0, 501.0], [3950.0, 501.0], [3933.0, 501.0], [3937.0, 501.0], [3936.0, 447.0], [3978.0, 280.0], [3989.0, 392.0], [3990.0, 503.0], [3991.0, 501.0], [4000.0, 501.0], [3980.0, 501.0], [3979.0, 501.0], [3987.0, 501.0], [3986.0, 391.0], [3988.0, 501.0], [3984.0, 501.0], [3971.0, 501.0], [3976.0, 501.0], [3999.0, 501.0], [3994.0, 501.0], [3997.0, 501.0], [3998.0, 501.0], [3992.0, 501.0], [3975.0, 501.0], [3973.0, 501.0], [3974.0, 501.0], [4009.0, 501.0], [4131.0, 501.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4131.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 519.0, "maxY": 503.0, "series": [{"data": [[519.0, 109.0], [860.0, 196.5], [3781.0, 501.0], [3962.0, 501.0], [3919.0, 501.0], [3869.0, 176.0], [3894.0, 501.0], [3922.0, 502.0], [3947.0, 501.0], [3906.0, 501.0], [3954.0, 501.0], [3950.0, 501.0], [3933.0, 501.0], [3937.0, 501.0], [3936.0, 447.0], [3978.0, 280.0], [3989.0, 392.0], [3990.0, 503.0], [3991.0, 501.0], [4000.0, 501.0], [3980.0, 501.0], [3979.0, 501.0], [3987.0, 501.0], [3986.0, 391.0], [3988.0, 501.0], [3984.0, 501.0], [3971.0, 501.0], [3976.0, 501.0], [3999.0, 501.0], [3994.0, 501.0], [3997.0, 501.0], [3998.0, 501.0], [3992.0, 501.0], [3975.0, 501.0], [3973.0, 501.0], [3974.0, 501.0], [4009.0, 501.0], [4131.0, 501.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4131.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 908.15, "minX": 1.5852444E12, "maxY": 3988.35, "series": [{"data": [[1.5852444E12, 908.15], [1.58524446E12, 3988.35], [1.58524452E12, 1770.1666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524452E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 874.8166666666667, "minX": 1.5852444E12, "maxY": 3988.35, "series": [{"data": [[1.5852444E12, 874.8166666666667], [1.58524446E12, 3988.35], [1.58524452E12, 1803.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524452E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 874.8166666666667, "minX": 1.5852444E12, "maxY": 3988.35, "series": [{"data": [[1.5852444E12, 874.8166666666667], [1.58524446E12, 3988.35], [1.58524452E12, 1803.5]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524452E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 874.8166666666667, "minX": 1.5852444E12, "maxY": 3988.35, "series": [{"data": [[1.5852444E12, 874.8166666666667], [1.58524446E12, 3988.35], [1.58524452E12, 1803.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524452E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

