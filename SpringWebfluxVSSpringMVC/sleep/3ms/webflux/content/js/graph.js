/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 2889.0, "series": [{"data": [[0.0, 4.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 4.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 4.0], [1.0, 4.0], [1.1, 4.0], [1.2, 4.0], [1.3, 4.0], [1.4, 4.0], [1.5, 4.0], [1.6, 4.0], [1.7, 4.0], [1.8, 4.0], [1.9, 4.0], [2.0, 4.0], [2.1, 4.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 4.0], [2.8, 4.0], [2.9, 4.0], [3.0, 4.0], [3.1, 4.0], [3.2, 4.0], [3.3, 4.0], [3.4, 4.0], [3.5, 4.0], [3.6, 4.0], [3.7, 4.0], [3.8, 4.0], [3.9, 4.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 4.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 4.0], [4.9, 4.0], [5.0, 4.0], [5.1, 4.0], [5.2, 4.0], [5.3, 4.0], [5.4, 4.0], [5.5, 4.0], [5.6, 4.0], [5.7, 4.0], [5.8, 4.0], [5.9, 4.0], [6.0, 4.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 5.0], [6.5, 5.0], [6.6, 5.0], [6.7, 5.0], [6.8, 5.0], [6.9, 5.0], [7.0, 5.0], [7.1, 5.0], [7.2, 5.0], [7.3, 5.0], [7.4, 5.0], [7.5, 5.0], [7.6, 5.0], [7.7, 5.0], [7.8, 5.0], [7.9, 5.0], [8.0, 5.0], [8.1, 5.0], [8.2, 5.0], [8.3, 5.0], [8.4, 5.0], [8.5, 5.0], [8.6, 5.0], [8.7, 5.0], [8.8, 5.0], [8.9, 5.0], [9.0, 5.0], [9.1, 5.0], [9.2, 5.0], [9.3, 5.0], [9.4, 5.0], [9.5, 5.0], [9.6, 5.0], [9.7, 5.0], [9.8, 5.0], [9.9, 5.0], [10.0, 5.0], [10.1, 5.0], [10.2, 5.0], [10.3, 5.0], [10.4, 5.0], [10.5, 5.0], [10.6, 5.0], [10.7, 5.0], [10.8, 5.0], [10.9, 5.0], [11.0, 5.0], [11.1, 5.0], [11.2, 5.0], [11.3, 5.0], [11.4, 5.0], [11.5, 5.0], [11.6, 5.0], [11.7, 5.0], [11.8, 5.0], [11.9, 5.0], [12.0, 5.0], [12.1, 5.0], [12.2, 5.0], [12.3, 5.0], [12.4, 5.0], [12.5, 5.0], [12.6, 5.0], [12.7, 5.0], [12.8, 5.0], [12.9, 5.0], [13.0, 5.0], [13.1, 5.0], [13.2, 5.0], [13.3, 5.0], [13.4, 5.0], [13.5, 5.0], [13.6, 5.0], [13.7, 5.0], [13.8, 5.0], [13.9, 5.0], [14.0, 5.0], [14.1, 5.0], [14.2, 5.0], [14.3, 5.0], [14.4, 5.0], [14.5, 5.0], [14.6, 5.0], [14.7, 5.0], [14.8, 5.0], [14.9, 5.0], [15.0, 5.0], [15.1, 5.0], [15.2, 5.0], [15.3, 5.0], [15.4, 5.0], [15.5, 5.0], [15.6, 5.0], [15.7, 5.0], [15.8, 5.0], [15.9, 5.0], [16.0, 5.0], [16.1, 5.0], [16.2, 5.0], [16.3, 5.0], [16.4, 5.0], [16.5, 5.0], [16.6, 5.0], [16.7, 5.0], [16.8, 5.0], [16.9, 5.0], [17.0, 5.0], [17.1, 5.0], [17.2, 5.0], [17.3, 5.0], [17.4, 5.0], [17.5, 5.0], [17.6, 5.0], [17.7, 5.0], [17.8, 5.0], [17.9, 5.0], [18.0, 5.0], [18.1, 5.0], [18.2, 5.0], [18.3, 5.0], [18.4, 5.0], [18.5, 5.0], [18.6, 5.0], [18.7, 5.0], [18.8, 5.0], [18.9, 5.0], [19.0, 5.0], [19.1, 5.0], [19.2, 5.0], [19.3, 5.0], [19.4, 5.0], [19.5, 5.0], [19.6, 5.0], [19.7, 5.0], [19.8, 5.0], [19.9, 5.0], [20.0, 5.0], [20.1, 5.0], [20.2, 5.0], [20.3, 5.0], [20.4, 5.0], [20.5, 5.0], [20.6, 5.0], [20.7, 5.0], [20.8, 5.0], [20.9, 5.0], [21.0, 5.0], [21.1, 5.0], [21.2, 5.0], [21.3, 5.0], [21.4, 5.0], [21.5, 5.0], [21.6, 5.0], [21.7, 5.0], [21.8, 5.0], [21.9, 5.0], [22.0, 5.0], [22.1, 5.0], [22.2, 5.0], [22.3, 5.0], [22.4, 5.0], [22.5, 5.0], [22.6, 5.0], [22.7, 5.0], [22.8, 5.0], [22.9, 5.0], [23.0, 5.0], [23.1, 5.0], [23.2, 5.0], [23.3, 5.0], [23.4, 5.0], [23.5, 5.0], [23.6, 5.0], [23.7, 5.0], [23.8, 5.0], [23.9, 5.0], [24.0, 5.0], [24.1, 5.0], [24.2, 5.0], [24.3, 5.0], [24.4, 5.0], [24.5, 5.0], [24.6, 5.0], [24.7, 5.0], [24.8, 5.0], [24.9, 5.0], [25.0, 5.0], [25.1, 5.0], [25.2, 5.0], [25.3, 5.0], [25.4, 5.0], [25.5, 5.0], [25.6, 5.0], [25.7, 5.0], [25.8, 5.0], [25.9, 5.0], [26.0, 5.0], [26.1, 5.0], [26.2, 5.0], [26.3, 5.0], [26.4, 5.0], [26.5, 5.0], [26.6, 5.0], [26.7, 5.0], [26.8, 5.0], [26.9, 5.0], [27.0, 5.0], [27.1, 5.0], [27.2, 5.0], [27.3, 5.0], [27.4, 5.0], [27.5, 5.0], [27.6, 6.0], [27.7, 6.0], [27.8, 6.0], [27.9, 6.0], [28.0, 6.0], [28.1, 6.0], [28.2, 6.0], [28.3, 6.0], [28.4, 6.0], [28.5, 6.0], [28.6, 6.0], [28.7, 6.0], [28.8, 6.0], [28.9, 6.0], [29.0, 6.0], [29.1, 6.0], [29.2, 6.0], [29.3, 6.0], [29.4, 6.0], [29.5, 6.0], [29.6, 6.0], [29.7, 6.0], [29.8, 6.0], [29.9, 6.0], [30.0, 6.0], [30.1, 6.0], [30.2, 6.0], [30.3, 6.0], [30.4, 6.0], [30.5, 6.0], [30.6, 6.0], [30.7, 6.0], [30.8, 6.0], [30.9, 6.0], [31.0, 6.0], [31.1, 6.0], [31.2, 6.0], [31.3, 6.0], [31.4, 6.0], [31.5, 6.0], [31.6, 6.0], [31.7, 6.0], [31.8, 6.0], [31.9, 6.0], [32.0, 6.0], [32.1, 6.0], [32.2, 6.0], [32.3, 6.0], [32.4, 6.0], [32.5, 6.0], [32.6, 6.0], [32.7, 6.0], [32.8, 6.0], [32.9, 6.0], [33.0, 6.0], [33.1, 6.0], [33.2, 6.0], [33.3, 6.0], [33.4, 6.0], [33.5, 6.0], [33.6, 6.0], [33.7, 6.0], [33.8, 6.0], [33.9, 6.0], [34.0, 6.0], [34.1, 6.0], [34.2, 6.0], [34.3, 6.0], [34.4, 6.0], [34.5, 6.0], [34.6, 6.0], [34.7, 6.0], [34.8, 6.0], [34.9, 6.0], [35.0, 6.0], [35.1, 6.0], [35.2, 6.0], [35.3, 6.0], [35.4, 6.0], [35.5, 6.0], [35.6, 6.0], [35.7, 6.0], [35.8, 6.0], [35.9, 6.0], [36.0, 6.0], [36.1, 6.0], [36.2, 6.0], [36.3, 6.0], [36.4, 6.0], [36.5, 6.0], [36.6, 6.0], [36.7, 6.0], [36.8, 6.0], [36.9, 6.0], [37.0, 6.0], [37.1, 7.0], [37.2, 7.0], [37.3, 7.0], [37.4, 7.0], [37.5, 7.0], [37.6, 7.0], [37.7, 7.0], [37.8, 7.0], [37.9, 7.0], [38.0, 7.0], [38.1, 7.0], [38.2, 7.0], [38.3, 7.0], [38.4, 7.0], [38.5, 7.0], [38.6, 7.0], [38.7, 7.0], [38.8, 7.0], [38.9, 7.0], [39.0, 7.0], [39.1, 7.0], [39.2, 7.0], [39.3, 7.0], [39.4, 7.0], [39.5, 7.0], [39.6, 7.0], [39.7, 7.0], [39.8, 7.0], [39.9, 7.0], [40.0, 7.0], [40.1, 7.0], [40.2, 7.0], [40.3, 7.0], [40.4, 7.0], [40.5, 7.0], [40.6, 7.0], [40.7, 7.0], [40.8, 7.0], [40.9, 7.0], [41.0, 7.0], [41.1, 7.0], [41.2, 7.0], [41.3, 7.0], [41.4, 7.0], [41.5, 7.0], [41.6, 7.0], [41.7, 7.0], [41.8, 7.0], [41.9, 7.0], [42.0, 7.0], [42.1, 7.0], [42.2, 7.0], [42.3, 7.0], [42.4, 7.0], [42.5, 7.0], [42.6, 7.0], [42.7, 7.0], [42.8, 7.0], [42.9, 8.0], [43.0, 8.0], [43.1, 8.0], [43.2, 8.0], [43.3, 8.0], [43.4, 8.0], [43.5, 8.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 8.0], [46.1, 8.0], [46.2, 8.0], [46.3, 8.0], [46.4, 8.0], [46.5, 8.0], [46.6, 8.0], [46.7, 8.0], [46.8, 8.0], [46.9, 8.0], [47.0, 8.0], [47.1, 9.0], [47.2, 9.0], [47.3, 9.0], [47.4, 9.0], [47.5, 9.0], [47.6, 9.0], [47.7, 9.0], [47.8, 9.0], [47.9, 9.0], [48.0, 9.0], [48.1, 9.0], [48.2, 9.0], [48.3, 9.0], [48.4, 9.0], [48.5, 9.0], [48.6, 9.0], [48.7, 9.0], [48.8, 9.0], [48.9, 9.0], [49.0, 9.0], [49.1, 9.0], [49.2, 9.0], [49.3, 9.0], [49.4, 9.0], [49.5, 9.0], [49.6, 9.0], [49.7, 9.0], [49.8, 9.0], [49.9, 9.0], [50.0, 9.0], [50.1, 9.0], [50.2, 9.0], [50.3, 9.0], [50.4, 9.0], [50.5, 9.0], [50.6, 9.0], [50.7, 10.0], [50.8, 10.0], [50.9, 10.0], [51.0, 10.0], [51.1, 10.0], [51.2, 10.0], [51.3, 10.0], [51.4, 10.0], [51.5, 10.0], [51.6, 10.0], [51.7, 10.0], [51.8, 10.0], [51.9, 10.0], [52.0, 10.0], [52.1, 10.0], [52.2, 10.0], [52.3, 10.0], [52.4, 10.0], [52.5, 10.0], [52.6, 10.0], [52.7, 10.0], [52.8, 10.0], [52.9, 10.0], [53.0, 10.0], [53.1, 10.0], [53.2, 10.0], [53.3, 10.0], [53.4, 10.0], [53.5, 10.0], [53.6, 10.0], [53.7, 10.0], [53.8, 11.0], [53.9, 11.0], [54.0, 11.0], [54.1, 11.0], [54.2, 11.0], [54.3, 11.0], [54.4, 11.0], [54.5, 11.0], [54.6, 11.0], [54.7, 11.0], [54.8, 11.0], [54.9, 11.0], [55.0, 11.0], [55.1, 11.0], [55.2, 11.0], [55.3, 11.0], [55.4, 11.0], [55.5, 11.0], [55.6, 11.0], [55.7, 11.0], [55.8, 11.0], [55.9, 11.0], [56.0, 11.0], [56.1, 11.0], [56.2, 11.0], [56.3, 11.0], [56.4, 12.0], [56.5, 12.0], [56.6, 12.0], [56.7, 12.0], [56.8, 12.0], [56.9, 12.0], [57.0, 12.0], [57.1, 12.0], [57.2, 12.0], [57.3, 12.0], [57.4, 12.0], [57.5, 12.0], [57.6, 12.0], [57.7, 12.0], [57.8, 12.0], [57.9, 12.0], [58.0, 12.0], [58.1, 12.0], [58.2, 12.0], [58.3, 12.0], [58.4, 12.0], [58.5, 13.0], [58.6, 13.0], [58.7, 13.0], [58.8, 13.0], [58.9, 13.0], [59.0, 13.0], [59.1, 13.0], [59.2, 13.0], [59.3, 13.0], [59.4, 13.0], [59.5, 13.0], [59.6, 13.0], [59.7, 13.0], [59.8, 13.0], [59.9, 13.0], [60.0, 13.0], [60.1, 13.0], [60.2, 14.0], [60.3, 14.0], [60.4, 14.0], [60.5, 14.0], [60.6, 14.0], [60.7, 14.0], [60.8, 14.0], [60.9, 14.0], [61.0, 14.0], [61.1, 14.0], [61.2, 14.0], [61.3, 14.0], [61.4, 14.0], [61.5, 14.0], [61.6, 14.0], [61.7, 14.0], [61.8, 15.0], [61.9, 15.0], [62.0, 15.0], [62.1, 15.0], [62.2, 15.0], [62.3, 15.0], [62.4, 15.0], [62.5, 15.0], [62.6, 15.0], [62.7, 15.0], [62.8, 15.0], [62.9, 15.0], [63.0, 15.0], [63.1, 15.0], [63.2, 16.0], [63.3, 16.0], [63.4, 16.0], [63.5, 16.0], [63.6, 16.0], [63.7, 16.0], [63.8, 16.0], [63.9, 16.0], [64.0, 16.0], [64.1, 16.0], [64.2, 16.0], [64.3, 16.0], [64.4, 16.0], [64.5, 17.0], [64.6, 17.0], [64.7, 17.0], [64.8, 17.0], [64.9, 17.0], [65.0, 17.0], [65.1, 17.0], [65.2, 17.0], [65.3, 17.0], [65.4, 17.0], [65.5, 17.0], [65.6, 18.0], [65.7, 18.0], [65.8, 18.0], [65.9, 18.0], [66.0, 18.0], [66.1, 18.0], [66.2, 18.0], [66.3, 18.0], [66.4, 18.0], [66.5, 18.0], [66.6, 19.0], [66.7, 19.0], [66.8, 19.0], [66.9, 19.0], [67.0, 19.0], [67.1, 19.0], [67.2, 19.0], [67.3, 19.0], [67.4, 20.0], [67.5, 20.0], [67.6, 20.0], [67.7, 20.0], [67.8, 20.0], [67.9, 20.0], [68.0, 20.0], [68.1, 20.0], [68.2, 21.0], [68.3, 21.0], [68.4, 21.0], [68.5, 21.0], [68.6, 21.0], [68.7, 21.0], [68.8, 21.0], [68.9, 21.0], [69.0, 22.0], [69.1, 22.0], [69.2, 22.0], [69.3, 22.0], [69.4, 22.0], [69.5, 22.0], [69.6, 22.0], [69.7, 23.0], [69.8, 23.0], [69.9, 23.0], [70.0, 23.0], [70.1, 23.0], [70.2, 23.0], [70.3, 24.0], [70.4, 24.0], [70.5, 24.0], [70.6, 24.0], [70.7, 24.0], [70.8, 24.0], [70.9, 25.0], [71.0, 25.0], [71.1, 25.0], [71.2, 25.0], [71.3, 25.0], [71.4, 25.0], [71.5, 26.0], [71.6, 26.0], [71.7, 26.0], [71.8, 26.0], [71.9, 26.0], [72.0, 26.0], [72.1, 27.0], [72.2, 27.0], [72.3, 27.0], [72.4, 27.0], [72.5, 27.0], [72.6, 27.0], [72.7, 28.0], [72.8, 28.0], [72.9, 28.0], [73.0, 28.0], [73.1, 28.0], [73.2, 28.0], [73.3, 29.0], [73.4, 29.0], [73.5, 29.0], [73.6, 29.0], [73.7, 29.0], [73.8, 29.0], [73.9, 30.0], [74.0, 30.0], [74.1, 30.0], [74.2, 30.0], [74.3, 30.0], [74.4, 30.0], [74.5, 31.0], [74.6, 31.0], [74.7, 31.0], [74.8, 31.0], [74.9, 31.0], [75.0, 31.0], [75.1, 31.0], [75.2, 32.0], [75.3, 32.0], [75.4, 32.0], [75.5, 32.0], [75.6, 32.0], [75.7, 32.0], [75.8, 33.0], [75.9, 33.0], [76.0, 33.0], [76.1, 33.0], [76.2, 33.0], [76.3, 33.0], [76.4, 34.0], [76.5, 34.0], [76.6, 34.0], [76.7, 34.0], [76.8, 34.0], [76.9, 34.0], [77.0, 35.0], [77.1, 35.0], [77.2, 35.0], [77.3, 35.0], [77.4, 35.0], [77.5, 35.0], [77.6, 36.0], [77.7, 36.0], [77.8, 36.0], [77.9, 36.0], [78.0, 36.0], [78.1, 36.0], [78.2, 37.0], [78.3, 37.0], [78.4, 37.0], [78.5, 37.0], [78.6, 37.0], [78.7, 37.0], [78.8, 38.0], [78.9, 38.0], [79.0, 38.0], [79.1, 38.0], [79.2, 38.0], [79.3, 38.0], [79.4, 38.0], [79.5, 39.0], [79.6, 39.0], [79.7, 39.0], [79.8, 39.0], [79.9, 39.0], [80.0, 39.0], [80.1, 40.0], [80.2, 40.0], [80.3, 40.0], [80.4, 40.0], [80.5, 40.0], [80.6, 40.0], [80.7, 40.0], [80.8, 41.0], [80.9, 41.0], [81.0, 41.0], [81.1, 41.0], [81.2, 41.0], [81.3, 41.0], [81.4, 41.0], [81.5, 42.0], [81.6, 42.0], [81.7, 42.0], [81.8, 42.0], [81.9, 42.0], [82.0, 42.0], [82.1, 42.0], [82.2, 42.0], [82.3, 43.0], [82.4, 43.0], [82.5, 43.0], [82.6, 43.0], [82.7, 43.0], [82.8, 43.0], [82.9, 43.0], [83.0, 43.0], [83.1, 44.0], [83.2, 44.0], [83.3, 44.0], [83.4, 44.0], [83.5, 44.0], [83.6, 44.0], [83.7, 44.0], [83.8, 44.0], [83.9, 44.0], [84.0, 45.0], [84.1, 45.0], [84.2, 45.0], [84.3, 45.0], [84.4, 45.0], [84.5, 45.0], [84.6, 45.0], [84.7, 45.0], [84.8, 45.0], [84.9, 46.0], [85.0, 46.0], [85.1, 46.0], [85.2, 46.0], [85.3, 46.0], [85.4, 46.0], [85.5, 46.0], [85.6, 46.0], [85.7, 46.0], [85.8, 47.0], [85.9, 47.0], [86.0, 47.0], [86.1, 47.0], [86.2, 47.0], [86.3, 47.0], [86.4, 47.0], [86.5, 47.0], [86.6, 47.0], [86.7, 47.0], [86.8, 48.0], [86.9, 48.0], [87.0, 48.0], [87.1, 48.0], [87.2, 48.0], [87.3, 48.0], [87.4, 48.0], [87.5, 48.0], [87.6, 48.0], [87.7, 49.0], [87.8, 49.0], [87.9, 49.0], [88.0, 49.0], [88.1, 49.0], [88.2, 49.0], [88.3, 49.0], [88.4, 49.0], [88.5, 49.0], [88.6, 49.0], [88.7, 50.0], [88.8, 50.0], [88.9, 50.0], [89.0, 50.0], [89.1, 50.0], [89.2, 50.0], [89.3, 50.0], [89.4, 50.0], [89.5, 50.0], [89.6, 51.0], [89.7, 51.0], [89.8, 51.0], [89.9, 51.0], [90.0, 51.0], [90.1, 51.0], [90.2, 51.0], [90.3, 51.0], [90.4, 51.0], [90.5, 51.0], [90.6, 52.0], [90.7, 52.0], [90.8, 52.0], [90.9, 52.0], [91.0, 52.0], [91.1, 52.0], [91.2, 52.0], [91.3, 52.0], [91.4, 53.0], [91.5, 53.0], [91.6, 53.0], [91.7, 53.0], [91.8, 53.0], [91.9, 53.0], [92.0, 53.0], [92.1, 54.0], [92.2, 54.0], [92.3, 54.0], [92.4, 54.0], [92.5, 54.0], [92.6, 54.0], [92.7, 55.0], [92.8, 55.0], [92.9, 55.0], [93.0, 55.0], [93.1, 55.0], [93.2, 55.0], [93.3, 56.0], [93.4, 56.0], [93.5, 56.0], [93.6, 56.0], [93.7, 57.0], [93.8, 57.0], [93.9, 57.0], [94.0, 58.0], [94.1, 58.0], [94.2, 58.0], [94.3, 58.0], [94.4, 59.0], [94.5, 59.0], [94.6, 60.0], [94.7, 60.0], [94.8, 60.0], [94.9, 61.0], [95.0, 62.0], [95.1, 62.0], [95.2, 63.0], [95.3, 63.0], [95.4, 64.0], [95.5, 65.0], [95.6, 66.0], [95.7, 66.0], [95.8, 67.0], [95.9, 68.0], [96.0, 69.0], [96.1, 70.0], [96.2, 71.0], [96.3, 72.0], [96.4, 73.0], [96.5, 74.0], [96.6, 75.0], [96.7, 77.0], [96.8, 78.0], [96.9, 79.0], [97.0, 81.0], [97.1, 83.0], [97.2, 85.0], [97.3, 87.0], [97.4, 89.0], [97.5, 91.0], [97.6, 93.0], [97.7, 95.0], [97.8, 98.0], [97.9, 101.0], [98.0, 104.0], [98.1, 108.0], [98.2, 111.0], [98.3, 114.0], [98.4, 119.0], [98.5, 124.0], [98.6, 129.0], [98.7, 136.0], [98.8, 143.0], [98.9, 149.0], [99.0, 156.0], [99.1, 166.0], [99.2, 178.0], [99.3, 194.0], [99.4, 217.0], [99.5, 233.0], [99.6, 254.0], [99.7, 297.0], [99.8, 380.0], [99.9, 515.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 391423.0, "series": [{"data": [[0.0, 391423.0], [600.0, 88.0], [700.0, 7.0], [2800.0, 1.0], [200.0, 1511.0], [800.0, 7.0], [900.0, 13.0], [1000.0, 8.0], [1100.0, 3.0], [300.0, 456.0], [100.0, 5885.0], [400.0, 299.0], [1600.0, 1.0], [1700.0, 149.0], [500.0, 149.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 151.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 399576.0, "series": [{"data": [[0.0, 399576.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 273.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 151.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1082.5977325000395, "minX": 1.58524374E12, "maxY": 1082.5977325000395, "series": [{"data": [[1.58524374E12, 1082.5977325000395]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524374E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 299.2, "series": [{"data": [[2.0, 4.0], [3.0, 4.571428571428571], [4.0, 4.230769230769231], [5.0, 4.0], [6.0, 4.2], [7.0, 4.6], [9.0, 4.181818181818182], [10.0, 5.0], [11.0, 4.2857142857142865], [12.0, 4.0], [13.0, 4.352941176470588], [14.0, 4.5], [15.0, 4.2727272727272725], [16.0, 4.363636363636364], [17.0, 4.0], [18.0, 4.218750000000001], [19.0, 4.374999999999999], [20.0, 4.0], [21.0, 4.0], [22.0, 4.333333333333334], [23.0, 4.0], [24.0, 4.083333333333333], [25.0, 6.0], [26.0, 4.428571428571429], [27.0, 4.0], [28.0, 4.0], [29.0, 4.153846153846153], [30.0, 4.133333333333333], [31.0, 4.4], [33.0, 4.0], [32.0, 4.176470588235294], [35.0, 4.208333333333333], [34.0, 5.0], [37.0, 4.133333333333334], [36.0, 4.124999999999999], [39.0, 4.222222222222223], [38.0, 4.333333333333333], [41.0, 4.111111111111111], [40.0, 4.142857142857143], [43.0, 4.1], [42.0, 4.466666666666668], [44.0, 4.240740740740741], [47.0, 4.250000000000001], [46.0, 4.2], [49.0, 4.0], [48.0, 4.749999999999999], [51.0, 4.25], [50.0, 4.0], [53.0, 4.0], [52.0, 4.25], [55.0, 4.115384615384617], [54.0, 4.0], [57.0, 4.8181818181818175], [56.0, 4.0], [59.0, 4.0], [61.0, 4.0], [60.0, 4.238095238095237], [63.0, 4.444444444444445], [62.0, 4.416666666666666], [67.0, 4.6], [66.0, 4.333333333333333], [65.0, 4.5], [64.0, 4.352941176470587], [71.0, 4.111111111111111], [70.0, 4.2857142857142865], [69.0, 4.0], [68.0, 4.333333333333333], [75.0, 4.333333333333333], [74.0, 4.2195121951219505], [73.0, 4.105263157894736], [72.0, 4.0], [79.0, 4.0], [78.0, 4.0], [77.0, 5.0], [76.0, 4.0], [83.0, 4.222222222222222], [82.0, 4.363636363636364], [81.0, 4.412698412698412], [80.0, 4.307692307692308], [87.0, 4.225806451612905], [86.0, 4.0], [85.0, 5.0], [84.0, 4.263157894736842], [90.0, 4.714285714285714], [89.0, 4.2444444444444445], [88.0, 4.266666666666666], [95.0, 4.3125], [94.0, 4.166666666666666], [93.0, 4.411764705882353], [92.0, 4.302631578947367], [99.0, 4.444444444444445], [98.0, 4.449999999999998], [97.0, 4.333333333333333], [96.0, 4.0], [103.0, 4.28], [101.0, 4.35], [100.0, 4.0], [107.0, 4.0], [106.0, 4.424242424242425], [105.0, 4.230769230769231], [104.0, 4.0], [111.0, 4.269230769230767], [110.0, 4.083333333333333], [109.0, 4.421052631578949], [108.0, 4.1764705882352935], [115.0, 4.25], [114.0, 4.0], [112.0, 4.875], [119.0, 4.409090909090908], [118.0, 4.333333333333334], [117.0, 4.0], [116.0, 4.0], [123.0, 4.298507462686567], [122.0, 4.045454545454545], [121.0, 4.0], [120.0, 4.416666666666666], [127.0, 4.222222222222221], [126.0, 4.4375], [125.0, 4.0], [124.0, 4.279999999999999], [135.0, 4.0], [134.0, 5.0], [133.0, 4.2857142857142865], [132.0, 4.05], [131.0, 4.437500000000001], [130.0, 4.0], [129.0, 4.407407407407408], [128.0, 4.7058823529411775], [143.0, 4.388888888888889], [142.0, 4.3030303030303045], [141.0, 4.468085106382978], [140.0, 4.355555555555556], [138.0, 5.0], [137.0, 5.0], [136.0, 4.300000000000001], [151.0, 4.666666666666666], [150.0, 5.0], [149.0, 4.666666666666667], [148.0, 4.153846153846153], [147.0, 4.259259259259259], [146.0, 4.0], [145.0, 4.416666666666666], [159.0, 4.529411764705884], [158.0, 4.0], [157.0, 4.0], [156.0, 4.361111111111112], [155.0, 4.0], [154.0, 4.687500000000001], [153.0, 4.0], [167.0, 5.0], [166.0, 4.514285714285714], [165.0, 4.444444444444442], [164.0, 4.250000000000001], [163.0, 4.285714285714286], [162.0, 4.44], [161.0, 4.6], [160.0, 4.173913043478261], [175.0, 4.382978723404255], [174.0, 4.1], [173.0, 4.545454545454546], [172.0, 4.0], [171.0, 4.483333333333333], [170.0, 4.214285714285715], [169.0, 4.666666666666666], [168.0, 4.519230769230769], [182.0, 5.0], [181.0, 4.433333333333334], [180.0, 4.357142857142858], [179.0, 4.2], [178.0, 4.39622641509434], [177.0, 5.0], [176.0, 4.444444444444445], [190.0, 15.966666666666665], [191.0, 5.0], [189.0, 4.238095238095238], [187.0, 4.2285714285714295], [186.0, 4.0], [185.0, 4.666666666666667], [184.0, 5.0], [192.0, 33.40625], [197.0, 31.379310344827598], [196.0, 87.5], [198.0, 44.46031746031746], [195.0, 10.193548387096772], [193.0, 48.24], [194.0, 7.46153846153846], [199.0, 5.666666666666667], [200.0, 48.709090909090925], [201.0, 50.692307692307686], [207.0, 5.187499999999999], [206.0, 18.468085106382983], [204.0, 4.1], [205.0, 24.142857142857142], [203.0, 21.27450980392157], [202.0, 45.75000000000001], [215.0, 36.97435897435897], [214.0, 20.243902439024385], [213.0, 8.815384615384618], [212.0, 42.900000000000006], [211.0, 5.000000000000001], [210.0, 31.21052631578947], [209.0, 8.814814814814815], [208.0, 9.580000000000004], [216.0, 44.82758620689654], [217.0, 10.406250000000002], [218.0, 4.857142857142856], [219.0, 5.2857142857142865], [220.0, 5.872093023255815], [221.0, 8.418086500655305], [223.0, 4.777777777777778], [222.0, 4.875], [231.0, 11.923076923076923], [230.0, 6.471698113207549], [229.0, 21.421052631578945], [227.0, 6.197368421052631], [226.0, 6.285714285714286], [225.0, 4.5], [224.0, 6.037037037037039], [228.0, 4.578947368421053], [238.0, 5.0588235294117645], [237.0, 12.142857142857142], [239.0, 5.0588235294117645], [236.0, 4.5], [234.0, 4.954545454545455], [233.0, 4.6], [232.0, 4.300000000000001], [247.0, 16.0], [246.0, 12.857142857142861], [245.0, 6.000000000000001], [243.0, 9.0], [241.0, 7.615384615384615], [244.0, 5.125], [242.0, 4.551020408163266], [240.0, 4.5], [251.0, 26.333333333333336], [254.0, 5.087719298245612], [248.0, 5.542857142857144], [255.0, 5.206896551724137], [253.0, 4.482758620689656], [252.0, 5.0], [250.0, 4.689320388349512], [249.0, 5.0], [257.0, 5.090909090909091], [256.0, 6.170212765957445], [258.0, 4.756756756756757], [259.0, 5.5], [260.0, 5.173913043478262], [261.0, 6.732142857142857], [262.0, 6.567567567567569], [263.0, 5.566037735849058], [266.0, 4.500000000000002], [268.0, 5.829268292682925], [269.0, 5.115384615384617], [270.0, 10.09352517985611], [271.0, 4.999999999999999], [265.0, 5.0], [264.0, 5.111111111111111], [267.0, 4.923076923076923], [285.0, 10.299999999999999], [272.0, 4.699999999999999], [275.0, 5.196969696969696], [274.0, 5.2], [273.0, 4.636363636363635], [284.0, 5.153846153846154], [276.0, 5.076923076923077], [277.0, 5.0], [278.0, 5.8], [279.0, 5.083333333333333], [282.0, 13.330316742081449], [281.0, 5.0], [280.0, 4.795454545454546], [283.0, 4.857142857142857], [287.0, 20.75], [286.0, 5.695652173913044], [290.0, 15.000000000000002], [302.0, 19.5], [297.0, 7.606741573033708], [303.0, 5.153846153846153], [296.0, 5.315789473684211], [300.0, 6.0547945205479445], [291.0, 4.285714285714286], [301.0, 5.0], [298.0, 20.166666666666664], [299.0, 4.983870967741936], [295.0, 4.7142857142857135], [294.0, 7.538461538461538], [293.0, 6.32142857142857], [292.0, 4.857142857142857], [289.0, 8.0], [288.0, 6.916666666666667], [316.0, 5.719101123595505], [313.0, 7.529411764705883], [314.0, 5.517647058823529], [315.0, 4.428571428571429], [312.0, 5.92], [311.0, 5.5], [310.0, 4.916666666666668], [309.0, 5.210526315789473], [308.0, 4.523809523809524], [306.0, 5.46753246753247], [305.0, 5.375000000000002], [307.0, 5.488372093023257], [304.0, 5.363636363636364], [319.0, 5.314814814814814], [317.0, 5.0], [334.0, 9.193548387096781], [333.0, 10.333333333333334], [335.0, 7.000000000000001], [332.0, 5.7142857142857135], [331.0, 5.0], [330.0, 5.947368421052632], [329.0, 5.75], [328.0, 5.374999999999999], [327.0, 4.947368421052632], [321.0, 5.620253164556962], [320.0, 5.466666666666666], [323.0, 5.391304347826087], [322.0, 4.923076923076923], [326.0, 5.733333333333333], [325.0, 5.6875], [324.0, 5.125], [349.0, 5.0], [338.0, 5.333333333333333], [337.0, 5.538461538461541], [336.0, 5.347826086956521], [339.0, 7.644902634593354], [343.0, 6.1938775510204085], [342.0, 5.222222222222223], [341.0, 4.870967741935483], [340.0, 5.0], [350.0, 4.714285714285714], [345.0, 5.263157894736842], [344.0, 7.0], [348.0, 5.0], [347.0, 5.365079365079366], [346.0, 5.517241379310345], [355.0, 5.295454545454547], [367.0, 8.7], [362.0, 5.555555555555555], [361.0, 5.454545454545454], [360.0, 6.0], [359.0, 5.416666666666667], [358.0, 5.392857142857143], [356.0, 8.666666666666666], [357.0, 5.249999999999999], [353.0, 5.62962962962963], [352.0, 5.333333333333334], [354.0, 5.622222222222222], [366.0, 5.35820895522388], [365.0, 5.5675675675675675], [364.0, 4.975], [380.0, 5.724137931034481], [376.0, 7.06418918918919], [375.0, 21.349999999999998], [370.0, 6.574468085106385], [371.0, 5.111111111111112], [368.0, 11.375000000000002], [369.0, 5.833333333333333], [377.0, 6.1515151515151505], [378.0, 5.793103448275863], [379.0, 5.229166666666668], [381.0, 6.043478260869565], [382.0, 6.0], [383.0, 5.132075471698115], [373.0, 10.099999999999998], [372.0, 5.312500000000001], [374.0, 5.162790697674421], [385.0, 5.166666666666667], [387.0, 6.639344262295084], [386.0, 5.277777777777778], [396.0, 7.068322981366459], [397.0, 7.508951406649615], [398.0, 6.569230769230769], [399.0, 5.666666666666667], [388.0, 5.9], [389.0, 6.371900826446282], [390.0, 6.138888888888888], [391.0, 5.935483870967742], [384.0, 5.744186046511627], [392.0, 5.782178217821783], [393.0, 5.931034482758621], [394.0, 6.41025641025641], [395.0, 5.7], [412.0, 5.986111111111112], [402.0, 6.0357142857142865], [400.0, 6.76923076923077], [407.0, 6.157894736842104], [406.0, 5.565217391304348], [401.0, 7.3], [403.0, 17.625], [404.0, 8.708333333333334], [405.0, 5.6721311475409815], [408.0, 7.818181818181818], [410.0, 5.8888888888888875], [409.0, 6.384615384615385], [411.0, 5.760000000000001], [413.0, 6.916666666666667], [414.0, 5.783783783783782], [415.0, 5.814814814814815], [423.0, 9.919999999999998], [416.0, 6.026315789473685], [417.0, 8.670454545454549], [419.0, 5.84], [418.0, 6.455357142857146], [420.0, 8.4], [421.0, 7.137254901960788], [422.0, 5.983606557377045], [424.0, 7.318032786885247], [425.0, 4.999999999999999], [426.0, 5.846153846153845], [427.0, 5.428571428571428], [428.0, 5.62857142857143], [429.0, 6.142857142857142], [430.0, 5.8433734939759026], [431.0, 6.148936170212767], [433.0, 5.73469387755102], [432.0, 7.648148148148151], [434.0, 5.885714285714286], [435.0, 6.900000000000001], [436.0, 8.576923076923077], [437.0, 7.3809523809523805], [438.0, 6.2142857142857135], [439.0, 6.273504273504275], [444.0, 7.210526315789474], [445.0, 8.578947368421051], [446.0, 7.576388888888885], [447.0, 6.0625], [441.0, 6.554054054054053], [440.0, 6.0], [443.0, 7.008264462809921], [442.0, 7.020833333333333], [449.0, 7.1060606060606055], [448.0, 4.4], [450.0, 9.571428571428573], [451.0, 7.800000000000001], [452.0, 7.166666666666666], [453.0, 6.644670050761417], [454.0, 6.411764705882353], [455.0, 6.892857142857143], [456.0, 6.3457943925233655], [460.0, 6.139240506329115], [461.0, 6.25], [462.0, 6.75], [463.0, 7.101694915254239], [459.0, 11.41666666666667], [458.0, 6.873015873015873], [457.0, 6.0], [465.0, 8.152777777777779], [464.0, 6.5], [466.0, 7.1000000000000005], [467.0, 8.423913043478256], [468.0, 9.346938775510203], [469.0, 9.824427480916029], [470.0, 10.551724137931037], [471.0, 8.256410256410257], [472.0, 9.746835443037973], [478.0, 8.587301587301587], [479.0, 9.09433962264151], [476.0, 7.931297709923661], [477.0, 8.468085106382976], [473.0, 9.272727272727272], [474.0, 10.236842105263154], [475.0, 6.84375], [481.0, 7.333333333333335], [480.0, 10.850746268656714], [482.0, 6.434210526315791], [483.0, 6.655172413793107], [484.0, 8.782608695652172], [485.0, 11.993836671802773], [487.0, 6.729729729729731], [486.0, 5.774647887323942], [489.0, 7.142857142857142], [492.0, 9.428571428571429], [493.0, 9.9375], [495.0, 8.478260869565217], [488.0, 5.791666666666667], [494.0, 6.55813953488372], [490.0, 6.961538461538463], [491.0, 6.44736842105263], [497.0, 8.0], [496.0, 7.598130841121495], [498.0, 7.3999999999999995], [499.0, 12.153846153846146], [500.0, 13.398692810457517], [501.0, 6.6875], [502.0, 6.0], [503.0, 6.826666666666667], [504.0, 7.617283950617282], [508.0, 6.617647058823531], [509.0, 7.057142857142856], [510.0, 8.81818181818182], [511.0, 7.260869565217392], [506.0, 6.275862068965516], [505.0, 6.542857142857145], [507.0, 7.7391304347826075], [516.0, 6.36], [518.0, 6.92920353982301], [512.0, 5.666666666666667], [526.0, 6.7], [522.0, 7.181818181818181], [524.0, 8.146844660194178], [514.0, 6.95], [536.0, 11.558823529411764], [538.0, 7.312500000000001], [540.0, 6.999999999999999], [542.0, 6.5], [530.0, 6.293333333333335], [528.0, 6.925000000000001], [532.0, 10.625], [534.0, 7.675], [520.0, 7.666666666666667], [548.0, 14.785714285714288], [550.0, 7.083333333333334], [544.0, 7.642105263157894], [558.0, 7.945205479452052], [556.0, 15.499999999999998], [554.0, 12.511627906976743], [546.0, 7.166666666666667], [568.0, 7.944444444444445], [570.0, 7.166666666666667], [572.0, 6.241379310344828], [574.0, 6.698630136986302], [560.0, 14.666666666666666], [562.0, 10.540740740740736], [564.0, 7.095238095238097], [566.0, 6.92], [552.0, 7.681159420289855], [576.0, 6.75], [580.0, 8.125], [590.0, 6.529411764705882], [588.0, 6.333333333333333], [586.0, 6.000000000000001], [584.0, 6.699999999999999], [578.0, 5.822429906542057], [582.0, 7.855421686746984], [600.0, 5.909090909090909], [602.0, 6.083720930232556], [604.0, 8.022222222222222], [594.0, 6.512820512820513], [596.0, 6.285714285714285], [592.0, 5.8125], [598.0, 4.714285714285714], [606.0, 6.10491803278688], [632.0, 5.166666666666666], [628.0, 13.906250000000002], [626.0, 31.744525547445274], [630.0, 6.218181818181816], [614.0, 19.07692307692308], [612.0, 11.000000000000002], [610.0, 6.546511627906977], [608.0, 5.888888888888889], [622.0, 26.666666666666664], [620.0, 11.519823788546251], [618.0, 38.51219512195123], [616.0, 10.117647058823527], [634.0, 10.442472582253215], [624.0, 21.04999999999999], [638.0, 10.5], [636.0, 6.727272727272727], [642.0, 16.839248434238], [640.0, 9.2], [654.0, 5.071428571428571], [652.0, 6.308641975308642], [650.0, 5.875000000000001], [648.0, 6.399999999999998], [660.0, 6.072916666666667], [662.0, 5.769230769230767], [666.0, 8.690721649484535], [664.0, 5.979166666666668], [646.0, 6.84375], [644.0, 8.604651162790697], [668.0, 8.690355329949238], [658.0, 6.349999999999999], [656.0, 5.090909090909091], [670.0, 12.000000000000002], [674.0, 16.044776119402986], [696.0, 7.242105263157895], [676.0, 6.730769230769233], [678.0, 5.731343283582089], [684.0, 299.2], [682.0, 4.677777777777781], [680.0, 4.718518518518521], [672.0, 18.0], [686.0, 5.2727272727272725], [688.0, 10.258823529411767], [690.0, 5.225806451612902], [692.0, 5.041420118343196], [694.0, 4.829787234042553], [698.0, 12.019607843137258], [700.0, 5.0], [702.0, 12.407766990291268], [706.0, 18.695652173913043], [710.0, 12.779220779220777], [704.0, 5.161290322580645], [718.0, 5.000000000000002], [714.0, 4.5], [716.0, 7.705882352941174], [708.0, 8.080000000000002], [728.0, 7.157407407407406], [730.0, 11.482758620689657], [732.0, 10.047297297297293], [734.0, 9.871508379888267], [720.0, 7.072368421052632], [722.0, 6.146067415730338], [724.0, 18.874999999999996], [726.0, 7.625], [712.0, 5.535714285714287], [736.0, 9.799999999999999], [764.0, 13.200000000000001], [750.0, 14.470588235294116], [748.0, 12.568807339449538], [746.0, 15.499999999999996], [744.0, 8.511904761904766], [738.0, 52.9], [752.0, 13.818749999999998], [754.0, 15.125000000000002], [756.0, 14.917721518987342], [758.0, 10.568862275449098], [766.0, 8.238095238095237], [762.0, 9.200000000000001], [760.0, 13.428571428571429], [742.0, 6.6800000000000015], [740.0, 8.444444444444445], [782.0, 10.742187499999998], [778.0, 11.054992764109995], [776.0, 12.153846153846155], [780.0, 9.965853658536586], [788.0, 10.296296296296296], [790.0, 12.280373831775703], [794.0, 9.229166666666668], [792.0, 8.376811594202898], [774.0, 10.68333333333333], [772.0, 11.333333333333334], [770.0, 7.8125], [768.0, 11.562499999999995], [784.0, 11.641975308641975], [786.0, 11.868055555555554], [798.0, 8.892241379310345], [796.0, 10.153846153846152], [804.0, 13.249999999999998], [802.0, 10.0], [812.0, 8.704301075268816], [800.0, 8.638888888888893], [816.0, 8.402366863905321], [828.0, 7.14159292035398], [830.0, 10.499999999999998], [826.0, 7.803278688524593], [824.0, 7.789915966386557], [806.0, 12.5], [818.0, 8.321839080459768], [820.0, 8.06153846153846], [822.0, 10.188118811881187], [808.0, 6.7183908045977025], [810.0, 8.375000000000005], [814.0, 8.63492063492063], [838.0, 7.277777777777779], [832.0, 6.094202898550726], [834.0, 11.6668290306868], [836.0, 6.983333333333334], [856.0, 6.321148825065271], [858.0, 6.3260437375745475], [860.0, 5.958333333333334], [862.0, 6.2835820895522385], [848.0, 17.295726495726495], [850.0, 39.20334728033472], [852.0, 36.6626164439043], [854.0, 57.40872427983542], [846.0, 6.636363636363637], [844.0, 7.793103448275865], [842.0, 5.838709677419355], [840.0, 7.465116279069767], [890.0, 6.23469387755102], [888.0, 29.53333333333333], [894.0, 10.102564102564106], [880.0, 6.155555555555556], [882.0, 5.845659163987138], [892.0, 8.225000000000001], [864.0, 5.6728723404255375], [866.0, 5.8352941176470585], [868.0, 6.042857142857142], [870.0, 6.611111111111111], [878.0, 6.2727272727272725], [876.0, 5.971929824561399], [874.0, 6.999999999999999], [872.0, 5.5], [886.0, 5.731958762886597], [884.0, 7.242187499999997], [902.0, 7.8824110671936785], [920.0, 8.285714285714285], [910.0, 5.378787878787878], [898.0, 12.723404255319146], [900.0, 6.833333333333334], [924.0, 8.804054054054053], [922.0, 15.1], [926.0, 7.565656565656563], [912.0, 34.09089104981147], [914.0, 41.771370247512166], [918.0, 11.23456790123457], [916.0, 16.958333333333332], [904.0, 4.5], [906.0, 12.822033898305087], [908.0, 6.9830508474576245], [896.0, 6.019607843137253], [956.0, 8.335766423357661], [958.0, 8.785714285714294], [944.0, 40.71830985915491], [946.0, 5.782608695652173], [948.0, 15.982142857142852], [954.0, 4.454545454545455], [952.0, 21.594594594594625], [934.0, 7.109022556390977], [930.0, 6.396039603960397], [932.0, 5.6934523809523805], [928.0, 9.186915887850466], [942.0, 5.983673469387751], [940.0, 6.205607476635516], [938.0, 6.561403508771928], [936.0, 7.469026548672565], [950.0, 10.362500000000002], [960.0, 7.546875], [964.0, 13.87462235649547], [974.0, 13.655367231638417], [972.0, 5.961832061068707], [970.0, 5.6726190476190474], [968.0, 7.236363636363635], [962.0, 7.153846153846153], [984.0, 7.916844349680171], [986.0, 6.448818897637793], [966.0, 8.461538461538462], [976.0, 7.173010380622837], [978.0, 6.818840579710143], [980.0, 8.553191489361707], [982.0, 9.5625], [990.0, 6.028735632183905], [988.0, 5.790697674418605], [1020.0, 7.355932203389826], [1022.0, 5.333333333333333], [1018.0, 6.113300492610834], [1010.0, 9.801346801346803], [1008.0, 4.488372093023252], [1012.0, 5.961956521739131], [1014.0, 5.5540540540540535], [1006.0, 5.047576301615798], [992.0, 8.849315068493146], [994.0, 5.512195121951219], [996.0, 6.038910505836576], [998.0, 5.107142857142859], [1016.0, 5.947368421052632], [1004.0, 8.201634877384203], [1002.0, 6.254601226993864], [1000.0, 5.441176470588235], [1076.0, 17.711399711399725], [1072.0, 11.677083333333332], [1056.0, 12.117647058823529], [1060.0, 9.693251533742329], [1064.0, 17.357798165137613], [1084.0, 14.158477508650519], [1080.0, 12.007418397626122], [1024.0, 5.232786885245896], [1028.0, 6.237288135593219], [1032.0, 5.175373134328357], [1036.0, 5.7640653357531795], [1052.0, 16.014084507042256], [1048.0, 8.12545454545455], [1044.0, 5.406113537117906], [1040.0, 5.1818181818181825], [1068.0, 8.630705394190866], [1148.0, 26.21180555555554], [1108.0, 42.094160967911556], [1104.0, 42.17034700315458], [1120.0, 24.168421052631576], [1124.0, 21.43269230769232], [1132.0, 17.392727272727274], [1128.0, 19.91285403050111], [1144.0, 16.91776315789474], [1140.0, 20.44575936883628], [1136.0, 15.780722891566278], [1112.0, 38.20550847457622], [1116.0, 49.356246864024044], [1100.0, 43.03153988868273], [1096.0, 11.259036144578316], [1092.0, 14.570731707317067], [1088.0, 13.946808510638297], [1208.0, 10.384615384615385], [1204.0, 8.473214285714285], [1184.0, 24.80952380952381], [1192.0, 15.33584905660377], [1188.0, 13.181818181818182], [1212.0, 14.617312072892945], [1152.0, 13.753371868978808], [1156.0, 14.21739130434782], [1160.0, 13.781818181818183], [1164.0, 11.280000000000006], [1200.0, 5.965909090909091], [1180.0, 16.440366972477072], [1176.0, 17.70689655172413], [1172.0, 23.810126582278482], [1168.0, 15.20618556701031], [1196.0, 12.342298288508566], [1220.0, 18.93959731543624], [1248.0, 22.800604229607252], [1244.0, 27.316265060240955], [1236.0, 17.308823529411757], [1232.0, 30.82142857142857], [1240.0, 18.400000000000006], [1216.0, 17.092307692307692], [1228.0, 23.413223140495855], [1224.0, 37.739999999999995], [1264.0, 18.314009661835755], [1268.0, 12.52696078431374], [1272.0, 14.885714285714286], [1276.0, 23.355855855855857], [1252.0, 37.8404255319149], [1256.0, 16.035928143712574], [1260.0, 24.391025641025646], [1336.0, 29.619686800894865], [1312.0, 23.337468982630277], [1316.0, 33.32383419689118], [1320.0, 55.575471698113176], [1340.0, 18.172413793103452], [1284.0, 23.29866666666667], [1280.0, 13.53310104529617], [1288.0, 26.01234567901233], [1328.0, 31.618181818181814], [1332.0, 30.966442953020156], [1292.0, 31.668555240793236], [1308.0, 31.93069306930691], [1300.0, 24.988344988344963], [1296.0, 26.23863636363636], [1304.0, 26.2461059190031], [1324.0, 39.43910256410257], [1372.0, 16.525382755842074], [1360.0, 10.59322033898305], [1364.0, 12.766627771295216], [1368.0, 14.533333333333333], [1344.0, 30.472361809045236], [1348.0, 32.30612244897959], [1352.0, 43.52577319587628], [1356.0, 40.7449275362319], [1376.0, 15.20959843290892], [1392.0, 12.10354223433243], [1400.0, 13.419354838709681], [1396.0, 14.203252032520329], [1404.0, 9.968749999999998], [1380.0, 10.420432220039297], [1384.0, 8.936507936507935], [1388.0, 17.612903225806452], [1460.0, 14.526946107784443], [1444.0, 38.25], [1468.0, 10.5], [1464.0, 13.65137614678899], [1436.0, 11.15819209039548], [1408.0, 12.266666666666666], [1412.0, 12.451923076923073], [1420.0, 14.955555555555575], [1456.0, 29.305343511450385], [1416.0, 11.333333333333334], [1432.0, 19.94573643410853], [1428.0, 14.701754385964914], [1424.0, 18.327044025157225], [1452.0, 14.967948717948714], [1448.0, 17.958333333333336], [1440.0, 13.960937499999998], [1524.0, 6.333333333333333], [1532.0, 5.824817518248171], [1520.0, 7.183673469387756], [1528.0, 5.787878787878788], [1480.0, 10.401408450704228], [1484.0, 18.000000000000004], [1472.0, 12.677685950413222], [1476.0, 17.669811320754715], [1516.0, 7.176470588235294], [1512.0, 9.035087719298245], [1508.0, 35.99999999999999], [1504.0, 61.50000000000001], [1500.0, 16.32631578947369], [1496.0, 8.803278688524584], [1492.0, 16.66125760649087], [1488.0, 10.576923076923075], [1592.0, 48.555555555555564], [1596.0, 6.304347826086957], [1568.0, 33.12790697674417], [1572.0, 5.705882352941177], [1576.0, 13.192307692307693], [1588.0, 8.0], [1584.0, 7.5734597156398085], [1548.0, 5.83842794759825], [1544.0, 13.571428571428573], [1540.0, 6.111353711790393], [1536.0, 6.384057971014494], [1564.0, 5.719298245614033], [1556.0, 5.125], [1552.0, 5.946666666666667], [1560.0, 6.272727272727272], [1580.0, 5.848780487804878], [1656.0, 39.81732851985557], [1660.0, 8.486434108527128], [1636.0, 6.445595854922277], [1632.0, 7.111607142857145], [1652.0, 4.943661971830987], [1600.0, 6.541484716157206], [1604.0, 5.8], [1612.0, 5.891304347826087], [1648.0, 5.246913580246912], [1608.0, 5.803921568627451], [1628.0, 7.011857707509881], [1624.0, 7.0807453416149055], [1620.0, 8.772307692307683], [1616.0, 29.701492537313428], [1644.0, 5.072824156305509], [1640.0, 5.240384615384617], [1716.0, 14.444444444444441], [1724.0, 8.860215053763445], [1700.0, 9.02083333333333], [1696.0, 12.333333333333332], [1720.0, 33.2], [1712.0, 39.33333333333332], [1676.0, 12.402061855670103], [1672.0, 12.585106382978726], [1668.0, 11.588339222614836], [1664.0, 11.133333333333336], [1692.0, 19.806722689075634], [1688.0, 12.741935483870968], [1684.0, 47.421052631578945], [1680.0, 13.652173913043478], [1708.0, 13.499999999999998], [1704.0, 16.886075949367093], [1776.0, 5.7], [1764.0, 9.81038647342996], [1736.0, 16.858490566037737], [1732.0, 9.974576271186443], [1728.0, 13.163701067615651], [1740.0, 13.571428571428571], [1780.0, 5.2150000000000025], [1784.0, 4.490384615384616], [1760.0, 11.675739644970397], [1768.0, 10.46153846153846], [1756.0, 9.191740412979335], [1772.0, 8.636792452830193], [1752.0, 14.013377926421407], [1744.0, 8.153153153153154], [1748.0, 11.190954773869331], [1085.0, 12.651515151515152], [1057.0, 14.552067381316986], [1061.0, 15.730684326710804], [1065.0, 12.729999999999999], [1073.0, 14.493299832495827], [1081.0, 12.851515151515157], [1077.0, 17.145652173913046], [1025.0, 5.498614958448757], [1029.0, 7.813953488372092], [1033.0, 5.583623693379792], [1037.0, 5.724770642201837], [1053.0, 16.4390243902439], [1049.0, 10.347140039447732], [1045.0, 6.166666666666668], [1041.0, 5.680751173708921], [1069.0, 8.251170046801874], [1149.0, 6.0], [1105.0, 35.82658959537572], [1129.0, 17.27327327327327], [1125.0, 27.93604651162788], [1121.0, 17.493771234428056], [1133.0, 15.750929368029732], [1145.0, 21.785714285714292], [1141.0, 15.036016949152549], [1137.0, 13.617391304347827], [1101.0, 32.26339285714287], [1109.0, 40.443798449612395], [1113.0, 43.86249999999999], [1117.0, 36.212094653812564], [1097.0, 14.17699115044247], [1093.0, 15.5], [1089.0, 11.0625], [1209.0, 13.496969696969694], [1189.0, 14.105906313645624], [1185.0, 14.988789237668167], [1193.0, 18.043532338308488], [1213.0, 15.309523809523807], [1205.0, 6.0], [1153.0, 16.103174603174605], [1157.0, 15.992424242424233], [1161.0, 16.612499999999997], [1165.0, 22.362068965517246], [1201.0, 6.76923076923077], [1181.0, 15.999999999999998], [1177.0, 16.357142857142858], [1173.0, 17.411764705882348], [1169.0, 15.195918367346936], [1197.0, 23.224489795918355], [1245.0, 19.236842105263154], [1237.0, 27.233333333333334], [1233.0, 33.33333333333333], [1241.0, 22.125], [1217.0, 10.782051282051276], [1221.0, 19.770034843205586], [1229.0, 47.06122448979594], [1225.0, 21.21428571428572], [1265.0, 17.69060773480663], [1269.0, 7.137864077669903], [1277.0, 14.416666666666666], [1273.0, 17.91111111111111], [1249.0, 15.684782608695652], [1253.0, 27.25196850393701], [1257.0, 20.92753623188407], [1261.0, 14.241735537190094], [1341.0, 35.74842767295598], [1313.0, 29.847389558232937], [1317.0, 28.71745562130177], [1321.0, 39.433593749999986], [1337.0, 29.19166666666667], [1281.0, 16.523668639053252], [1289.0, 20.550000000000004], [1285.0, 29.976973684210563], [1293.0, 32.757575757575744], [1329.0, 44.60779220779222], [1333.0, 20.768025078369927], [1309.0, 25.446666666666665], [1297.0, 26.237903225806456], [1301.0, 14.849557522123892], [1305.0, 32.57054263565891], [1325.0, 32.84868421052631], [1373.0, 13.345661450924602], [1361.0, 8.479704797047969], [1365.0, 14.520833333333334], [1369.0, 15.382608695652175], [1345.0, 30.489197530864192], [1349.0, 63.11526147278545], [1353.0, 44.534545454545416], [1357.0, 15.610533610533603], [1377.0, 12.85496183206107], [1405.0, 10.503030303030307], [1397.0, 8.0], [1401.0, 11.973741794310719], [1393.0, 41.099999999999994], [1381.0, 12.568877551020405], [1389.0, 12.84285714285714], [1385.0, 13.956521739130435], [1465.0, 11.285714285714286], [1469.0, 14.943661971830986], [1441.0, 13.800000000000002], [1449.0, 15.100000000000001], [1445.0, 21.77631578947369], [1461.0, 8.555555555555555], [1457.0, 16.340206185567006], [1421.0, 15.313868613138684], [1417.0, 14.735135135135131], [1413.0, 13.27586206896552], [1409.0, 13.097826086956522], [1433.0, 14.977777777777776], [1437.0, 9.673076923076923], [1429.0, 15.909090909090912], [1425.0, 13.923076923076927], [1453.0, 12.444444444444445], [1533.0, 6.594594594594595], [1529.0, 5.773504273504277], [1517.0, 6.615384615384616], [1505.0, 10.911392405063287], [1513.0, 12.333333333333334], [1509.0, 11.713656387665203], [1473.0, 12.99598393574297], [1481.0, 13.574468085106384], [1477.0, 27.392857142857142], [1521.0, 8.467391304347826], [1525.0, 6.5384615384615365], [1485.0, 16.778260869565212], [1501.0, 11.04974271012007], [1497.0, 10.939849624060155], [1493.0, 16.311594202898554], [1489.0, 12.797752808988772], [1589.0, 6.237864077669902], [1549.0, 7.428571428571429], [1597.0, 5.65], [1569.0, 6.033519553072625], [1593.0, 6.41628959276018], [1585.0, 6.538461538461538], [1545.0, 5.666666666666667], [1541.0, 8.585858585858581], [1537.0, 6.000000000000003], [1577.0, 5.705882352941177], [1581.0, 6.33478260869565], [1573.0, 5.234042553191489], [1565.0, 5.690909090909092], [1561.0, 10.090909090909088], [1557.0, 5.682926829268293], [1553.0, 5.7], [1649.0, 5.907407407407405], [1661.0, 8.910714285714286], [1657.0, 8.212218649517684], [1653.0, 4.836734693877549], [1629.0, 5.685606060606055], [1605.0, 5.847826086956521], [1601.0, 45.4], [1613.0, 5.759162303664924], [1609.0, 5.939849624060151], [1617.0, 5.8150684931506875], [1621.0, 9.617977528089883], [1625.0, 5.594059405940592], [1645.0, 5.652525252525253], [1641.0, 4.965367965367964], [1637.0, 5.025210084033613], [1633.0, 4.822857142857143], [1717.0, 12.600000000000001], [1713.0, 53.59090909090908], [1725.0, 10.957597173144867], [1697.0, 19.166666666666664], [1721.0, 16.137931034482758], [1677.0, 11.771929824561399], [1673.0, 10.0], [1669.0, 12.215946843853816], [1665.0, 10.526881720430104], [1693.0, 14.389999999999993], [1689.0, 6.5], [1685.0, 18.36453201970443], [1681.0, 15.252525252525256], [1709.0, 13.257309941520466], [1705.0, 11.060240963855426], [1701.0, 8.109090909090911], [1741.0, 19.5], [1765.0, 11.025210084033622], [1761.0, 10.21846153846155], [1781.0, 5.72972972972973], [1737.0, 7.629032258064515], [1733.0, 9.526666666666667], [1729.0, 10.61538461538461], [1777.0, 6.365229110512132], [1769.0, 8.098654708520177], [1753.0, 9.311897106109331], [1757.0, 8.842391304347837], [1773.0, 6.805970149253733], [1745.0, 10.93632958801499], [1749.0, 12.083333333333332], [515.0, 7.328124999999999], [513.0, 8.75], [527.0, 7.609375000000001], [525.0, 7.341463414634143], [523.0, 8.54761904761905], [517.0, 7.225], [519.0, 7.884615384615384], [537.0, 10.666666666666666], [539.0, 7.363636363636362], [541.0, 8.295454545454547], [543.0, 6.153846153846154], [531.0, 7.363636363636365], [529.0, 7.555555555555558], [533.0, 10.461538461538463], [535.0, 11.727272727272728], [521.0, 10.352941176470589], [547.0, 8.299999999999999], [545.0, 7.317241379310347], [559.0, 13.3542857142857], [557.0, 7.564102564102564], [555.0, 6.5], [549.0, 8.0], [551.0, 7.351351351351351], [569.0, 6.566037735849054], [571.0, 7.203883495145632], [573.0, 6.999999999999999], [575.0, 6.041237113402062], [561.0, 8.382978723404253], [563.0, 6.0], [565.0, 7.626666666666666], [567.0, 7.333333333333334], [553.0, 8.333333333333332], [579.0, 7.169230769230772], [577.0, 6.2142857142857135], [591.0, 7.5], [589.0, 5.905405405405404], [587.0, 5.833333333333333], [585.0, 5.615384615384616], [581.0, 5.0], [583.0, 12.271111111111118], [601.0, 5.757575757575759], [603.0, 6.999999999999999], [605.0, 7.384615384615385], [607.0, 10.33928571428571], [593.0, 5.823529411764705], [595.0, 6.230769230769231], [599.0, 6.277777777777778], [597.0, 6.899371069182393], [613.0, 24.152173913043484], [615.0, 11.071428571428571], [625.0, 50.88], [627.0, 5.800000000000001], [629.0, 5.770833333333334], [631.0, 6.179104477611939], [611.0, 5.428571428571428], [609.0, 9.90909090909091], [623.0, 18.144508670520228], [621.0, 18.61111111111112], [619.0, 24.87179487179486], [617.0, 8.56], [633.0, 5.819727891156459], [639.0, 9.470588235294118], [637.0, 6.655172413793102], [635.0, 6.524752475247525], [643.0, 9.458904109589037], [655.0, 5.406976744186048], [653.0, 5.874999999999999], [651.0, 6.136363636363638], [649.0, 6.363636363636364], [641.0, 20.577746077032806], [659.0, 14.125000000000004], [661.0, 14.88888888888889], [663.0, 5.417910447761194], [665.0, 5.418604651162792], [647.0, 7.812499999999999], [645.0, 7.538461538461539], [667.0, 5.235849056603773], [669.0, 13.86363636363637], [671.0, 18.77358490566038], [657.0, 5.873417721518985], [687.0, 4.25], [677.0, 4.916666666666666], [679.0, 4.840000000000001], [683.0, 4.959183673469386], [681.0, 4.767123287671233], [685.0, 5.615384615384616], [673.0, 17.0], [675.0, 13.625], [691.0, 14.873786407766989], [689.0, 5.5], [693.0, 5.031578947368419], [695.0, 6.668292682926827], [697.0, 5.427312775330399], [699.0, 5.478873239436621], [701.0, 30.0], [703.0, 5.416666666666666], [707.0, 18.75], [705.0, 8.254545454545454], [717.0, 13.190000000000007], [719.0, 7.656976744186046], [715.0, 7.25770308123249], [709.0, 72.69230769230771], [711.0, 10.767441860465114], [729.0, 9.087719298245613], [731.0, 30.9375], [733.0, 7.769230769230769], [735.0, 9.403225806451612], [721.0, 4.836065573770491], [723.0, 5.021739130434781], [725.0, 6.753333333333335], [727.0, 13.666666666666668], [713.0, 14.376923076923083], [739.0, 70.93020833333328], [751.0, 15.843137254901961], [749.0, 19.0], [747.0, 11.447058823529408], [745.0, 11.163636363636362], [737.0, 11.771084337349397], [767.0, 6.857142857142857], [753.0, 13.314285714285713], [755.0, 16.48497854077253], [759.0, 10.469999999999997], [765.0, 13.024390243902442], [763.0, 11.71009771986972], [761.0, 11.823232323232324], [743.0, 7.285714285714286], [741.0, 7.380281690140845], [775.0, 9.785714285714283], [795.0, 9.485148514851492], [779.0, 9.265957446808509], [777.0, 12.11111111111111], [781.0, 10.169902912621357], [787.0, 11.740740740740737], [789.0, 11.597402597402596], [791.0, 10.530120481927712], [793.0, 8.857142857142858], [773.0, 14.130081300813005], [771.0, 9.400000000000002], [769.0, 12.830882352941176], [783.0, 9.710843373493976], [799.0, 10.692307692307693], [785.0, 11.067567567567567], [797.0, 9.085365853658542], [805.0, 8.610526315789478], [801.0, 11.22321428571429], [815.0, 20.5], [803.0, 8.666666666666668], [831.0, 8.066225165562916], [829.0, 17.142857142857146], [827.0, 7.244131455399056], [807.0, 9.777027027027026], [825.0, 7.507246376811595], [817.0, 9.764705882352942], [819.0, 9.264367816091953], [821.0, 7.993055555555554], [823.0, 10.244444444444444], [809.0, 8.820000000000002], [811.0, 8.565656565656564], [813.0, 9.721739130434786], [837.0, 6.472222222222221], [847.0, 7.230769230769232], [833.0, 8.185185185185183], [835.0, 5.76923076923077], [839.0, 7.219298245614033], [859.0, 6.5172413793103425], [861.0, 6.553435114503818], [863.0, 5.924757281553396], [849.0, 24.046648130985524], [851.0, 42.07792207792208], [853.0, 10.497360084477291], [855.0, 5.857142857142858], [845.0, 6.414634146341464], [843.0, 7.9812734082397], [841.0, 7.439560439560437], [891.0, 7.100000000000001], [895.0, 5.838509316770187], [881.0, 6.285714285714284], [893.0, 7.386138613861388], [889.0, 16.510204081632654], [873.0, 43.418918918918905], [879.0, 5.583333333333333], [865.0, 6.064516129032257], [867.0, 6.453744493392071], [869.0, 6.25], [871.0, 5.333333333333334], [877.0, 5.866666666666667], [875.0, 5.876923076923077], [887.0, 5.7894736842105265], [885.0, 6.119266055045871], [883.0, 13.607843137254902], [921.0, 10.973684210526315], [899.0, 5.822429906542052], [901.0, 6.166666666666667], [903.0, 5.0], [923.0, 10.971153846153843], [925.0, 6.927007299270072], [927.0, 7.197452229299366], [913.0, 50.45840504876663], [919.0, 27.499999999999996], [917.0, 22.09090909090909], [915.0, 16.96153846153846], [905.0, 6.315789473684211], [907.0, 13.5], [909.0, 4.941176470588237], [911.0, 5.798833819241984], [897.0, 6.0227272727272725], [955.0, 5.108108108108109], [953.0, 16.96296296296297], [959.0, 11.28211009174313], [945.0, 6.7846153846153845], [947.0, 5.385964912280703], [949.0, 6.815384615384615], [957.0, 8.865853658536587], [935.0, 12.208791208791217], [933.0, 26.153846153846143], [931.0, 17.425675675675684], [929.0, 13.13003095975233], [943.0, 5.573529411764706], [941.0, 5.176470588235294], [939.0, 6.012422360248445], [937.0, 5.185185185185184], [951.0, 24.894736842105267], [963.0, 23.476635514018696], [961.0, 6.618589743589746], [975.0, 5.531645569620253], [973.0, 13.083333333333336], [971.0, 6.058823529411764], [969.0, 5.414364640883978], [965.0, 41.92129125861437], [967.0, 6.037837837837836], [985.0, 6.674603174603174], [987.0, 5.736842105263158], [991.0, 6.656862745098039], [979.0, 7.6999999999999975], [977.0, 7.312977099236637], [981.0, 8.602876106194698], [983.0, 7.18918918918919], [989.0, 18.555555555555554], [1019.0, 8.863013698630136], [997.0, 6.505747126436783], [1021.0, 6.370689655172414], [1017.0, 5.387434554973823], [1009.0, 7.421121251629735], [1011.0, 6.988764044943825], [1013.0, 5.333333333333332], [1015.0, 5.858333333333335], [1023.0, 5.4552238805970115], [1007.0, 4.762295081967211], [993.0, 6.502499999999998], [995.0, 6.586206896551723], [999.0, 5.250000000000001], [1005.0, 5.387184115523467], [1003.0, 7.0], [1001.0, 5.937409024745269], [1082.0, 12.61527680448492], [1030.0, 5.074468085106383], [1066.0, 14.222772277227726], [1058.0, 16.76649746192893], [1062.0, 17.253481894150415], [1086.0, 10.362880886426586], [1074.0, 16.686419753086412], [1078.0, 14.927999999999997], [1054.0, 19.571428571428577], [1026.0, 5.4], [1034.0, 5.374233128834357], [1038.0, 5.757575757575754], [1050.0, 19.80278422273782], [1046.0, 53.5], [1042.0, 6.468085106382979], [1070.0, 7.882086167800453], [1146.0, 19.06532663316583], [1118.0, 40.562767094017026], [1106.0, 30.756607929515386], [1150.0, 22.527987897125573], [1122.0, 35.09629629629628], [1126.0, 26.344941956882234], [1130.0, 15.454545454545455], [1134.0, 14.575757575757574], [1142.0, 26.375], [1138.0, 13.0], [1102.0, 49.40476190476191], [1110.0, 64.27139364303174], [1114.0, 45.821508255243124], [1098.0, 14.553191489361703], [1094.0, 16.293862368257898], [1090.0, 18.206286836935178], [1210.0, 17.59090909090909], [1214.0, 15.666666666666666], [1186.0, 25.402173913043477], [1194.0, 16.151724137931037], [1190.0, 11.314285714285711], [1206.0, 13.578042328042317], [1154.0, 18.274999999999995], [1182.0, 15.962121212121202], [1158.0, 16.36], [1166.0, 19.140259740259744], [1162.0, 16.24], [1202.0, 8.620454545454548], [1178.0, 11.56140350877193], [1174.0, 19.567049808429115], [1170.0, 19.219858156028366], [1198.0, 9.238410596026485], [1246.0, 19.706940874035983], [1238.0, 45.69230769230769], [1234.0, 23.18181818181818], [1242.0, 20.88181818181818], [1218.0, 14.40703517587939], [1222.0, 22.888888888888875], [1226.0, 13.083333333333334], [1230.0, 69.6818181818182], [1266.0, 19.291666666666664], [1270.0, 6.503536067892507], [1278.0, 15.999999999999988], [1274.0, 21.333333333333332], [1250.0, 23.918918918918926], [1254.0, 13.333333333333336], [1258.0, 20.77330508474577], [1262.0, 6.8181818181818175], [1338.0, 23.521739130434778], [1342.0, 32.03885135135133], [1314.0, 35.6], [1318.0, 31.55319148936171], [1322.0, 56.4294670846395], [1334.0, 26.005633802816895], [1282.0, 24.775714285714283], [1286.0, 20.494553376906318], [1310.0, 24.07042253521126], [1290.0, 24.67187500000001], [1330.0, 29.677333333333344], [1294.0, 29.909292035398217], [1298.0, 23.641025641025646], [1302.0, 28.964383561643846], [1306.0, 32.0708333333333], [1326.0, 35.57946210268948], [1374.0, 15.12735849056604], [1362.0, 8.319699499165278], [1366.0, 18.50324675324675], [1370.0, 12.999999999999995], [1346.0, 46.92241379310343], [1354.0, 34.9362745098039], [1350.0, 51.428571428571416], [1358.0, 34.63414634146342], [1394.0, 13.027397260273979], [1402.0, 10.88888888888889], [1398.0, 11.222222222222227], [1406.0, 10.333333333333332], [1378.0, 13.124700239808156], [1382.0, 6.660714285714287], [1390.0, 9.61111111111111], [1386.0, 18.333333333333332], [1458.0, 20.484679665738163], [1470.0, 14.503333333333337], [1466.0, 12.448275862068964], [1462.0, 11.309523809523814], [1438.0, 11.358974358974358], [1414.0, 12.775510204081629], [1410.0, 9.244444444444445], [1422.0, 13.431818181818182], [1418.0, 14.080645161290322], [1434.0, 23.690476190476186], [1430.0, 19.710937500000014], [1426.0, 20.294736842105262], [1454.0, 17.61744966442954], [1450.0, 18.009999999999994], [1446.0, 16.83838383838383], [1442.0, 16.82012847965739], [1522.0, 10.621052631578943], [1530.0, 11.766666666666667], [1534.0, 6.0], [1526.0, 11.263736263736266], [1486.0, 17.11200000000001], [1482.0, 10.194805194805195], [1478.0, 19.541666666666664], [1474.0, 12.60294117647059], [1518.0, 6.375], [1514.0, 9.644736842105262], [1510.0, 12.27601809954751], [1506.0, 18.201438848920873], [1502.0, 15.560209424083773], [1498.0, 12.90476190476191], [1494.0, 80.625], [1490.0, 10.629629629629632], [1590.0, 6.439393939393941], [1586.0, 8.39130434782609], [1598.0, 5.866666666666667], [1570.0, 6.283018867924527], [1574.0, 159.10000000000002], [1578.0, 6.0769230769230775], [1594.0, 5.210526315789474], [1550.0, 6.0], [1546.0, 5.558823529411765], [1542.0, 5.555555555555555], [1538.0, 38.28906250000002], [1566.0, 5.888888888888889], [1562.0, 7.730337078651687], [1558.0, 6.323809523809524], [1554.0, 6.313868613138688], [1582.0, 9.706521739130432], [1650.0, 6.305263157894738], [1658.0, 9.718181818181815], [1662.0, 57.26785714285717], [1634.0, 6.465753424657534], [1654.0, 25.062499999999993], [1630.0, 5.814814814814818], [1606.0, 6.936363636363634], [1602.0, 60.278350515463906], [1610.0, 6.025], [1614.0, 5.365546218487396], [1622.0, 7.333333333333334], [1626.0, 5.068627450980392], [1618.0, 7.4999999999999964], [1646.0, 5.272108843537413], [1642.0, 5.0714285714285605], [1638.0, 5.5], [1718.0, 19.73584905660377], [1702.0, 13.1726618705036], [1722.0, 10.692307692307693], [1726.0, 8.826086956521738], [1698.0, 18.493975903614448], [1714.0, 45.6], [1678.0, 13.885057471264382], [1674.0, 12.739130434782606], [1670.0, 10.555555555555557], [1666.0, 10.0], [1694.0, 11.795454545454549], [1690.0, 16.733333333333338], [1686.0, 18.440119760479035], [1682.0, 16.939501779359432], [1710.0, 13.83707865168539], [1706.0, 11.981566820276504], [1742.0, 8.897959183673471], [1762.0, 9.89056603773585], [1766.0, 7.982283464566927], [1758.0, 13.940000000000001], [1734.0, 10.463768115942027], [1730.0, 9.924731182795702], [1738.0, 16.954545454545453], [1778.0, 6.15741789354473], [1782.0, 4.7905236907730675], [1770.0, 8.221938775510205], [1754.0, 10.568376068376068], [1750.0, 56.5625], [1746.0, 12.897435897435896], [1774.0, 5.238095238095239], [1079.0, 14.491582491582491], [1083.0, 12.927689594356261], [1087.0, 13.624561403508778], [1059.0, 13.657894736842108], [1063.0, 24.44], [1075.0, 15.838740458015277], [1027.0, 5.3765060240963845], [1055.0, 18.956386292834914], [1031.0, 4.634146341463414], [1035.0, 10.083333333333334], [1039.0, 6.109717868338554], [1051.0, 13.394265232974904], [1047.0, 26.47208672086721], [1043.0, 5.781395348837206], [1067.0, 11.716183574879231], [1071.0, 6.538028169014087], [1143.0, 16.315508021390364], [1103.0, 39.429824561403535], [1115.0, 31.443121693121718], [1107.0, 55.54084507042252], [1123.0, 16.6945945945946], [1127.0, 13.994505494505502], [1151.0, 13.05472636815921], [1131.0, 17.516528925619827], [1135.0, 21.852941176470594], [1147.0, 20.86562942008489], [1139.0, 21.358361774744044], [1111.0, 36.47115384615385], [1099.0, 178.56011730205233], [1095.0, 12.020134228187915], [1091.0, 19.053497942386826], [1119.0, 9.869391590321815], [1211.0, 14.540201005025127], [1215.0, 19.161585365853632], [1187.0, 18.957831325301203], [1195.0, 10.626780626780638], [1191.0, 10.804878048780486], [1207.0, 8.904761904761907], [1183.0, 24.32051282051282], [1155.0, 27.34035087719297], [1159.0, 17.696202531645575], [1163.0, 14.761467889908255], [1167.0, 17.300395256916985], [1203.0, 8.117647058823538], [1179.0, 12.571428571428571], [1175.0, 23.84666666666668], [1171.0, 18.212871287128703], [1199.0, 8.13333333333333], [1247.0, 20.428571428571434], [1223.0, 29.84000000000001], [1235.0, 30.04411764705881], [1239.0, 19.453703703703713], [1243.0, 24.999999999999996], [1219.0, 23.35483870967742], [1227.0, 17.700000000000003], [1231.0, 25.516853932584272], [1267.0, 19.727272727272712], [1271.0, 7.371704745166955], [1279.0, 6.5588235294117645], [1275.0, 22.749999999999996], [1251.0, 16.108974358974354], [1255.0, 13.967741935483868], [1259.0, 13.912698412698411], [1263.0, 11.422222222222222], [1339.0, 31.562499999999986], [1335.0, 17.598984771573612], [1343.0, 36.421717171717205], [1315.0, 32.76377952755906], [1319.0, 22.606653620352255], [1323.0, 30.39330543933055], [1311.0, 24.378787878787893], [1283.0, 25.98333333333334], [1287.0, 30.94814814814815], [1291.0, 29.65196078431374], [1295.0, 29.931034482758626], [1331.0, 30.56666666666662], [1307.0, 26.77241379310345], [1299.0, 26.08421052631579], [1303.0, 21.659846547314594], [1327.0, 40.86977491961407], [1375.0, 13.449044585987258], [1367.0, 14.452513966480447], [1363.0, 11.333333333333337], [1371.0, 17.341059602648997], [1347.0, 42.77154308617235], [1351.0, 76.21126760563381], [1355.0, 45.35714285714286], [1359.0, 13.693194925028823], [1407.0, 11.162500000000003], [1403.0, 9.347826086956522], [1399.0, 10.852564102564102], [1395.0, 12.679999999999998], [1379.0, 11.103401360544229], [1383.0, 8.303105590062119], [1391.0, 10.53448275862069], [1387.0, 13.545454545454549], [1463.0, 8.80821917808219], [1459.0, 15.14329268292684], [1471.0, 8.794117647058819], [1443.0, 11.727272727272727], [1447.0, 19.454545454545453], [1467.0, 10.748633879781424], [1423.0, 16.729166666666668], [1419.0, 15.857142857142858], [1415.0, 13.562499999999995], [1411.0, 11.60064935064935], [1439.0, 14.052631578947372], [1435.0, 13.04], [1431.0, 21.571428571428573], [1427.0, 15.253521126760566], [1455.0, 17.64102564102565], [1451.0, 16.32432432432432], [1531.0, 6.291925465838508], [1535.0, 6.712918660287081], [1527.0, 6.74295774647887], [1519.0, 5.776470588235297], [1515.0, 11.954545454545455], [1511.0, 7.653846153846154], [1507.0, 10.689189189189191], [1503.0, 13.330612244897951], [1475.0, 14.139664804469277], [1479.0, 10.231249999999994], [1483.0, 17.35989010989011], [1487.0, 19.050279329608927], [1523.0, 7.267515923566875], [1499.0, 13.125], [1495.0, 14.85], [1491.0, 10.238095238095237], [1587.0, 9.472727272727273], [1599.0, 5.659615384615385], [1591.0, 5.96969696969697], [1595.0, 5.688679245283016], [1551.0, 6.762500000000003], [1543.0, 8.863013698630132], [1547.0, 6.423076923076923], [1539.0, 5.461538461538462], [1579.0, 7.316901408450702], [1575.0, 10.349206349206352], [1571.0, 6.3366336633663325], [1567.0, 5.97979797979798], [1563.0, 5.697478991596638], [1559.0, 6.142857142857145], [1555.0, 6.089743589743589], [1607.0, 14.833333333333332], [1659.0, 4.674358974358971], [1655.0, 4.785714285714286], [1651.0, 7.623762376237624], [1631.0, 5.425619834710736], [1603.0, 5.764705882352943], [1611.0, 5.738095238095238], [1615.0, 5.11111111111111], [1627.0, 6.577751196172252], [1619.0, 5.512820512820517], [1623.0, 5.731182795698923], [1643.0, 5.33011049723757], [1639.0, 5.259259259259257], [1647.0, 5.258771929824561], [1635.0, 5.399999999999998], [1663.0, 75.6206896551724], [1719.0, 8.536231884057974], [1727.0, 10.833333333333332], [1699.0, 14.49136577708006], [1723.0, 11.173228346456694], [1715.0, 26.6060606060606], [1683.0, 96.8], [1679.0, 11.884615384615383], [1675.0, 11.999999999999996], [1671.0, 12.01522842639593], [1695.0, 16.2], [1667.0, 10.153846153846153], [1691.0, 16.499999999999993], [1687.0, 19.541284403669728], [1711.0, 39.278863232682056], [1703.0, 11.962962962962965], [1707.0, 15.925714285714278], [1743.0, 7.35], [1763.0, 13.681081081081086], [1783.0, 4.761437908496726], [1779.0, 5.2278481012658204], [1739.0, 8.652173913043478], [1735.0, 13.714285714285715], [1731.0, 20.19047619047619], [1759.0, 10.449115044247788], [1767.0, 8.211009174311927], [1771.0, 8.111662531017377], [1755.0, 10.37037037037037], [1775.0, 8.930327868852462], [1751.0, 10.275862068965512], [1747.0, 11.896774193548387], [1.0, 4.227272727272727]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1082.5975174999785, 23.01159249999954]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1784.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 773333.3333333334, "minX": 1.58524374E12, "maxY": 846666.6666666666, "series": [{"data": [[1.58524374E12, 773333.3333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58524374E12, 846666.6666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524374E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 23.01159249999954, "minX": 1.58524374E12, "maxY": 23.01159249999954, "series": [{"data": [[1.58524374E12, 23.01159249999954]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524374E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 22.92172999999996, "minX": 1.58524374E12, "maxY": 22.92172999999996, "series": [{"data": [[1.58524374E12, 22.92172999999996]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524374E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4925550000000063, "minX": 1.58524374E12, "maxY": 0.4925550000000063, "series": [{"data": [[1.58524374E12, 0.4925550000000063]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524374E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.58524374E12, "maxY": 2889.0, "series": [{"data": [[1.58524374E12, 2889.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58524374E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58524374E12, 9.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58524374E12, 13.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58524374E12, 10.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524374E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 56.0, "maxY": 51.0, "series": [{"data": [[47377.0, 5.0], [12749.0, 6.0], [51557.0, 5.0], [59108.0, 12.0], [56.0, 4.0], [14925.0, 6.0], [61310.0, 5.0], [16877.0, 24.0], [16767.0, 7.0], [17141.0, 51.0], [17522.0, 50.0], [17690.0, 25.0], [20268.0, 35.0], [19749.0, 40.0], [25296.0, 30.0], [1608.0, 6.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 61310.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 56.0, "maxY": 51.0, "series": [{"data": [[47377.0, 5.0], [12749.0, 6.0], [51557.0, 5.0], [59108.0, 12.0], [56.0, 4.0], [14925.0, 6.0], [61310.0, 5.0], [16877.0, 24.0], [16767.0, 7.0], [17141.0, 51.0], [17522.0, 50.0], [17690.0, 25.0], [20268.0, 35.0], [19749.0, 40.0], [25296.0, 30.0], [1608.0, 6.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 61310.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524374E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524374E12, 6666.666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524374E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524374E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524374E12, 6666.666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524374E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524374E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524374E12, 6666.666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524374E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524374E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524374E12, 6666.666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524374E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

