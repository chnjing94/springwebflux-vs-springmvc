/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 1241.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 6.0], [0.4, 7.0], [0.5, 7.0], [0.6, 8.0], [0.7, 9.0], [0.8, 9.0], [0.9, 9.0], [1.0, 10.0], [1.1, 10.0], [1.2, 11.0], [1.3, 11.0], [1.4, 11.0], [1.5, 12.0], [1.6, 12.0], [1.7, 13.0], [1.8, 13.0], [1.9, 13.0], [2.0, 14.0], [2.1, 14.0], [2.2, 15.0], [2.3, 15.0], [2.4, 15.0], [2.5, 16.0], [2.6, 16.0], [2.7, 16.0], [2.8, 17.0], [2.9, 17.0], [3.0, 17.0], [3.1, 18.0], [3.2, 18.0], [3.3, 18.0], [3.4, 19.0], [3.5, 19.0], [3.6, 19.0], [3.7, 20.0], [3.8, 20.0], [3.9, 21.0], [4.0, 21.0], [4.1, 22.0], [4.2, 22.0], [4.3, 22.0], [4.4, 22.0], [4.5, 23.0], [4.6, 23.0], [4.7, 23.0], [4.8, 23.0], [4.9, 23.0], [5.0, 24.0], [5.1, 24.0], [5.2, 24.0], [5.3, 25.0], [5.4, 25.0], [5.5, 26.0], [5.6, 26.0], [5.7, 27.0], [5.8, 27.0], [5.9, 27.0], [6.0, 28.0], [6.1, 28.0], [6.2, 28.0], [6.3, 28.0], [6.4, 28.0], [6.5, 29.0], [6.6, 29.0], [6.7, 29.0], [6.8, 29.0], [6.9, 29.0], [7.0, 29.0], [7.1, 29.0], [7.2, 30.0], [7.3, 30.0], [7.4, 30.0], [7.5, 30.0], [7.6, 31.0], [7.7, 31.0], [7.8, 31.0], [7.9, 32.0], [8.0, 32.0], [8.1, 32.0], [8.2, 33.0], [8.3, 33.0], [8.4, 33.0], [8.5, 34.0], [8.6, 34.0], [8.7, 34.0], [8.8, 34.0], [8.9, 34.0], [9.0, 35.0], [9.1, 35.0], [9.2, 35.0], [9.3, 35.0], [9.4, 35.0], [9.5, 35.0], [9.6, 35.0], [9.7, 35.0], [9.8, 35.0], [9.9, 35.0], [10.0, 36.0], [10.1, 36.0], [10.2, 36.0], [10.3, 36.0], [10.4, 36.0], [10.5, 36.0], [10.6, 36.0], [10.7, 36.0], [10.8, 36.0], [10.9, 36.0], [11.0, 36.0], [11.1, 37.0], [11.2, 37.0], [11.3, 37.0], [11.4, 37.0], [11.5, 37.0], [11.6, 37.0], [11.7, 37.0], [11.8, 37.0], [11.9, 37.0], [12.0, 37.0], [12.1, 37.0], [12.2, 37.0], [12.3, 37.0], [12.4, 37.0], [12.5, 37.0], [12.6, 38.0], [12.7, 38.0], [12.8, 38.0], [12.9, 38.0], [13.0, 38.0], [13.1, 38.0], [13.2, 38.0], [13.3, 38.0], [13.4, 38.0], [13.5, 38.0], [13.6, 38.0], [13.7, 38.0], [13.8, 38.0], [13.9, 39.0], [14.0, 39.0], [14.1, 39.0], [14.2, 39.0], [14.3, 39.0], [14.4, 39.0], [14.5, 39.0], [14.6, 39.0], [14.7, 39.0], [14.8, 39.0], [14.9, 39.0], [15.0, 39.0], [15.1, 40.0], [15.2, 40.0], [15.3, 40.0], [15.4, 40.0], [15.5, 40.0], [15.6, 40.0], [15.7, 40.0], [15.8, 40.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 42.0], [16.6, 42.0], [16.7, 42.0], [16.8, 42.0], [16.9, 42.0], [17.0, 42.0], [17.1, 43.0], [17.2, 43.0], [17.3, 43.0], [17.4, 43.0], [17.5, 43.0], [17.6, 43.0], [17.7, 43.0], [17.8, 44.0], [17.9, 44.0], [18.0, 44.0], [18.1, 44.0], [18.2, 44.0], [18.3, 44.0], [18.4, 45.0], [18.5, 45.0], [18.6, 45.0], [18.7, 45.0], [18.8, 45.0], [18.9, 45.0], [19.0, 45.0], [19.1, 46.0], [19.2, 46.0], [19.3, 46.0], [19.4, 46.0], [19.5, 46.0], [19.6, 46.0], [19.7, 46.0], [19.8, 46.0], [19.9, 47.0], [20.0, 47.0], [20.1, 47.0], [20.2, 47.0], [20.3, 47.0], [20.4, 47.0], [20.5, 47.0], [20.6, 47.0], [20.7, 48.0], [20.8, 48.0], [20.9, 48.0], [21.0, 48.0], [21.1, 48.0], [21.2, 48.0], [21.3, 48.0], [21.4, 49.0], [21.5, 49.0], [21.6, 49.0], [21.7, 49.0], [21.8, 49.0], [21.9, 49.0], [22.0, 49.0], [22.1, 49.0], [22.2, 49.0], [22.3, 49.0], [22.4, 49.0], [22.5, 50.0], [22.6, 50.0], [22.7, 50.0], [22.8, 50.0], [22.9, 50.0], [23.0, 50.0], [23.1, 50.0], [23.2, 50.0], [23.3, 50.0], [23.4, 50.0], [23.5, 50.0], [23.6, 50.0], [23.7, 50.0], [23.8, 50.0], [23.9, 50.0], [24.0, 51.0], [24.1, 51.0], [24.2, 51.0], [24.3, 51.0], [24.4, 51.0], [24.5, 51.0], [24.6, 51.0], [24.7, 51.0], [24.8, 51.0], [24.9, 51.0], [25.0, 51.0], [25.1, 51.0], [25.2, 52.0], [25.3, 52.0], [25.4, 52.0], [25.5, 52.0], [25.6, 52.0], [25.7, 52.0], [25.8, 52.0], [25.9, 52.0], [26.0, 52.0], [26.1, 52.0], [26.2, 53.0], [26.3, 53.0], [26.4, 53.0], [26.5, 53.0], [26.6, 53.0], [26.7, 53.0], [26.8, 53.0], [26.9, 53.0], [27.0, 53.0], [27.1, 53.0], [27.2, 54.0], [27.3, 54.0], [27.4, 54.0], [27.5, 54.0], [27.6, 54.0], [27.7, 54.0], [27.8, 54.0], [27.9, 54.0], [28.0, 54.0], [28.1, 54.0], [28.2, 54.0], [28.3, 54.0], [28.4, 54.0], [28.5, 54.0], [28.6, 54.0], [28.7, 54.0], [28.8, 55.0], [28.9, 55.0], [29.0, 55.0], [29.1, 55.0], [29.2, 55.0], [29.3, 55.0], [29.4, 55.0], [29.5, 55.0], [29.6, 55.0], [29.7, 55.0], [29.8, 55.0], [29.9, 55.0], [30.0, 55.0], [30.1, 55.0], [30.2, 56.0], [30.3, 56.0], [30.4, 56.0], [30.5, 56.0], [30.6, 56.0], [30.7, 56.0], [30.8, 56.0], [30.9, 56.0], [31.0, 56.0], [31.1, 56.0], [31.2, 56.0], [31.3, 56.0], [31.4, 56.0], [31.5, 57.0], [31.6, 57.0], [31.7, 57.0], [31.8, 57.0], [31.9, 57.0], [32.0, 57.0], [32.1, 57.0], [32.2, 57.0], [32.3, 57.0], [32.4, 57.0], [32.5, 57.0], [32.6, 58.0], [32.7, 58.0], [32.8, 58.0], [32.9, 58.0], [33.0, 58.0], [33.1, 58.0], [33.2, 58.0], [33.3, 58.0], [33.4, 58.0], [33.5, 58.0], [33.6, 58.0], [33.7, 58.0], [33.8, 58.0], [33.9, 58.0], [34.0, 58.0], [34.1, 59.0], [34.2, 59.0], [34.3, 59.0], [34.4, 59.0], [34.5, 59.0], [34.6, 59.0], [34.7, 59.0], [34.8, 59.0], [34.9, 59.0], [35.0, 59.0], [35.1, 59.0], [35.2, 59.0], [35.3, 60.0], [35.4, 60.0], [35.5, 60.0], [35.6, 60.0], [35.7, 60.0], [35.8, 60.0], [35.9, 60.0], [36.0, 60.0], [36.1, 60.0], [36.2, 60.0], [36.3, 60.0], [36.4, 60.0], [36.5, 60.0], [36.6, 61.0], [36.7, 61.0], [36.8, 61.0], [36.9, 61.0], [37.0, 61.0], [37.1, 61.0], [37.2, 61.0], [37.3, 61.0], [37.4, 61.0], [37.5, 61.0], [37.6, 61.0], [37.7, 61.0], [37.8, 61.0], [37.9, 61.0], [38.0, 62.0], [38.1, 62.0], [38.2, 62.0], [38.3, 62.0], [38.4, 62.0], [38.5, 62.0], [38.6, 62.0], [38.7, 62.0], [38.8, 62.0], [38.9, 62.0], [39.0, 62.0], [39.1, 62.0], [39.2, 62.0], [39.3, 62.0], [39.4, 63.0], [39.5, 63.0], [39.6, 63.0], [39.7, 63.0], [39.8, 63.0], [39.9, 63.0], [40.0, 63.0], [40.1, 63.0], [40.2, 63.0], [40.3, 63.0], [40.4, 63.0], [40.5, 63.0], [40.6, 63.0], [40.7, 63.0], [40.8, 63.0], [40.9, 64.0], [41.0, 64.0], [41.1, 64.0], [41.2, 64.0], [41.3, 64.0], [41.4, 64.0], [41.5, 64.0], [41.6, 64.0], [41.7, 64.0], [41.8, 64.0], [41.9, 64.0], [42.0, 64.0], [42.1, 64.0], [42.2, 64.0], [42.3, 65.0], [42.4, 65.0], [42.5, 65.0], [42.6, 65.0], [42.7, 65.0], [42.8, 65.0], [42.9, 65.0], [43.0, 65.0], [43.1, 65.0], [43.2, 65.0], [43.3, 65.0], [43.4, 65.0], [43.5, 65.0], [43.6, 65.0], [43.7, 65.0], [43.8, 66.0], [43.9, 66.0], [44.0, 66.0], [44.1, 66.0], [44.2, 66.0], [44.3, 66.0], [44.4, 66.0], [44.5, 66.0], [44.6, 66.0], [44.7, 66.0], [44.8, 66.0], [44.9, 66.0], [45.0, 66.0], [45.1, 66.0], [45.2, 66.0], [45.3, 66.0], [45.4, 66.0], [45.5, 67.0], [45.6, 67.0], [45.7, 67.0], [45.8, 67.0], [45.9, 67.0], [46.0, 67.0], [46.1, 67.0], [46.2, 67.0], [46.3, 67.0], [46.4, 67.0], [46.5, 67.0], [46.6, 67.0], [46.7, 67.0], [46.8, 67.0], [46.9, 67.0], [47.0, 67.0], [47.1, 67.0], [47.2, 68.0], [47.3, 68.0], [47.4, 68.0], [47.5, 68.0], [47.6, 68.0], [47.7, 68.0], [47.8, 68.0], [47.9, 68.0], [48.0, 68.0], [48.1, 68.0], [48.2, 68.0], [48.3, 68.0], [48.4, 68.0], [48.5, 68.0], [48.6, 68.0], [48.7, 68.0], [48.8, 68.0], [48.9, 68.0], [49.0, 68.0], [49.1, 68.0], [49.2, 68.0], [49.3, 69.0], [49.4, 69.0], [49.5, 69.0], [49.6, 69.0], [49.7, 69.0], [49.8, 69.0], [49.9, 69.0], [50.0, 69.0], [50.1, 69.0], [50.2, 69.0], [50.3, 69.0], [50.4, 69.0], [50.5, 69.0], [50.6, 69.0], [50.7, 69.0], [50.8, 69.0], [50.9, 70.0], [51.0, 70.0], [51.1, 70.0], [51.2, 70.0], [51.3, 70.0], [51.4, 70.0], [51.5, 70.0], [51.6, 70.0], [51.7, 70.0], [51.8, 70.0], [51.9, 70.0], [52.0, 70.0], [52.1, 70.0], [52.2, 70.0], [52.3, 71.0], [52.4, 71.0], [52.5, 71.0], [52.6, 71.0], [52.7, 71.0], [52.8, 71.0], [52.9, 71.0], [53.0, 71.0], [53.1, 71.0], [53.2, 71.0], [53.3, 71.0], [53.4, 71.0], [53.5, 72.0], [53.6, 72.0], [53.7, 72.0], [53.8, 72.0], [53.9, 72.0], [54.0, 72.0], [54.1, 72.0], [54.2, 72.0], [54.3, 72.0], [54.4, 72.0], [54.5, 72.0], [54.6, 72.0], [54.7, 73.0], [54.8, 73.0], [54.9, 73.0], [55.0, 73.0], [55.1, 73.0], [55.2, 73.0], [55.3, 73.0], [55.4, 73.0], [55.5, 73.0], [55.6, 73.0], [55.7, 73.0], [55.8, 73.0], [55.9, 73.0], [56.0, 74.0], [56.1, 74.0], [56.2, 74.0], [56.3, 74.0], [56.4, 74.0], [56.5, 74.0], [56.6, 74.0], [56.7, 74.0], [56.8, 74.0], [56.9, 74.0], [57.0, 74.0], [57.1, 74.0], [57.2, 75.0], [57.3, 75.0], [57.4, 75.0], [57.5, 75.0], [57.6, 75.0], [57.7, 75.0], [57.8, 75.0], [57.9, 75.0], [58.0, 75.0], [58.1, 75.0], [58.2, 75.0], [58.3, 76.0], [58.4, 76.0], [58.5, 76.0], [58.6, 76.0], [58.7, 76.0], [58.8, 76.0], [58.9, 76.0], [59.0, 76.0], [59.1, 76.0], [59.2, 76.0], [59.3, 77.0], [59.4, 77.0], [59.5, 77.0], [59.6, 77.0], [59.7, 77.0], [59.8, 77.0], [59.9, 77.0], [60.0, 78.0], [60.1, 78.0], [60.2, 78.0], [60.3, 78.0], [60.4, 78.0], [60.5, 78.0], [60.6, 78.0], [60.7, 78.0], [60.8, 78.0], [60.9, 79.0], [61.0, 79.0], [61.1, 79.0], [61.2, 79.0], [61.3, 79.0], [61.4, 79.0], [61.5, 79.0], [61.6, 79.0], [61.7, 79.0], [61.8, 80.0], [61.9, 80.0], [62.0, 80.0], [62.1, 80.0], [62.2, 80.0], [62.3, 80.0], [62.4, 80.0], [62.5, 80.0], [62.6, 80.0], [62.7, 81.0], [62.8, 81.0], [62.9, 81.0], [63.0, 81.0], [63.1, 81.0], [63.2, 81.0], [63.3, 81.0], [63.4, 81.0], [63.5, 81.0], [63.6, 81.0], [63.7, 82.0], [63.8, 82.0], [63.9, 82.0], [64.0, 82.0], [64.1, 82.0], [64.2, 82.0], [64.3, 82.0], [64.4, 82.0], [64.5, 82.0], [64.6, 82.0], [64.7, 83.0], [64.8, 83.0], [64.9, 83.0], [65.0, 83.0], [65.1, 83.0], [65.2, 83.0], [65.3, 83.0], [65.4, 83.0], [65.5, 84.0], [65.6, 84.0], [65.7, 84.0], [65.8, 84.0], [65.9, 84.0], [66.0, 84.0], [66.1, 84.0], [66.2, 85.0], [66.3, 85.0], [66.4, 85.0], [66.5, 85.0], [66.6, 85.0], [66.7, 85.0], [66.8, 86.0], [66.9, 86.0], [67.0, 86.0], [67.1, 86.0], [67.2, 86.0], [67.3, 86.0], [67.4, 87.0], [67.5, 87.0], [67.6, 87.0], [67.7, 87.0], [67.8, 87.0], [67.9, 87.0], [68.0, 87.0], [68.1, 87.0], [68.2, 88.0], [68.3, 88.0], [68.4, 88.0], [68.5, 88.0], [68.6, 88.0], [68.7, 88.0], [68.8, 88.0], [68.9, 88.0], [69.0, 89.0], [69.1, 89.0], [69.2, 89.0], [69.3, 89.0], [69.4, 89.0], [69.5, 89.0], [69.6, 89.0], [69.7, 89.0], [69.8, 90.0], [69.9, 90.0], [70.0, 90.0], [70.1, 90.0], [70.2, 90.0], [70.3, 90.0], [70.4, 90.0], [70.5, 90.0], [70.6, 91.0], [70.7, 91.0], [70.8, 91.0], [70.9, 91.0], [71.0, 91.0], [71.1, 91.0], [71.2, 91.0], [71.3, 91.0], [71.4, 91.0], [71.5, 92.0], [71.6, 92.0], [71.7, 92.0], [71.8, 92.0], [71.9, 92.0], [72.0, 92.0], [72.1, 92.0], [72.2, 92.0], [72.3, 92.0], [72.4, 92.0], [72.5, 93.0], [72.6, 93.0], [72.7, 93.0], [72.8, 93.0], [72.9, 93.0], [73.0, 93.0], [73.1, 93.0], [73.2, 93.0], [73.3, 94.0], [73.4, 94.0], [73.5, 94.0], [73.6, 94.0], [73.7, 94.0], [73.8, 94.0], [73.9, 94.0], [74.0, 94.0], [74.1, 95.0], [74.2, 95.0], [74.3, 95.0], [74.4, 95.0], [74.5, 95.0], [74.6, 95.0], [74.7, 95.0], [74.8, 95.0], [74.9, 95.0], [75.0, 96.0], [75.1, 96.0], [75.2, 96.0], [75.3, 96.0], [75.4, 96.0], [75.5, 96.0], [75.6, 96.0], [75.7, 96.0], [75.8, 97.0], [75.9, 97.0], [76.0, 97.0], [76.1, 97.0], [76.2, 97.0], [76.3, 97.0], [76.4, 97.0], [76.5, 98.0], [76.6, 98.0], [76.7, 98.0], [76.8, 98.0], [76.9, 98.0], [77.0, 98.0], [77.1, 98.0], [77.2, 98.0], [77.3, 99.0], [77.4, 99.0], [77.5, 99.0], [77.6, 99.0], [77.7, 99.0], [77.8, 99.0], [77.9, 99.0], [78.0, 99.0], [78.1, 100.0], [78.2, 100.0], [78.3, 100.0], [78.4, 100.0], [78.5, 100.0], [78.6, 100.0], [78.7, 100.0], [78.8, 100.0], [78.9, 101.0], [79.0, 101.0], [79.1, 101.0], [79.2, 101.0], [79.3, 101.0], [79.4, 101.0], [79.5, 101.0], [79.6, 102.0], [79.7, 102.0], [79.8, 102.0], [79.9, 102.0], [80.0, 102.0], [80.1, 102.0], [80.2, 102.0], [80.3, 103.0], [80.4, 103.0], [80.5, 103.0], [80.6, 103.0], [80.7, 103.0], [80.8, 103.0], [80.9, 104.0], [81.0, 104.0], [81.1, 104.0], [81.2, 104.0], [81.3, 104.0], [81.4, 104.0], [81.5, 105.0], [81.6, 105.0], [81.7, 105.0], [81.8, 105.0], [81.9, 105.0], [82.0, 105.0], [82.1, 105.0], [82.2, 106.0], [82.3, 106.0], [82.4, 106.0], [82.5, 106.0], [82.6, 106.0], [82.7, 106.0], [82.8, 106.0], [82.9, 107.0], [83.0, 107.0], [83.1, 107.0], [83.2, 107.0], [83.3, 107.0], [83.4, 107.0], [83.5, 108.0], [83.6, 108.0], [83.7, 108.0], [83.8, 108.0], [83.9, 108.0], [84.0, 108.0], [84.1, 108.0], [84.2, 109.0], [84.3, 109.0], [84.4, 109.0], [84.5, 109.0], [84.6, 109.0], [84.7, 110.0], [84.8, 110.0], [84.9, 110.0], [85.0, 110.0], [85.1, 110.0], [85.2, 111.0], [85.3, 111.0], [85.4, 111.0], [85.5, 111.0], [85.6, 111.0], [85.7, 111.0], [85.8, 112.0], [85.9, 112.0], [86.0, 112.0], [86.1, 112.0], [86.2, 112.0], [86.3, 112.0], [86.4, 112.0], [86.5, 113.0], [86.6, 113.0], [86.7, 113.0], [86.8, 113.0], [86.9, 113.0], [87.0, 114.0], [87.1, 114.0], [87.2, 114.0], [87.3, 114.0], [87.4, 115.0], [87.5, 115.0], [87.6, 115.0], [87.7, 115.0], [87.8, 115.0], [87.9, 116.0], [88.0, 116.0], [88.1, 116.0], [88.2, 116.0], [88.3, 117.0], [88.4, 117.0], [88.5, 117.0], [88.6, 117.0], [88.7, 118.0], [88.8, 118.0], [88.9, 118.0], [89.0, 118.0], [89.1, 119.0], [89.2, 119.0], [89.3, 119.0], [89.4, 119.0], [89.5, 120.0], [89.6, 120.0], [89.7, 120.0], [89.8, 120.0], [89.9, 120.0], [90.0, 121.0], [90.1, 121.0], [90.2, 121.0], [90.3, 121.0], [90.4, 122.0], [90.5, 122.0], [90.6, 122.0], [90.7, 123.0], [90.8, 123.0], [90.9, 123.0], [91.0, 124.0], [91.1, 124.0], [91.2, 124.0], [91.3, 125.0], [91.4, 125.0], [91.5, 126.0], [91.6, 126.0], [91.7, 126.0], [91.8, 127.0], [91.9, 127.0], [92.0, 127.0], [92.1, 128.0], [92.2, 128.0], [92.3, 128.0], [92.4, 129.0], [92.5, 129.0], [92.6, 129.0], [92.7, 129.0], [92.8, 130.0], [92.9, 130.0], [93.0, 130.0], [93.1, 131.0], [93.2, 131.0], [93.3, 131.0], [93.4, 132.0], [93.5, 132.0], [93.6, 132.0], [93.7, 133.0], [93.8, 133.0], [93.9, 133.0], [94.0, 134.0], [94.1, 134.0], [94.2, 134.0], [94.3, 135.0], [94.4, 135.0], [94.5, 136.0], [94.6, 136.0], [94.7, 136.0], [94.8, 137.0], [94.9, 138.0], [95.0, 138.0], [95.1, 139.0], [95.2, 140.0], [95.3, 141.0], [95.4, 141.0], [95.5, 142.0], [95.6, 143.0], [95.7, 144.0], [95.8, 145.0], [95.9, 146.0], [96.0, 147.0], [96.1, 147.0], [96.2, 148.0], [96.3, 149.0], [96.4, 150.0], [96.5, 151.0], [96.6, 152.0], [96.7, 153.0], [96.8, 154.0], [96.9, 155.0], [97.0, 156.0], [97.1, 156.0], [97.2, 157.0], [97.3, 159.0], [97.4, 160.0], [97.5, 161.0], [97.6, 163.0], [97.7, 164.0], [97.8, 165.0], [97.9, 166.0], [98.0, 167.0], [98.1, 168.0], [98.2, 169.0], [98.3, 170.0], [98.4, 173.0], [98.5, 175.0], [98.6, 178.0], [98.7, 182.0], [98.8, 185.0], [98.9, 190.0], [99.0, 193.0], [99.1, 197.0], [99.2, 202.0], [99.3, 207.0], [99.4, 214.0], [99.5, 225.0], [99.6, 241.0], [99.7, 260.0], [99.8, 271.0], [99.9, 298.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 312301.0, "series": [{"data": [[0.0, 312301.0], [1100.0, 74.0], [300.0, 295.0], [1200.0, 2.0], [100.0, 84319.0], [200.0, 3002.0], [400.0, 5.0], [1000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 78.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 399922.0, "series": [{"data": [[0.0, 399922.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 78.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1895.7639874999861, "minX": 1.58524386E12, "maxY": 1895.7639874999861, "series": [{"data": [[1.58524386E12, 1895.7639874999861]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524386E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 302.5048543689319, "series": [{"data": [[2.0, 4.0], [3.0, 4.0], [4.0, 5.0], [5.0, 4.0], [6.0, 4.0], [7.0, 4.0], [8.0, 4.0], [9.0, 4.2], [10.0, 4.0], [11.0, 5.0], [12.0, 4.0], [14.0, 4.333333333333333], [15.0, 5.0], [16.0, 4.0], [17.0, 4.0], [18.0, 4.0], [19.0, 4.4], [20.0, 4.6], [21.0, 5.0], [22.0, 4.25], [23.0, 4.75], [24.0, 4.0], [25.0, 4.222222222222223], [26.0, 4.0], [27.0, 4.0], [28.0, 4.0], [29.0, 5.0], [30.0, 4.0], [31.0, 4.0], [33.0, 4.0], [32.0, 4.0], [34.0, 4.363636363636364], [37.0, 5.0], [36.0, 5.0], [39.0, 4.0], [38.0, 5.0], [41.0, 4.5], [40.0, 4.25], [43.0, 5.0], [42.0, 4.0], [45.0, 4.0], [44.0, 4.666666666666667], [47.0, 5.0], [46.0, 5.0], [49.0, 5.0], [48.0, 5.0], [51.0, 4.916666666666667], [50.0, 4.0], [55.0, 4.0], [54.0, 4.0], [57.0, 5.2], [56.0, 4.4], [59.0, 5.0], [61.0, 4.0], [60.0, 4.0], [62.0, 4.0], [67.0, 5.0], [66.0, 5.0], [65.0, 4.0], [64.0, 4.0], [71.0, 5.555555555555555], [70.0, 4.2], [69.0, 4.0], [68.0, 4.0], [75.0, 5.2], [74.0, 6.0], [73.0, 6.0], [72.0, 6.0], [79.0, 5.0], [77.0, 5.666666666666667], [76.0, 6.0], [83.0, 4.25], [82.0, 5.0], [81.0, 4.5], [80.0, 4.583333333333334], [85.0, 4.0], [84.0, 4.0], [90.0, 4.25], [89.0, 4.533333333333333], [88.0, 4.0], [95.0, 5.0], [94.0, 5.0], [92.0, 4.571428571428571], [99.0, 4.0], [97.0, 4.0], [96.0, 5.0], [103.0, 4.428571428571429], [101.0, 4.0], [100.0, 4.0], [107.0, 5.0], [105.0, 5.0], [104.0, 4.6], [111.0, 4.0], [110.0, 4.0], [109.0, 4.333333333333334], [108.0, 5.0], [115.0, 4.444444444444445], [113.0, 4.0], [112.0, 4.0], [119.0, 4.250000000000001], [118.0, 4.181818181818182], [117.0, 4.250000000000001], [116.0, 4.5], [123.0, 6.0], [122.0, 5.615384615384616], [121.0, 5.066666666666666], [120.0, 4.75], [126.0, 5.7142857142857135], [125.0, 5.6], [124.0, 6.0], [134.0, 6.0], [133.0, 6.416666666666667], [132.0, 6.5], [131.0, 6.5], [130.0, 6.25], [128.0, 6.25], [143.0, 5.1], [142.0, 5.333333333333333], [140.0, 5.0], [138.0, 5.857142857142857], [137.0, 6.3], [136.0, 6.0], [151.0, 4.0], [148.0, 4.0], [147.0, 4.2], [145.0, 5.624999999999999], [144.0, 6.0], [159.0, 4.0], [158.0, 4.0], [156.0, 4.0], [155.0, 5.0], [154.0, 5.0], [153.0, 5.0], [152.0, 4.4], [167.0, 4.777777777777778], [166.0, 4.0], [164.0, 4.2], [162.0, 5.5], [161.0, 5.0], [160.0, 4.4], [175.0, 4.0], [174.0, 5.25], [172.0, 5.0], [171.0, 5.0], [170.0, 5.0], [169.0, 5.0], [168.0, 5.0], [182.0, 5.2], [181.0, 5.0], [180.0, 5.0], [179.0, 4.8], [178.0, 4.5], [177.0, 4.0], [187.0, 81.85], [189.0, 69.0], [188.0, 38.62499999999999], [190.0, 28.999999999999996], [191.0, 46.800000000000004], [186.0, 5.363636363636363], [185.0, 6.0], [184.0, 5.833333333333333], [192.0, 77.0], [193.0, 80.25925925925922], [194.0, 99.15384615384615], [195.0, 77.89285714285712], [196.0, 66.72727272727273], [197.0, 20.105263157894736], [198.0, 66.0], [199.0, 5.333333333333333], [200.0, 45.0], [201.0, 96.0], [202.0, 54.53846153846155], [203.0, 41.733333333333334], [204.0, 101.5], [206.0, 56.555555555555564], [205.0, 28.1], [207.0, 7.0], [214.0, 62.615384615384606], [213.0, 55.08333333333333], [212.0, 65.5], [211.0, 66.58333333333333], [215.0, 36.1], [208.0, 43.73333333333333], [210.0, 5.0], [209.0, 4.8], [216.0, 49.53333333333333], [217.0, 12.0], [221.0, 110.0], [222.0, 83.89999999999999], [223.0, 53.333333333333336], [220.0, 5.0], [219.0, 5.0], [218.0, 5.2], [224.0, 53.14285714285715], [225.0, 68.5], [227.0, 40.66666666666667], [228.0, 22.555555555555557], [229.0, 40.4], [230.0, 29.642857142857146], [231.0, 45.0], [232.0, 13.454545454545455], [233.0, 23.125], [234.0, 30.166666666666668], [235.0, 44.5], [239.0, 11.071428571428573], [238.0, 8.0], [237.0, 6.75], [236.0, 6.0], [240.0, 39.5], [241.0, 29.666666666666664], [242.0, 21.000000000000004], [243.0, 12.793103448275861], [244.0, 9.933333333333332], [245.0, 39.66666666666667], [247.0, 8.0], [246.0, 6.7272727272727275], [252.0, 11.8125], [255.0, 16.388888888888893], [254.0, 8.0], [253.0, 7.0], [251.0, 6.142857142857143], [250.0, 6.5], [249.0, 8.0], [248.0, 7.0], [257.0, 52.25], [256.0, 50.63636363636364], [258.0, 70.81818181818183], [259.0, 99.71428571428571], [260.0, 13.099999999999998], [261.0, 77.0], [262.0, 52.81818181818182], [263.0, 90.08333333333334], [265.0, 17.166666666666664], [264.0, 6.75], [270.0, 79.66666666666667], [271.0, 67.25], [268.0, 79.8], [269.0, 40.99999999999999], [266.0, 100.0], [267.0, 22.043478260869566], [273.0, 40.99999999999999], [272.0, 61.599999999999994], [274.0, 88.5], [275.0, 39.26666666666667], [276.0, 56.22222222222223], [277.0, 125.0], [278.0, 42.00000000000001], [279.0, 97.08333333333333], [280.0, 44.72727272727272], [286.0, 64.1], [287.0, 65.88888888888889], [284.0, 99.11111111111111], [285.0, 109.8], [281.0, 38.80000000000001], [282.0, 31.40000000000001], [283.0, 23.310344827586214], [289.0, 57.875], [288.0, 92.18181818181819], [290.0, 141.55555555555554], [291.0, 54.92857142857143], [292.0, 102.8888888888889], [293.0, 106.6], [294.0, 145.80000000000004], [295.0, 42.35714285714286], [296.0, 105.64285714285712], [302.0, 24.833333333333332], [303.0, 26.5], [300.0, 49.07142857142857], [301.0, 33.333333333333336], [297.0, 79.00000000000001], [298.0, 86.5], [299.0, 76.0], [318.0, 22.571428571428573], [316.0, 15.58333333333333], [319.0, 17.888888888888893], [317.0, 10.0], [315.0, 8.5], [314.0, 6.444444444444445], [313.0, 10.25], [312.0, 6.000000000000001], [311.0, 4.5], [305.0, 7.0], [304.0, 6.5], [307.0, 7.0], [306.0, 7.0], [310.0, 5.0], [309.0, 5.937499999999999], [320.0, 22.285714285714285], [323.0, 23.333333333333332], [322.0, 7.333333333333333], [321.0, 6.0], [332.0, 104.85714285714285], [333.0, 95.99999999999999], [334.0, 116.35714285714289], [335.0, 103.1], [324.0, 13.111111111111109], [325.0, 81.0], [326.0, 57.6], [327.0, 24.866666666666667], [328.0, 79.9090909090909], [329.0, 98.85714285714286], [330.0, 123.4], [337.0, 108.48148148148148], [336.0, 37.86666666666665], [338.0, 49.44444444444444], [339.0, 130.0], [341.0, 22.71428571428572], [342.0, 76.38095238095238], [343.0, 92.5], [344.0, 50.833333333333314], [350.0, 87.71428571428571], [351.0, 75.58333333333333], [348.0, 110.65217391304348], [349.0, 80.71428571428571], [345.0, 42.22222222222223], [347.0, 44.16666666666667], [346.0, 10.5], [353.0, 152.5], [352.0, 28.0], [354.0, 70.08333333333334], [355.0, 85.28571428571429], [356.0, 58.41666666666667], [357.0, 121.18750000000001], [359.0, 56.583333333333336], [358.0, 11.916666666666668], [360.0, 87.59999999999998], [366.0, 87.14285714285717], [367.0, 12.764705882352942], [364.0, 119.36363636363635], [365.0, 100.77777777777777], [361.0, 49.42857142857143], [362.0, 78.21428571428572], [363.0, 21.62857142857143], [370.0, 34.44444444444444], [369.0, 74.7222222222222], [368.0, 9.0], [371.0, 22.8], [380.0, 85.6], [381.0, 79.5], [382.0, 63.55555555555556], [383.0, 71.50000000000001], [372.0, 22.000000000000004], [373.0, 63.55555555555555], [375.0, 77.21052631578948], [374.0, 8.0], [376.0, 50.5], [377.0, 61.333333333333336], [378.0, 49.571428571428584], [379.0, 48.857142857142854], [385.0, 62.125], [384.0, 60.43333333333332], [386.0, 98.6923076923077], [387.0, 47.5], [388.0, 24.2], [389.0, 64.14285714285714], [390.0, 55.5], [391.0, 97.5], [392.0, 94.85714285714286], [398.0, 77.27272727272727], [399.0, 107.28571428571429], [396.0, 115.2], [397.0, 108.2], [393.0, 53.81818181818182], [394.0, 91.5], [395.0, 95.66666666666667], [401.0, 62.137931034482754], [400.0, 74.2], [402.0, 97.36363636363636], [403.0, 100.625], [404.0, 79.1904761904762], [405.0, 74.28571428571428], [406.0, 58.12], [407.0, 64.53846153846152], [408.0, 44.33333333333333], [414.0, 38.46153846153847], [415.0, 75.625], [412.0, 68.33333333333334], [413.0, 59.999999999999986], [409.0, 44.0], [410.0, 32.57142857142857], [411.0, 25.02325581395349], [418.0, 33.17073170731707], [416.0, 57.285714285714285], [417.0, 15.769230769230768], [419.0, 70.15384615384616], [429.0, 14.333333333333332], [428.0, 13.928571428571429], [430.0, 73.57142857142857], [431.0, 55.449999999999996], [420.0, 43.85714285714285], [421.0, 43.10344827586206], [422.0, 47.31250000000001], [423.0, 60.04166666666665], [424.0, 81.72413793103449], [425.0, 133.625], [426.0, 42.805555555555564], [427.0, 69.5], [433.0, 123.88888888888889], [432.0, 92.71428571428571], [434.0, 47.714285714285715], [435.0, 142.25], [436.0, 132.11111111111111], [437.0, 37.97222222222222], [438.0, 47.611111111111114], [439.0, 39.444444444444436], [440.0, 52.61538461538461], [446.0, 59.75], [447.0, 49.00000000000001], [444.0, 62.08333333333336], [445.0, 26.10526315789474], [441.0, 27.315789473684212], [442.0, 22.270833333333336], [443.0, 65.33333333333333], [461.0, 33.130434782608695], [448.0, 45.96000000000001], [455.0, 8.1875], [454.0, 9.0], [453.0, 9.0], [452.0, 9.0], [449.0, 61.0], [460.0, 22.76923076923077], [451.0, 8.923076923076923], [450.0, 8.5], [463.0, 9.0], [462.0, 9.0], [458.0, 8.0], [457.0, 8.0], [456.0, 8.5], [465.0, 54.400000000000006], [464.0, 93.94736842105266], [467.0, 34.411764705882355], [466.0, 8.0], [476.0, 111.12499999999999], [477.0, 91.6842105263158], [478.0, 135.88888888888889], [479.0, 51.70588235294117], [468.0, 36.375], [469.0, 64.93333333333334], [470.0, 24.73076923076923], [471.0, 43.29166666666667], [472.0, 20.35483870967742], [473.0, 95.0], [474.0, 93.27272727272728], [475.0, 69.0], [481.0, 114.85714285714286], [480.0, 85.85714285714286], [482.0, 60.66666666666666], [483.0, 45.89999999999999], [484.0, 124.20000000000002], [485.0, 13.82608695652174], [486.0, 74.50000000000001], [487.0, 154.38461538461542], [488.0, 157.0], [494.0, 121.80000000000003], [495.0, 41.18181818181818], [492.0, 117.57142857142858], [493.0, 24.39130434782608], [489.0, 111.73333333333333], [490.0, 106.91666666666663], [491.0, 60.699999999999996], [497.0, 21.26315789473684], [496.0, 18.066666666666666], [498.0, 20.166666666666668], [499.0, 61.00000000000001], [500.0, 58.64705882352942], [501.0, 85.83333333333334], [502.0, 65.19999999999999], [503.0, 80.66666666666666], [504.0, 37.89743589743589], [510.0, 70.62499999999999], [511.0, 73.74999999999999], [508.0, 109.80000000000003], [509.0, 50.63636363636365], [505.0, 62.28571428571428], [506.0, 90.125], [507.0, 87.63636363636364], [514.0, 65.05263157894734], [512.0, 36.473684210526336], [526.0, 90.92], [524.0, 161.16666666666669], [522.0, 119.30000000000001], [516.0, 86.86956521739128], [518.0, 74.125], [528.0, 41.529411764705884], [542.0, 47.30434782608697], [540.0, 55.16666666666667], [538.0, 35.615384615384606], [536.0, 48.25], [530.0, 92.24999999999999], [532.0, 81.2], [534.0, 47.559999999999995], [520.0, 143.0], [546.0, 106.75], [544.0, 102.29999999999998], [558.0, 64.66666666666666], [556.0, 121.5], [554.0, 59.1875], [548.0, 84.50000000000001], [550.0, 27.805555555555554], [560.0, 34.4054054054054], [574.0, 47.66666666666666], [572.0, 53.86666666666666], [570.0, 125.5], [568.0, 52.531250000000014], [562.0, 74.18749999999999], [564.0, 55.076923076923066], [566.0, 36.92307692307692], [552.0, 48.66666666666668], [578.0, 111.61538461538461], [576.0, 69.16666666666667], [590.0, 85.91666666666667], [588.0, 39.333333333333336], [586.0, 92.21052631578948], [580.0, 55.3], [582.0, 49.22222222222223], [592.0, 77.46153846153847], [606.0, 42.32258064516129], [604.0, 27.705882352941174], [602.0, 101.69230769230768], [600.0, 105.41176470588235], [594.0, 116.28571428571429], [596.0, 102.66666666666667], [598.0, 21.199999999999992], [584.0, 69.4375], [610.0, 32.900000000000006], [608.0, 98.2], [620.0, 38.333333333333336], [622.0, 93.8], [618.0, 74.85000000000001], [612.0, 105.23529411764706], [614.0, 68.90909090909089], [624.0, 33.733333333333334], [638.0, 10.0], [636.0, 70.16666666666666], [634.0, 50.85294117647058], [632.0, 77.69230769230768], [626.0, 47.64285714285714], [628.0, 64.24000000000001], [630.0, 22.80952380952381], [616.0, 132.1176470588235], [668.0, 142.42857142857144], [646.0, 43.81818181818182], [644.0, 10.857142857142858], [642.0, 11.0], [664.0, 155.0], [666.0, 35.125], [670.0, 162.55555555555554], [656.0, 130.27586206896552], [658.0, 67.75], [660.0, 48.64285714285714], [662.0, 204.66666666666669], [648.0, 39.04166666666667], [650.0, 105.42857142857143], [652.0, 45.88], [654.0, 80.06060606060606], [674.0, 87.03571428571428], [672.0, 53.49999999999999], [686.0, 91.55555555555556], [684.0, 115.69565217391305], [682.0, 71.66666666666666], [676.0, 120.8], [678.0, 55.54716981132079], [688.0, 123.0], [702.0, 97.42857142857143], [700.0, 119.00000000000001], [698.0, 95.23809523809524], [696.0, 47.35000000000001], [690.0, 41.45238095238095], [692.0, 72.5], [694.0, 67.47500000000001], [680.0, 118.42105263157895], [706.0, 145.5], [704.0, 74.77777777777779], [718.0, 113.0], [716.0, 73.3823529411765], [714.0, 106.58064516129032], [708.0, 103.37037037037038], [710.0, 72.43243243243242], [720.0, 80.89473684210526], [732.0, 57.33333333333333], [734.0, 71.2], [730.0, 25.36], [728.0, 28.545454545454543], [722.0, 57.92307692307691], [724.0, 132.9230769230769], [726.0, 66.45454545454545], [712.0, 132.3809523809524], [738.0, 74.38461538461539], [736.0, 69.4375], [750.0, 78.0], [748.0, 74.88888888888889], [746.0, 37.36363636363637], [740.0, 80.91666666666666], [742.0, 88.71428571428571], [752.0, 58.21621621621622], [766.0, 70.0], [764.0, 41.92307692307692], [762.0, 110.27777777777777], [760.0, 88.46153846153844], [754.0, 45.1969696969697], [756.0, 62.81818181818182], [758.0, 70.39130434782608], [744.0, 53.75000000000001], [770.0, 107.07142857142858], [768.0, 55.26086956521741], [782.0, 69.82352941176472], [780.0, 123.86363636363637], [778.0, 167.99999999999997], [772.0, 96.83333333333334], [774.0, 135.00000000000003], [784.0, 80.50000000000001], [798.0, 29.145454545454534], [796.0, 67.76923076923077], [794.0, 83.875], [792.0, 106.47368421052632], [786.0, 115.61111111111111], [788.0, 95.3529411764706], [790.0, 82.70370370370371], [776.0, 39.390243902439046], [802.0, 64.875], [800.0, 65.06666666666665], [814.0, 83.89285714285714], [812.0, 130.06666666666666], [810.0, 77.25], [804.0, 90.4705882352941], [806.0, 68.83333333333333], [816.0, 83.30434782608695], [830.0, 92.47619047619047], [828.0, 105.16666666666667], [826.0, 31.545454545454547], [824.0, 14.0], [818.0, 74.85714285714285], [820.0, 97.00000000000001], [822.0, 65.64516129032258], [808.0, 61.66666666666668], [834.0, 64.48275862068964], [832.0, 94.85714285714286], [846.0, 55.05555555555554], [844.0, 44.615384615384606], [842.0, 72.75], [836.0, 37.392156862745104], [838.0, 69.5], [848.0, 26.555555555555536], [862.0, 101.11111111111111], [860.0, 97.6875], [858.0, 42.94339622641508], [856.0, 60.43243243243241], [850.0, 42.234042553191465], [852.0, 63.625], [854.0, 69.6551724137931], [840.0, 61.214285714285715], [866.0, 116.30000000000001], [864.0, 111.63636363636363], [878.0, 133.25], [876.0, 66.50000000000001], [874.0, 141.06250000000003], [868.0, 54.61538461538462], [870.0, 41.568627450980394], [880.0, 83.8888888888889], [894.0, 46.84722222222223], [892.0, 156.42857142857142], [890.0, 84.15384615384616], [888.0, 46.634146341463406], [882.0, 106.54545454545455], [884.0, 124.21428571428572], [886.0, 163.58823529411768], [872.0, 71.15384615384617], [898.0, 116.05882352941175], [896.0, 134.66666666666669], [910.0, 92.3809523809524], [908.0, 76.33333333333334], [906.0, 119.26666666666665], [900.0, 85.24324324324324], [902.0, 82.10000000000001], [912.0, 102.82142857142856], [926.0, 128.45652173913044], [924.0, 130.15789473684208], [922.0, 51.625], [920.0, 72.75], [914.0, 67.66666666666667], [916.0, 87.67857142857143], [918.0, 54.41666666666664], [904.0, 144.4545454545454], [934.0, 24.448275862068968], [928.0, 46.088235294117645], [932.0, 15.999999999999998], [942.0, 41.16666666666667], [940.0, 17.87387387387388], [952.0, 21.904109589041095], [954.0, 76.14285714285715], [956.0, 49.17241379310344], [958.0, 124.11111111111111], [944.0, 52.0], [946.0, 44.0], [948.0, 36.83333333333333], [950.0, 33.27586206896552], [936.0, 27.666666666666657], [938.0, 68.66666666666667], [962.0, 184.07142857142856], [960.0, 48.39285714285714], [974.0, 125.1], [972.0, 154.68750000000003], [970.0, 137.78260869565216], [964.0, 55.571428571428584], [966.0, 67.42857142857142], [976.0, 71.48780487804878], [990.0, 51.543478260869556], [988.0, 117.47368421052632], [986.0, 67.93421052631581], [984.0, 62.63934426229506], [978.0, 198.15384615384613], [980.0, 159.5263157894737], [982.0, 146.24], [968.0, 108.85714285714286], [994.0, 114.75000000000003], [992.0, 59.12987012987011], [1006.0, 145.5], [1004.0, 80.7708333333333], [1002.0, 110.90909090909092], [996.0, 61.24390243902437], [998.0, 165.0], [1008.0, 144.10000000000002], [1022.0, 127.27272727272727], [1020.0, 55.0], [1018.0, 85.13333333333334], [1016.0, 65.95833333333333], [1010.0, 44.72727272727274], [1012.0, 117.14814814814817], [1014.0, 93.64285714285715], [1000.0, 145.95833333333334], [1028.0, 77.32258064516131], [1024.0, 86.64516129032256], [1052.0, 97.13333333333333], [1048.0, 74.2], [1044.0, 98.14634146341463], [1032.0, 47.62857142857143], [1036.0, 73.30303030303028], [1056.0, 115.36363636363632], [1084.0, 42.00000000000001], [1080.0, 36.53846153846154], [1076.0, 70.41666666666666], [1072.0, 59.93333333333334], [1060.0, 109.56666666666666], [1064.0, 51.86666666666667], [1068.0, 18.724137931034488], [1040.0, 88.25925925925927], [1092.0, 61.823529411764696], [1088.0, 38.77777777777779], [1116.0, 130.8181818181818], [1112.0, 67.06666666666669], [1108.0, 62.84615384615386], [1096.0, 90.69999999999997], [1100.0, 102.03571428571429], [1120.0, 75.87179487179489], [1148.0, 91.0], [1144.0, 82.55555555555551], [1140.0, 82.34782608695653], [1136.0, 81.93023255813955], [1124.0, 93.03846153846152], [1128.0, 115.68000000000004], [1132.0, 94.75000000000003], [1104.0, 108.47826086956522], [1156.0, 48.531250000000014], [1152.0, 72.26], [1180.0, 90.44444444444446], [1176.0, 100.17391304347824], [1160.0, 71.57575757575756], [1164.0, 108.91428571428568], [1184.0, 87.85714285714286], [1212.0, 129.53846153846155], [1208.0, 80.48148148148147], [1204.0, 94.94444444444443], [1200.0, 96.15789473684212], [1188.0, 125.42857142857143], [1192.0, 112.9090909090909], [1196.0, 65.75999999999998], [1172.0, 85.0], [1168.0, 21.455555555555556], [1220.0, 41.93975903614459], [1216.0, 140.47058823529406], [1244.0, 69.1153846153846], [1240.0, 83.42857142857143], [1236.0, 39.99199999999999], [1224.0, 91.60000000000001], [1228.0, 63.28571428571429], [1248.0, 89.22222222222223], [1276.0, 58.89189189189187], [1272.0, 64.53409090909095], [1268.0, 51.59701492537316], [1264.0, 32.325581395348834], [1252.0, 104.6842105263158], [1256.0, 58.352941176470594], [1260.0, 62.17948717948716], [1232.0, 102.4615384615385], [1284.0, 113.16666666666666], [1280.0, 118.9782608695652], [1308.0, 69.03571428571429], [1300.0, 35.15151515151514], [1304.0, 73.82142857142858], [1288.0, 60.6060606060606], [1292.0, 22.6], [1328.0, 133.0], [1332.0, 32.01492537313434], [1336.0, 131.99999999999997], [1340.0, 87.50000000000001], [1312.0, 84.69230769230768], [1316.0, 103.88888888888889], [1320.0, 38.46874999999998], [1324.0, 75.52941176470591], [1296.0, 53.0], [1348.0, 91.94871794871797], [1344.0, 54.05882352941179], [1372.0, 119.07317073170732], [1368.0, 110.42857142857142], [1364.0, 85.11111111111109], [1352.0, 78.1666666666667], [1356.0, 121.48387096774194], [1376.0, 131.44117647058823], [1404.0, 100.0], [1400.0, 49.06666666666668], [1396.0, 92.55000000000004], [1392.0, 125.99999999999997], [1380.0, 193.40000000000003], [1384.0, 65.25], [1388.0, 139.48275862068962], [1360.0, 166.46153846153845], [1412.0, 86.99999999999999], [1408.0, 122.42857142857144], [1436.0, 98.22000000000004], [1432.0, 96.29032258064518], [1428.0, 59.018518518518526], [1416.0, 107.27999999999999], [1420.0, 142.88235294117646], [1440.0, 66.31034482758622], [1468.0, 41.03703703703703], [1464.0, 72.73584905660375], [1460.0, 131.8888888888889], [1456.0, 55.31818181818182], [1444.0, 49.65384615384614], [1448.0, 97.53846153846155], [1452.0, 28.57142857142857], [1424.0, 106.34615384615384], [1476.0, 86.47727272727275], [1472.0, 136.03125], [1500.0, 78.49425287356318], [1496.0, 99.1875], [1492.0, 95.52000000000001], [1480.0, 77.71428571428571], [1484.0, 102.72131147540986], [1504.0, 155.0689655172414], [1532.0, 112.01639344262293], [1528.0, 133.1470588235294], [1524.0, 52.00000000000002], [1520.0, 64.85714285714286], [1508.0, 77.4487179487179], [1512.0, 137.29729729729732], [1516.0, 98.90000000000003], [1488.0, 152.66666666666669], [1540.0, 74.19999999999999], [1536.0, 108.25000000000003], [1564.0, 88.08474576271189], [1560.0, 42.9591836734694], [1556.0, 92.07692307692308], [1544.0, 52.973333333333315], [1548.0, 177.12499999999997], [1568.0, 117.5483870967742], [1596.0, 76.10714285714286], [1592.0, 73.32499999999997], [1588.0, 68.78571428571429], [1584.0, 32.83333333333333], [1572.0, 120.57894736842105], [1576.0, 165.1111111111111], [1580.0, 67.69999999999999], [1552.0, 102.12765957446805], [1604.0, 52.636363636363654], [1600.0, 40.446808510638284], [1628.0, 45.34117647058823], [1624.0, 83.95555555555555], [1620.0, 78.09433962264148], [1608.0, 96.9090909090909], [1612.0, 47.37037037037036], [1632.0, 78.8888888888889], [1660.0, 160.68085106382978], [1656.0, 140.39999999999998], [1652.0, 62.888888888888886], [1648.0, 118.4117647058824], [1636.0, 98.97222222222224], [1640.0, 88.43181818181814], [1644.0, 53.47777777777775], [1616.0, 64.14285714285714], [1668.0, 59.33333333333336], [1664.0, 114.52777777777781], [1692.0, 67.5934065934066], [1688.0, 77.29411764705883], [1684.0, 108.21428571428578], [1672.0, 68.86842105263163], [1676.0, 101.94444444444446], [1724.0, 100.71875000000003], [1696.0, 28.98], [1720.0, 105.2], [1716.0, 97.4107142857143], [1712.0, 108.61538461538461], [1700.0, 91.11111111111111], [1704.0, 91.43478260869563], [1708.0, 145.6], [1680.0, 86.21212121212123], [1736.0, 52.828947368421055], [1740.0, 37.140540540540556], [1728.0, 66.36206896551724], [1756.0, 93.36666666666666], [1752.0, 97.24999999999999], [1748.0, 70.99999999999999], [1732.0, 77.8846153846154], [1776.0, 57.81818181818182], [1780.0, 91.3015873015873], [1784.0, 55.63636363636361], [1788.0, 136.79710144927532], [1760.0, 92.0], [1764.0, 70.00000000000001], [1768.0, 80.53333333333332], [1772.0, 80.10000000000001], [1744.0, 58.924528301886795], [1792.0, 138.2604166666666], [1812.0, 72.56716417910445], [1796.0, 131.0], [1800.0, 203.8333333333333], [1804.0, 112.38202247191009], [1840.0, 51.59459459459458], [1844.0, 96.15533980582522], [1848.0, 116.87804878048783], [1852.0, 66.11235955056179], [1808.0, 132.64285714285708], [1816.0, 89.29310344827586], [1820.0, 77.92307692307695], [1824.0, 61.81818181818182], [1828.0, 69.88429752066115], [1832.0, 60.96610169491525], [1836.0, 118.83200000000004], [1904.0, 65.82352941176471], [1860.0, 69.12499999999999], [1856.0, 62.76190476190472], [1864.0, 94.04807692307695], [1868.0, 44.909090909090914], [1908.0, 86.19642857142856], [1912.0, 69.84649122807012], [1916.0, 72.68874172185436], [1880.0, 66.19354838709675], [1876.0, 63.73913043478261], [1872.0, 65.07299270072987], [1884.0, 56.52471482889731], [1888.0, 71.4672897196262], [1892.0, 73.4814814814815], [1896.0, 69.16867469879519], [1900.0, 70.35294117647058], [1924.0, 68.22789783889974], [1920.0, 152.58823529411762], [1928.0, 122.67999999999996], [1932.0, 53.24475524475528], [1936.0, 135.72727272727272], [1940.0, 77.43103448275865], [1944.0, 63.61328125000001], [1948.0, 143.76086956521743], [1952.0, 63.95614035087716], [1976.0, 101.28915662650599], [1980.0, 143.3313131313132], [1968.0, 71.0612244897959], [1972.0, 126.98630136986303], [1956.0, 82.94736842105262], [1960.0, 95.76923076923077], [1964.0, 45.07594936708863], [1984.0, 59.085271317829445], [1988.0, 65.9142857142857], [1992.0, 54.66666666666667], [1996.0, 59.4959349593496], [2000.0, 75.83417447277424], [1029.0, 44.24705882352941], [1025.0, 94.78571428571429], [1053.0, 74.21428571428572], [1049.0, 119.77419354838709], [1045.0, 101.92857142857143], [1033.0, 45.5], [1037.0, 55.55555555555555], [1057.0, 64.4], [1085.0, 73.74999999999997], [1081.0, 45.38333333333333], [1077.0, 70.07142857142856], [1073.0, 56.75], [1061.0, 69.05357142857142], [1065.0, 47.857142857142854], [1069.0, 75.66666666666667], [1041.0, 105.19999999999999], [1093.0, 89.66666666666671], [1089.0, 31.884615384615373], [1117.0, 124.52173913043481], [1113.0, 92.06249999999999], [1109.0, 75.64999999999999], [1097.0, 49.967741935483865], [1101.0, 55.03571428571429], [1121.0, 88.6], [1149.0, 147.00000000000003], [1145.0, 111.33333333333333], [1141.0, 72.05172413793102], [1137.0, 142.83333333333334], [1125.0, 101.1851851851852], [1129.0, 111.33333333333334], [1133.0, 159.9], [1105.0, 60.157894736842096], [1157.0, 57.186046511627936], [1153.0, 68.08695652173914], [1181.0, 83.0], [1177.0, 120.0], [1173.0, 44.39130434782607], [1161.0, 83.66666666666667], [1165.0, 107.65384615384616], [1201.0, 76.06250000000001], [1205.0, 76.55405405405409], [1209.0, 123.26923076923077], [1213.0, 75.48148148148148], [1185.0, 48.40624999999997], [1189.0, 112.15789473684211], [1193.0, 101.96428571428572], [1197.0, 92.84210526315792], [1169.0, 29.294117647058822], [1221.0, 136.7857142857143], [1217.0, 61.975000000000016], [1245.0, 112.85294117647057], [1241.0, 99.09677419354837], [1237.0, 81.77272727272728], [1225.0, 132.2156862745098], [1229.0, 112.69999999999999], [1249.0, 39.68253968253968], [1277.0, 119.40000000000002], [1273.0, 121.17241379310343], [1269.0, 83.4705882352941], [1265.0, 73.14999999999999], [1253.0, 67.02173913043477], [1257.0, 29.975609756097565], [1261.0, 57.179487179487204], [1233.0, 88.26829268292683], [1285.0, 107.38297872340424], [1281.0, 47.093023255813954], [1309.0, 63.13333333333334], [1305.0, 35.36], [1301.0, 89.84615384615384], [1289.0, 62.38541666666667], [1293.0, 51.56249999999999], [1313.0, 75.40000000000002], [1341.0, 112.74074074074073], [1337.0, 85.09090909090908], [1333.0, 115.56250000000001], [1329.0, 132.53571428571428], [1317.0, 35.99999999999999], [1321.0, 61.1904761904762], [1325.0, 44.63829787234042], [1297.0, 101.33333333333333], [1349.0, 104.04761904761905], [1345.0, 105.33333333333334], [1373.0, 40.47674418604651], [1369.0, 134.63636363636363], [1365.0, 87.53571428571428], [1353.0, 47.866666666666646], [1357.0, 148.6923076923077], [1377.0, 78.13513513513514], [1405.0, 143.61904761904765], [1401.0, 137.7777777777778], [1397.0, 60.581081081081074], [1393.0, 68.75999999999999], [1381.0, 55.94999999999995], [1385.0, 140.56410256410257], [1389.0, 161.44], [1361.0, 99.70588235294119], [1413.0, 77.83333333333333], [1409.0, 56.26470588235294], [1437.0, 95.11111111111113], [1433.0, 87.6], [1429.0, 145.4642857142857], [1417.0, 70.14634146341463], [1421.0, 58.68539325842697], [1441.0, 60.85915492957746], [1469.0, 89.12987012987014], [1465.0, 100.6764705882353], [1461.0, 49.333333333333336], [1457.0, 35.990196078431346], [1445.0, 65.6511627906977], [1449.0, 48.96226415094338], [1453.0, 28.19047619047619], [1425.0, 131.57142857142858], [1477.0, 103.32000000000002], [1473.0, 100.26315789473688], [1501.0, 131.57575757575762], [1497.0, 74.77272727272724], [1493.0, 70.87500000000001], [1481.0, 45.97368421052631], [1485.0, 194.44], [1505.0, 132.27777777777783], [1533.0, 97.10810810810811], [1529.0, 118.34146341463413], [1525.0, 73.97297297297297], [1521.0, 93.17857142857144], [1509.0, 77.69999999999997], [1513.0, 106.75609756097562], [1517.0, 92.33783783783784], [1489.0, 144.23809523809524], [1541.0, 59.66666666666667], [1537.0, 119.34374999999999], [1565.0, 111.52173913043477], [1561.0, 93.45], [1557.0, 126.23529411764703], [1545.0, 140.95], [1549.0, 143.54545454545453], [1569.0, 127.81249999999999], [1597.0, 84.10344827586209], [1593.0, 44.49295774647887], [1589.0, 53.67741935483871], [1585.0, 59.523809523809526], [1573.0, 94.19999999999999], [1577.0, 27.107142857142847], [1581.0, 42.83783783783782], [1553.0, 70.09090909090908], [1605.0, 112.04], [1601.0, 61.48571428571429], [1629.0, 57.183823529411775], [1625.0, 87.17391304347824], [1621.0, 103.6923076923077], [1609.0, 93.29999999999998], [1613.0, 59.04000000000001], [1633.0, 70.61764705882352], [1661.0, 120.49999999999997], [1657.0, 147.57575757575756], [1653.0, 141.35416666666666], [1649.0, 72.29268292682923], [1637.0, 180.71428571428572], [1641.0, 46.92763157894735], [1645.0, 33.86956521739132], [1617.0, 75.1038961038961], [1669.0, 104.62962962962965], [1665.0, 81.68085106382976], [1693.0, 28.694915254237277], [1689.0, 119.36538461538458], [1685.0, 144.64705882352945], [1673.0, 92.66666666666666], [1677.0, 95.36363636363637], [1725.0, 128.49999999999994], [1697.0, 28.0], [1721.0, 60.26984126984129], [1717.0, 59.681159420289845], [1713.0, 67.64150943396227], [1701.0, 88.80952380952381], [1705.0, 60.41860465116278], [1709.0, 86.86153846153847], [1681.0, 88.51999999999998], [1733.0, 44.935897435897445], [1729.0, 78.67901234567904], [1757.0, 116.76923076923076], [1753.0, 132.55555555555557], [1749.0, 77.60655737704917], [1737.0, 88.03571428571432], [1741.0, 115.41509433962263], [1761.0, 94.47058823529412], [1789.0, 84.45454545454547], [1785.0, 83.75], [1781.0, 65.54605263157895], [1777.0, 98.23913043478261], [1765.0, 38.82246376811594], [1769.0, 43.36119402985074], [1773.0, 47.049079754601216], [1745.0, 57.682692307692285], [1793.0, 206.54385964912282], [1813.0, 100.64705882352939], [1797.0, 82.53571428571428], [1801.0, 268.09090909090907], [1805.0, 93.35849056603776], [1841.0, 49.0], [1845.0, 116.560606060606], [1849.0, 86.86206896551725], [1853.0, 64.44444444444443], [1809.0, 74.24615384615386], [1817.0, 69.34210526315792], [1821.0, 103.26470588235293], [1825.0, 71.16949152542372], [1829.0, 86.98245614035088], [1833.0, 86.5857142857143], [1837.0, 75.41489361702126], [1861.0, 131.41666666666669], [1857.0, 117.75757575757578], [1865.0, 64.156976744186], [1869.0, 43.520408163265294], [1905.0, 96.0309278350515], [1909.0, 100.46938775510203], [1913.0, 67.34355828220859], [1917.0, 74.52678571428572], [1877.0, 114.66666666666667], [1873.0, 64.8181818181818], [1881.0, 53.80314960629921], [1885.0, 109.00000000000003], [1889.0, 76.10344827586208], [1893.0, 138.79411764705878], [1897.0, 117.07407407407409], [1901.0, 109.41304347826087], [1925.0, 67.22916666666667], [1921.0, 137.47222222222217], [1929.0, 79.74418604651162], [1933.0, 117.58620689655173], [1937.0, 69.90151515151517], [1941.0, 159.46875], [1945.0, 64.88333333333333], [1949.0, 59.87421383647799], [1953.0, 84.8736842105263], [1981.0, 182.60544217687075], [1977.0, 96.21126760563378], [1969.0, 110.97567820392905], [1973.0, 130.6245421245421], [1957.0, 68.56382978723408], [1961.0, 97.47945205479452], [1965.0, 53.791208791208796], [1985.0, 59.75641025641025], [1989.0, 62.08888888888889], [1993.0, 52.38461538461538], [1997.0, 55.816200852676445], [515.0, 87.6], [527.0, 96.1], [525.0, 76.44000000000003], [523.0, 46.62068965517242], [513.0, 94.64285714285714], [517.0, 47.000000000000014], [519.0, 21.125], [543.0, 57.95652173913044], [541.0, 34.875], [539.0, 26.70370370370371], [537.0, 41.588235294117645], [529.0, 147.40000000000003], [531.0, 34.8695652173913], [533.0, 34.90909090909091], [535.0, 46.54545454545454], [521.0, 95.0769230769231], [547.0, 62.65384615384616], [559.0, 42.9375], [557.0, 43.6875], [555.0, 47.333333333333336], [545.0, 52.94117647058824], [549.0, 49.92857142857142], [551.0, 78.66666666666669], [575.0, 20.3013698630137], [573.0, 58.28571428571428], [571.0, 131.1363636363636], [569.0, 102.33333333333333], [561.0, 104.2], [563.0, 54.89999999999999], [565.0, 54.63636363636364], [567.0, 144.54545454545453], [553.0, 91.5], [579.0, 54.55], [591.0, 31.117647058823536], [589.0, 69.57142857142856], [587.0, 45.19230769230767], [577.0, 32.25000000000001], [581.0, 95.85714285714286], [583.0, 75.42857142857143], [607.0, 94.85294117647058], [605.0, 49.83333333333333], [603.0, 74.9375], [601.0, 91.53846153846153], [593.0, 46.11111111111111], [595.0, 78.27777777777779], [597.0, 59.999999999999986], [599.0, 86.49999999999999], [585.0, 42.12500000000001], [611.0, 84.35714285714286], [623.0, 77.60000000000001], [619.0, 73.0], [609.0, 62.88235294117647], [613.0, 140.79999999999998], [615.0, 48.875], [639.0, 40.41666666666667], [637.0, 15.478260869565219], [635.0, 90.3529411764706], [633.0, 84.91666666666667], [625.0, 62.09999999999998], [627.0, 35.10714285714286], [629.0, 65.76470588235293], [631.0, 28.277777777777775], [617.0, 112.55], [667.0, 149.47058823529412], [651.0, 106.54545454545453], [647.0, 44.38095238095238], [665.0, 53.35294117647059], [669.0, 72.15789473684211], [671.0, 65.83333333333333], [657.0, 74.19999999999999], [659.0, 29.458333333333325], [661.0, 80.28571428571428], [663.0, 44.3448275862069], [649.0, 76.64285714285715], [653.0, 54.666666666666664], [655.0, 126.88888888888886], [645.0, 11.538461538461537], [643.0, 11.4], [641.0, 10.0], [675.0, 104.69230769230771], [687.0, 78.52777777777777], [685.0, 54.0], [683.0, 61.99999999999997], [673.0, 87.19230769230771], [677.0, 92.18749999999999], [679.0, 76.41176470588236], [703.0, 62.1739130434783], [701.0, 88.5], [699.0, 28.7391304347826], [697.0, 107.66666666666666], [689.0, 66.36363636363636], [695.0, 66.82142857142856], [691.0, 13.0], [681.0, 123.2], [707.0, 63.91666666666666], [719.0, 61.42105263157895], [717.0, 131.92307692307693], [715.0, 128.34285714285713], [705.0, 82.82352941176471], [709.0, 66.93548387096772], [711.0, 126.99999999999999], [735.0, 22.89473684210526], [733.0, 13.5], [731.0, 30.65714285714286], [729.0, 25.499999999999996], [721.0, 104.2], [723.0, 70.8846153846154], [725.0, 63.9], [727.0, 17.70588235294118], [713.0, 156.0], [739.0, 48.57894736842107], [751.0, 61.1851851851852], [749.0, 58.37499999999999], [747.0, 67.41666666666666], [737.0, 21.875], [741.0, 30.22727272727273], [743.0, 82.00000000000001], [767.0, 106.0], [765.0, 98.25925925925925], [763.0, 88.79166666666667], [761.0, 67.55555555555556], [753.0, 43.952380952380956], [755.0, 78.6875], [757.0, 64.70370370370372], [759.0, 105.71428571428571], [745.0, 65.81818181818181], [771.0, 73.39285714285714], [783.0, 103.43750000000001], [781.0, 57.6304347826087], [779.0, 124.8], [769.0, 150.88235294117646], [773.0, 141.68750000000003], [775.0, 85.51724137931032], [799.0, 96.0909090909091], [797.0, 100.53846153846152], [795.0, 80.28000000000002], [793.0, 103.38888888888889], [785.0, 41.38709677419354], [787.0, 40.83098591549296], [789.0, 84.66666666666669], [791.0, 68.57692307692308], [777.0, 146.4444444444444], [803.0, 75.27777777777779], [815.0, 69.66666666666667], [813.0, 66.73529411764706], [811.0, 65.47999999999999], [801.0, 56.86363636363636], [805.0, 65.64516129032258], [807.0, 98.45000000000002], [831.0, 138.89999999999998], [829.0, 60.26315789473685], [825.0, 27.857142857142858], [827.0, 15.333333333333334], [817.0, 79.83870967741937], [819.0, 34.59459459459458], [821.0, 99.87499999999999], [823.0, 24.374999999999996], [809.0, 56.19512195121952], [835.0, 52.37500000000001], [847.0, 28.647058823529413], [845.0, 96.625], [843.0, 128.16666666666666], [833.0, 67.97297297297295], [837.0, 96.625], [839.0, 74.8888888888889], [863.0, 99.9375], [861.0, 70.38461538461537], [859.0, 51.772727272727266], [857.0, 46.3], [849.0, 59.70000000000002], [851.0, 99.2], [853.0, 95.85714285714286], [855.0, 42.69230769230769], [841.0, 83.00000000000001], [867.0, 52.358974358974365], [879.0, 65.08695652173914], [877.0, 87.06976744186044], [875.0, 52.42307692307693], [865.0, 93.7], [869.0, 109.63636363636364], [871.0, 80.91666666666667], [895.0, 87.80000000000001], [893.0, 100.16666666666667], [891.0, 62.03846153846154], [889.0, 149.2], [881.0, 102.67857142857144], [883.0, 73.475], [885.0, 71.65], [887.0, 31.62499999999999], [873.0, 123.88235294117648], [899.0, 137.06666666666666], [911.0, 69.52631578947368], [909.0, 135.58333333333334], [907.0, 77.45714285714283], [897.0, 85.31818181818181], [901.0, 85.17073170731705], [903.0, 132.58333333333334], [927.0, 66.85000000000001], [925.0, 84.2], [923.0, 75.42307692307693], [921.0, 56.599999999999994], [913.0, 81.06249999999999], [915.0, 126.41666666666667], [917.0, 73.38709677419354], [919.0, 83.90697674418604], [905.0, 86.83870967741936], [933.0, 47.75], [929.0, 31.19354838709678], [931.0, 17.333333333333332], [939.0, 43.352941176470594], [943.0, 29.999999999999996], [941.0, 50.08333333333333], [935.0, 47.55555555555556], [953.0, 43.81249999999999], [955.0, 50.1578947368421], [957.0, 56.5], [959.0, 78.83870967741935], [945.0, 29.464285714285715], [947.0, 30.475000000000005], [949.0, 41.974358974358964], [951.0, 45.333333333333336], [937.0, 20.955882352941174], [963.0, 41.589041095890416], [975.0, 154.53333333333336], [973.0, 88.17857142857144], [971.0, 43.599999999999994], [961.0, 89.10714285714288], [965.0, 111.3913043478261], [967.0, 186.62499999999997], [991.0, 99.9375], [989.0, 186.33333333333334], [987.0, 153.9545454545455], [985.0, 118.56250000000001], [977.0, 80.11764705882354], [979.0, 60.52173913043479], [981.0, 108.07692307692308], [983.0, 169.61904761904762], [969.0, 157.00000000000003], [995.0, 66.7910447761194], [1007.0, 82.92857142857143], [1005.0, 89.1395348837209], [1003.0, 73.4137931034483], [993.0, 154.00000000000003], [997.0, 147.64285714285714], [999.0, 64.80645161290322], [1023.0, 63.65116279069766], [1021.0, 83.46341463414636], [1019.0, 104.17391304347828], [1017.0, 96.0], [1009.0, 144.88888888888889], [1011.0, 127.99999999999997], [1013.0, 68.55555555555553], [1015.0, 129.52380952380952], [1001.0, 83.62068965517243], [1030.0, 94.06666666666666], [1054.0, 90.92307692307692], [1050.0, 103.46153846153845], [1046.0, 67.74468085106386], [1026.0, 79.67741935483872], [1034.0, 108.55555555555556], [1038.0, 62.92592592592591], [1086.0, 95.75], [1082.0, 105.41666666666667], [1078.0, 71.38461538461539], [1074.0, 111.0909090909091], [1058.0, 85.33333333333334], [1062.0, 134.07692307692307], [1070.0, 53.04166666666666], [1066.0, 18.400000000000002], [1042.0, 89.64516129032256], [1094.0, 61.999999999999986], [1118.0, 71.61111111111113], [1114.0, 55.186046511627886], [1110.0, 101.39285714285712], [1090.0, 98.00000000000001], [1098.0, 140.4], [1102.0, 102.11538461538461], [1150.0, 76.98039215686272], [1146.0, 148.65217391304344], [1142.0, 95.94117647058822], [1138.0, 115.33333333333339], [1122.0, 159.11111111111111], [1126.0, 55.61111111111113], [1130.0, 129.00000000000003], [1134.0, 106.4], [1106.0, 116.09090909090907], [1158.0, 115.41176470588236], [1182.0, 96.96153846153845], [1178.0, 103.84000000000005], [1174.0, 80.48148148148147], [1154.0, 96.38095238095237], [1162.0, 87.24324324324324], [1166.0, 60.933333333333344], [1214.0, 97.50000000000001], [1210.0, 143.33333333333331], [1206.0, 90.26666666666668], [1202.0, 89.53333333333333], [1186.0, 87.92105263157895], [1190.0, 100.66666666666667], [1194.0, 157.23529411764707], [1198.0, 116.89285714285714], [1170.0, 69.15384615384615], [1222.0, 60.90909090909092], [1246.0, 135.22727272727272], [1242.0, 126.35714285714289], [1238.0, 93.03030303030303], [1218.0, 76.62264150943396], [1226.0, 71.50980392156863], [1230.0, 111.85294117647061], [1278.0, 94.3421052631579], [1274.0, 108.8695652173913], [1270.0, 81.10256410256409], [1266.0, 31.760000000000005], [1250.0, 126.95454545454547], [1254.0, 33.224489795918366], [1258.0, 69.51219512195121], [1262.0, 75.8], [1234.0, 97.78787878787878], [1290.0, 114.72222222222221], [1282.0, 116.22222222222221], [1310.0, 48.717948717948715], [1306.0, 46.454545454545446], [1286.0, 107.3888888888889], [1294.0, 32.59459459459459], [1330.0, 60.42105263157894], [1334.0, 157.38461538461536], [1338.0, 104.90697674418603], [1342.0, 109.33333333333336], [1314.0, 68.23809523809523], [1318.0, 70.33333333333333], [1322.0, 41.64705882352939], [1326.0, 49.63157894736841], [1298.0, 62.0], [1302.0, 21.846153846153847], [1350.0, 77.14999999999998], [1374.0, 79.12631578947368], [1370.0, 59.09803921568627], [1366.0, 69.43181818181822], [1346.0, 74.02941176470587], [1354.0, 70.69318181818181], [1358.0, 123.66666666666664], [1406.0, 130.32142857142864], [1402.0, 113.1304347826087], [1398.0, 35.63492063492063], [1394.0, 123.9761904761905], [1378.0, 159.91176470588235], [1382.0, 153.29032258064518], [1386.0, 84.06666666666666], [1390.0, 94.76744186046513], [1362.0, 157.66666666666666], [1414.0, 78.72727272727275], [1438.0, 85.10714285714282], [1434.0, 138.8387096774194], [1430.0, 70.35714285714283], [1410.0, 86.50000000000001], [1418.0, 107.0], [1422.0, 116.8], [1470.0, 109.28888888888889], [1466.0, 135.05555555555557], [1462.0, 71.06349206349208], [1458.0, 76.50000000000001], [1442.0, 96.82142857142856], [1446.0, 69.66666666666667], [1450.0, 88.10526315789475], [1454.0, 28.874999999999996], [1426.0, 60.61904761904763], [1478.0, 144.00000000000003], [1502.0, 73.83333333333329], [1498.0, 143.21052631578945], [1494.0, 107.61538461538463], [1474.0, 73.55357142857144], [1482.0, 67.08247422680412], [1486.0, 156.76923076923077], [1534.0, 124.05882352941174], [1530.0, 150.52941176470588], [1526.0, 131.22222222222217], [1522.0, 114.77419354838712], [1506.0, 105.40384615384617], [1510.0, 136.25925925925924], [1514.0, 61.07499999999998], [1518.0, 114.08823529411767], [1490.0, 93.01333333333334], [1542.0, 80.42857142857144], [1566.0, 94.61538461538463], [1562.0, 57.37209302325582], [1558.0, 109.60000000000002], [1538.0, 54.494117647058864], [1546.0, 70.32432432432432], [1550.0, 98.8], [1598.0, 72.35714285714286], [1594.0, 34.32692307692307], [1590.0, 42.98461538461539], [1586.0, 82.36000000000001], [1570.0, 110.18518518518518], [1574.0, 74.50000000000003], [1582.0, 35.58620689655173], [1578.0, 19.75], [1554.0, 74.01754385964911], [1606.0, 56.77272727272729], [1630.0, 187.77777777777777], [1626.0, 162.27272727272728], [1622.0, 127.33333333333334], [1602.0, 108.56521739130436], [1610.0, 42.34899328859061], [1614.0, 94.66666666666667], [1662.0, 84.66666666666666], [1658.0, 157.13333333333333], [1654.0, 95.01333333333336], [1650.0, 61.46153846153846], [1634.0, 88.69863013698625], [1638.0, 128.45454545454547], [1642.0, 37.82432432432432], [1646.0, 89.38461538461539], [1618.0, 71.59090909090911], [1670.0, 99.04], [1690.0, 41.96350364963503], [1686.0, 52.681818181818194], [1666.0, 57.79710144927536], [1694.0, 28.999999999999996], [1674.0, 108.09230769230768], [1678.0, 33.61666666666667], [1698.0, 89.16666666666666], [1726.0, 80.76056338028165], [1722.0, 108.26666666666671], [1718.0, 75.4857142857143], [1714.0, 92.36170212765958], [1702.0, 92.91304347826087], [1706.0, 67.87499999999999], [1710.0, 87.67741935483869], [1682.0, 80.86956521739131], [1734.0, 92.8], [1730.0, 59.042553191489354], [1758.0, 102.26190476190474], [1754.0, 75.58974358974356], [1750.0, 96.08], [1742.0, 41.502617801047144], [1738.0, 29.246753246753247], [1778.0, 122.49999999999999], [1782.0, 44.8235294117647], [1786.0, 108.91428571428573], [1790.0, 107.60493827160494], [1762.0, 107.46551724137932], [1766.0, 68.84210526315789], [1770.0, 73.38095238095238], [1774.0, 69.92], [1746.0, 43.25619834710742], [1794.0, 209.48780487804876], [1798.0, 72.68085106382978], [1814.0, 65.38000000000001], [1802.0, 150.3409090909091], [1806.0, 99.0909090909091], [1842.0, 77.8], [1846.0, 141.28846153846152], [1850.0, 57.28155339805827], [1854.0, 85.75862068965517], [1810.0, 67.53103448275864], [1818.0, 67.64285714285714], [1822.0, 47.03968253968253], [1826.0, 60.04597701149425], [1830.0, 95.00000000000001], [1834.0, 103.08333333333333], [1838.0, 74.65116279069768], [1862.0, 79.42975206611573], [1858.0, 62.88059701492536], [1866.0, 76.29870129870129], [1870.0, 58.393617021276604], [1906.0, 66.69090909090907], [1910.0, 74.28865979381443], [1914.0, 104.61428571428571], [1918.0, 70.5068493150685], [1878.0, 83.89655172413795], [1874.0, 64.80851063829786], [1882.0, 45.854838709677416], [1886.0, 66.98275862068965], [1890.0, 52.26470588235295], [1894.0, 70.27272727272727], [1898.0, 162.42857142857142], [1902.0, 152.71428571428572], [1926.0, 133.04166666666663], [1922.0, 182.55555555555557], [1930.0, 79.75], [1934.0, 158.66666666666663], [1938.0, 86.71874999999997], [1942.0, 69.80597014925372], [1946.0, 84.57142857142854], [1950.0, 60.71794871794874], [1954.0, 44.77464788732396], [1982.0, 174.29166666666669], [1970.0, 131.8092209856915], [1974.0, 76.18803418803417], [1978.0, 102.83181818181822], [1958.0, 98.10000000000001], [1962.0, 51.72131147540981], [1966.0, 66.02884615384617], [1986.0, 64.43859649122805], [1990.0, 53.248148148148196], [1994.0, 41.170694864048336], [1998.0, 53.44579124579122], [1031.0, 111.43750000000003], [1055.0, 114.76923076923076], [1051.0, 71.60000000000001], [1047.0, 73.3846153846154], [1027.0, 33.499999999999986], [1035.0, 61.054054054054035], [1039.0, 76.52941176470587], [1087.0, 123.18750000000001], [1083.0, 124.99999999999997], [1079.0, 126.0], [1075.0, 67.88000000000002], [1059.0, 123.99999999999997], [1063.0, 34.85714285714285], [1067.0, 30.058823529411764], [1071.0, 97.31250000000001], [1043.0, 60.68], [1095.0, 101.23529411764707], [1119.0, 126.9615384615385], [1115.0, 93.82608695652173], [1111.0, 128.0625], [1091.0, 107.6], [1099.0, 79.8095238095238], [1103.0, 48.216666666666676], [1151.0, 130.73333333333335], [1147.0, 79.72727272727272], [1143.0, 90.72972972972974], [1139.0, 73.92727272727274], [1123.0, 85.83870967741936], [1127.0, 76.81818181818184], [1131.0, 80.47368421052634], [1135.0, 60.29870129870132], [1107.0, 97.79999999999998], [1163.0, 37.28571428571429], [1155.0, 93.51851851851852], [1183.0, 137.18750000000003], [1179.0, 121.70588235294117], [1175.0, 149.6], [1159.0, 49.2758620689655], [1203.0, 146.71428571428572], [1167.0, 21.5], [1207.0, 139.5], [1211.0, 66.64705882352936], [1215.0, 42.28571428571429], [1187.0, 53.21052631578949], [1191.0, 111.72222222222223], [1195.0, 61.55882352941174], [1199.0, 105.22857142857141], [1171.0, 124.64285714285714], [1223.0, 145.86956521739128], [1247.0, 116.89655172413791], [1243.0, 114.46428571428572], [1239.0, 44.246913580246904], [1219.0, 113.19999999999997], [1227.0, 75.97959183673471], [1231.0, 118.8125], [1279.0, 133.15384615384616], [1275.0, 72.63333333333333], [1271.0, 74.24444444444448], [1267.0, 71.16129032258064], [1251.0, 38.9703703703704], [1255.0, 65.99999999999999], [1259.0, 53.60000000000001], [1263.0, 58.099999999999994], [1235.0, 97.32432432432431], [1287.0, 74.61224489795919], [1311.0, 46.15384615384616], [1307.0, 80.77777777777779], [1303.0, 32.32432432432433], [1283.0, 131.86363636363635], [1291.0, 52.803030303030326], [1295.0, 27.93333333333333], [1343.0, 135.25806451612902], [1339.0, 73.36842105263158], [1335.0, 51.62499999999999], [1331.0, 153.54545454545453], [1315.0, 32.454545454545446], [1319.0, 39.704545454545446], [1323.0, 49.78571428571428], [1327.0, 126.83999999999999], [1299.0, 57.5], [1351.0, 74.18749999999997], [1375.0, 136.2], [1371.0, 201.57142857142856], [1367.0, 86.46875], [1347.0, 47.22], [1355.0, 74.7741935483871], [1359.0, 59.86153846153846], [1407.0, 196.42857142857144], [1403.0, 91.8409090909091], [1399.0, 118.42222222222222], [1395.0, 73.87878787878788], [1379.0, 133.1785714285714], [1383.0, 181.33333333333331], [1387.0, 121.60000000000001], [1391.0, 60.05405405405405], [1363.0, 139.8139534883721], [1415.0, 137.47058823529414], [1439.0, 101.54054054054055], [1435.0, 61.87804878048779], [1431.0, 153.42857142857142], [1411.0, 68.0], [1419.0, 77.63793103448278], [1423.0, 61.925925925925945], [1471.0, 154.99999999999997], [1467.0, 82.58333333333334], [1463.0, 87.76470588235294], [1459.0, 75.59375000000003], [1443.0, 36.40909090909092], [1447.0, 98.81081081081082], [1455.0, 27.999999999999996], [1451.0, 28.53333333333333], [1427.0, 103.69491525423729], [1479.0, 147.05882352941174], [1503.0, 131.56250000000003], [1499.0, 144.7058823529412], [1495.0, 78.06250000000003], [1475.0, 129.90322580645162], [1483.0, 109.45555555555553], [1487.0, 113.66666666666666], [1535.0, 50.898989898989875], [1531.0, 114.65], [1527.0, 45.82400000000001], [1523.0, 86.65517241379308], [1507.0, 67.63265306122452], [1511.0, 83.55555555555553], [1515.0, 116.63414634146339], [1519.0, 75.53424657534251], [1491.0, 73.35849056603774], [1543.0, 98.42105263157895], [1567.0, 94.44444444444446], [1563.0, 77.99999999999999], [1559.0, 97.57142857142858], [1539.0, 105.53846153846152], [1547.0, 80.06521739130434], [1551.0, 112.56521739130434], [1599.0, 57.63888888888891], [1595.0, 33.45185185185188], [1591.0, 41.84210526315789], [1587.0, 107.8125], [1571.0, 76.42105263157892], [1575.0, 44.24137931034483], [1579.0, 42.4], [1583.0, 102.61111111111111], [1555.0, 89.52499999999998], [1607.0, 71.22727272727272], [1631.0, 149.5], [1627.0, 142.94594594594594], [1623.0, 73.94366197183099], [1603.0, 130.9473684210526], [1611.0, 52.34482758620688], [1615.0, 121.05000000000001], [1663.0, 48.788732394366185], [1659.0, 72.19090909090906], [1655.0, 101.72463768115945], [1651.0, 114.79710144927533], [1635.0, 64.13043478260866], [1639.0, 68.74999999999997], [1643.0, 67.74999999999996], [1647.0, 65.7764705882353], [1619.0, 67.79687500000001], [1679.0, 146.23529411764707], [1671.0, 147.26923076923077], [1691.0, 107.65909090909084], [1687.0, 123.54054054054058], [1667.0, 84.77358490566037], [1695.0, 28.46666666666667], [1675.0, 114.85714285714283], [1699.0, 43.34722222222222], [1727.0, 73.47435897435896], [1723.0, 124.4411764705882], [1719.0, 87.0576923076923], [1715.0, 58.4375], [1703.0, 95.275], [1707.0, 144.14814814814812], [1711.0, 63.452380952380956], [1683.0, 78.66666666666666], [1735.0, 56.6442307692308], [1759.0, 70.11842105263159], [1755.0, 81.0], [1751.0, 67.72093023255812], [1731.0, 106.4193548387097], [1739.0, 57.11340206185565], [1743.0, 71.21621621621625], [1791.0, 189.8805970149254], [1787.0, 110.84615384615384], [1783.0, 103.1875], [1779.0, 66.2164948453609], [1763.0, 38.08906882591092], [1767.0, 78.73809523809523], [1771.0, 74.02325581395348], [1775.0, 121.10714285714286], [1747.0, 61.08547008547013], [1795.0, 171.3962264150943], [1799.0, 302.5048543689319], [1815.0, 71.5961538461538], [1803.0, 119.67647058823535], [1807.0, 96.5135135135135], [1843.0, 33.44444444444445], [1847.0, 96.14814814814817], [1851.0, 56.17073170731709], [1855.0, 80.66250000000001], [1811.0, 88.12307692307691], [1819.0, 84.83673469387755], [1823.0, 86.05128205128207], [1827.0, 75.39534883720931], [1831.0, 73.63291139240503], [1835.0, 67.55384615384614], [1839.0, 90.12121212121214], [1863.0, 89.95238095238099], [1859.0, 127.78723404255322], [1867.0, 45.91891891891893], [1871.0, 65.88888888888889], [1907.0, 122.47500000000001], [1911.0, 63.78285714285719], [1915.0, 121.67567567567568], [1919.0, 96.18965517241381], [1879.0, 71.11111111111111], [1875.0, 64.7307692307692], [1883.0, 56.7127659574468], [1887.0, 71.73333333333335], [1891.0, 79.56451612903226], [1895.0, 95.52173913043478], [1899.0, 103.41071428571429], [1903.0, 44.69509981851181], [1927.0, 72.63636363636363], [1923.0, 198.53333333333336], [1931.0, 88.35849056603774], [1935.0, 87.65384615384616], [1939.0, 64.13684210526317], [1943.0, 57.16129032258068], [1947.0, 104.39743589743591], [1951.0, 50.52830188679245], [1955.0, 59.970802919708035], [1979.0, 117.25294117647061], [1983.0, 71.97777777777779], [1971.0, 116.86792452830187], [1975.0, 98.27683615819211], [1959.0, 100.94444444444444], [1963.0, 53.48416289592756], [1967.0, 38.73698630136987], [1987.0, 67.81651376146787], [1991.0, 50.08620689655172], [1995.0, 49.79793637145324], [1999.0, 60.97886728655957], [1.0, 4.25]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1895.7638400000155, 75.55045499999831]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 846666.6666666666, "minX": 1.58524386E12, "maxY": 1326666.6666666667, "series": [{"data": [[1.58524386E12, 1326666.6666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58524386E12, 846666.6666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524386E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 75.55045499999831, "minX": 1.58524386E12, "maxY": 75.55045499999831, "series": [{"data": [[1.58524386E12, 75.55045499999831]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524386E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 75.54581999999976, "minX": 1.58524386E12, "maxY": 75.54581999999976, "series": [{"data": [[1.58524386E12, 75.54581999999976]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524386E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.2676775000000062, "minX": 1.58524386E12, "maxY": 0.2676775000000062, "series": [{"data": [[1.58524386E12, 0.2676775000000062]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524386E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.58524386E12, "maxY": 1241.0, "series": [{"data": [[1.58524386E12, 1241.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58524386E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58524386E12, 28.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58524386E12, 89.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58524386E12, 34.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524386E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 2415.0, "maxY": 148.0, "series": [{"data": [[8399.0, 148.0], [36768.0, 55.0], [36469.0, 54.0], [2415.0, 107.0], [38885.0, 29.0], [39254.0, 49.0], [11875.0, 15.0], [12847.0, 129.0], [17807.0, 112.0], [18548.0, 108.0], [19336.0, 97.0], [19503.0, 99.0], [5858.0, 123.0], [24864.0, 76.0], [24589.0, 77.0], [24883.0, 79.0], [27651.0, 70.0], [30049.0, 61.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39254.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 2415.0, "maxY": 148.0, "series": [{"data": [[8399.0, 148.0], [36768.0, 55.0], [36469.0, 54.0], [2415.0, 105.0], [38885.0, 29.0], [39254.0, 49.0], [11875.0, 15.0], [12847.0, 129.0], [17807.0, 112.0], [18548.0, 108.0], [19336.0, 97.0], [19503.0, 99.0], [5858.0, 123.0], [24864.0, 76.0], [24589.0, 77.0], [24883.0, 79.0], [27651.0, 70.0], [30049.0, 61.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39254.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524386E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524386E12, 6666.666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524386E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524386E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524386E12, 6666.666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524386E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524386E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524386E12, 6666.666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524386E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524386E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524386E12, 6666.666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524386E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

