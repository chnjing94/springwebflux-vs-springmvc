/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1178.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 3.0], [0.6, 4.0], [0.7, 4.0], [0.8, 5.0], [0.9, 6.0], [1.0, 7.0], [1.1, 9.0], [1.2, 11.0], [1.3, 13.0], [1.4, 14.0], [1.5, 15.0], [1.6, 16.0], [1.7, 17.0], [1.8, 18.0], [1.9, 19.0], [2.0, 19.0], [2.1, 20.0], [2.2, 21.0], [2.3, 21.0], [2.4, 22.0], [2.5, 22.0], [2.6, 23.0], [2.7, 23.0], [2.8, 23.0], [2.9, 24.0], [3.0, 24.0], [3.1, 25.0], [3.2, 25.0], [3.3, 26.0], [3.4, 26.0], [3.5, 26.0], [3.6, 27.0], [3.7, 27.0], [3.8, 28.0], [3.9, 28.0], [4.0, 29.0], [4.1, 29.0], [4.2, 30.0], [4.3, 30.0], [4.4, 31.0], [4.5, 31.0], [4.6, 31.0], [4.7, 32.0], [4.8, 32.0], [4.9, 32.0], [5.0, 32.0], [5.1, 33.0], [5.2, 33.0], [5.3, 33.0], [5.4, 33.0], [5.5, 34.0], [5.6, 34.0], [5.7, 34.0], [5.8, 34.0], [5.9, 35.0], [6.0, 35.0], [6.1, 35.0], [6.2, 36.0], [6.3, 36.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 38.0], [6.8, 38.0], [6.9, 39.0], [7.0, 39.0], [7.1, 40.0], [7.2, 40.0], [7.3, 41.0], [7.4, 41.0], [7.5, 42.0], [7.6, 43.0], [7.7, 43.0], [7.8, 44.0], [7.9, 45.0], [8.0, 45.0], [8.1, 46.0], [8.2, 46.0], [8.3, 46.0], [8.4, 47.0], [8.5, 47.0], [8.6, 47.0], [8.7, 48.0], [8.8, 48.0], [8.9, 48.0], [9.0, 48.0], [9.1, 49.0], [9.2, 49.0], [9.3, 49.0], [9.4, 49.0], [9.5, 49.0], [9.6, 49.0], [9.7, 50.0], [9.8, 50.0], [9.9, 50.0], [10.0, 50.0], [10.1, 50.0], [10.2, 50.0], [10.3, 50.0], [10.4, 50.0], [10.5, 51.0], [10.6, 51.0], [10.7, 51.0], [10.8, 51.0], [10.9, 51.0], [11.0, 51.0], [11.1, 51.0], [11.2, 51.0], [11.3, 51.0], [11.4, 52.0], [11.5, 52.0], [11.6, 52.0], [11.7, 52.0], [11.8, 52.0], [11.9, 52.0], [12.0, 52.0], [12.1, 52.0], [12.2, 52.0], [12.3, 52.0], [12.4, 53.0], [12.5, 53.0], [12.6, 53.0], [12.7, 53.0], [12.8, 53.0], [12.9, 53.0], [13.0, 53.0], [13.1, 53.0], [13.2, 53.0], [13.3, 53.0], [13.4, 54.0], [13.5, 54.0], [13.6, 54.0], [13.7, 54.0], [13.8, 54.0], [13.9, 54.0], [14.0, 54.0], [14.1, 54.0], [14.2, 54.0], [14.3, 54.0], [14.4, 54.0], [14.5, 55.0], [14.6, 55.0], [14.7, 55.0], [14.8, 55.0], [14.9, 55.0], [15.0, 55.0], [15.1, 55.0], [15.2, 55.0], [15.3, 55.0], [15.4, 55.0], [15.5, 55.0], [15.6, 56.0], [15.7, 56.0], [15.8, 56.0], [15.9, 56.0], [16.0, 56.0], [16.1, 56.0], [16.2, 56.0], [16.3, 56.0], [16.4, 56.0], [16.5, 56.0], [16.6, 56.0], [16.7, 57.0], [16.8, 57.0], [16.9, 57.0], [17.0, 57.0], [17.1, 57.0], [17.2, 57.0], [17.3, 57.0], [17.4, 57.0], [17.5, 57.0], [17.6, 57.0], [17.7, 57.0], [17.8, 57.0], [17.9, 58.0], [18.0, 58.0], [18.1, 58.0], [18.2, 58.0], [18.3, 58.0], [18.4, 58.0], [18.5, 58.0], [18.6, 58.0], [18.7, 58.0], [18.8, 58.0], [18.9, 58.0], [19.0, 58.0], [19.1, 59.0], [19.2, 59.0], [19.3, 59.0], [19.4, 59.0], [19.5, 59.0], [19.6, 59.0], [19.7, 59.0], [19.8, 59.0], [19.9, 59.0], [20.0, 59.0], [20.1, 59.0], [20.2, 59.0], [20.3, 59.0], [20.4, 60.0], [20.5, 60.0], [20.6, 60.0], [20.7, 60.0], [20.8, 60.0], [20.9, 60.0], [21.0, 60.0], [21.1, 60.0], [21.2, 60.0], [21.3, 60.0], [21.4, 60.0], [21.5, 60.0], [21.6, 60.0], [21.7, 60.0], [21.8, 60.0], [21.9, 60.0], [22.0, 61.0], [22.1, 61.0], [22.2, 61.0], [22.3, 61.0], [22.4, 61.0], [22.5, 61.0], [22.6, 61.0], [22.7, 61.0], [22.8, 61.0], [22.9, 61.0], [23.0, 61.0], [23.1, 61.0], [23.2, 61.0], [23.3, 61.0], [23.4, 61.0], [23.5, 61.0], [23.6, 61.0], [23.7, 61.0], [23.8, 62.0], [23.9, 62.0], [24.0, 62.0], [24.1, 62.0], [24.2, 62.0], [24.3, 62.0], [24.4, 62.0], [24.5, 62.0], [24.6, 62.0], [24.7, 62.0], [24.8, 62.0], [24.9, 62.0], [25.0, 62.0], [25.1, 62.0], [25.2, 62.0], [25.3, 62.0], [25.4, 62.0], [25.5, 62.0], [25.6, 62.0], [25.7, 62.0], [25.8, 63.0], [25.9, 63.0], [26.0, 63.0], [26.1, 63.0], [26.2, 63.0], [26.3, 63.0], [26.4, 63.0], [26.5, 63.0], [26.6, 63.0], [26.7, 63.0], [26.8, 63.0], [26.9, 63.0], [27.0, 63.0], [27.1, 63.0], [27.2, 63.0], [27.3, 63.0], [27.4, 63.0], [27.5, 63.0], [27.6, 63.0], [27.7, 63.0], [27.8, 63.0], [27.9, 64.0], [28.0, 64.0], [28.1, 64.0], [28.2, 64.0], [28.3, 64.0], [28.4, 64.0], [28.5, 64.0], [28.6, 64.0], [28.7, 64.0], [28.8, 64.0], [28.9, 64.0], [29.0, 64.0], [29.1, 64.0], [29.2, 64.0], [29.3, 64.0], [29.4, 64.0], [29.5, 64.0], [29.6, 64.0], [29.7, 64.0], [29.8, 64.0], [29.9, 64.0], [30.0, 64.0], [30.1, 65.0], [30.2, 65.0], [30.3, 65.0], [30.4, 65.0], [30.5, 65.0], [30.6, 65.0], [30.7, 65.0], [30.8, 65.0], [30.9, 65.0], [31.0, 65.0], [31.1, 65.0], [31.2, 65.0], [31.3, 65.0], [31.4, 65.0], [31.5, 65.0], [31.6, 65.0], [31.7, 65.0], [31.8, 65.0], [31.9, 65.0], [32.0, 65.0], [32.1, 65.0], [32.2, 66.0], [32.3, 66.0], [32.4, 66.0], [32.5, 66.0], [32.6, 66.0], [32.7, 66.0], [32.8, 66.0], [32.9, 66.0], [33.0, 66.0], [33.1, 66.0], [33.2, 66.0], [33.3, 66.0], [33.4, 66.0], [33.5, 66.0], [33.6, 66.0], [33.7, 66.0], [33.8, 66.0], [33.9, 66.0], [34.0, 66.0], [34.1, 67.0], [34.2, 67.0], [34.3, 67.0], [34.4, 67.0], [34.5, 67.0], [34.6, 67.0], [34.7, 67.0], [34.8, 67.0], [34.9, 67.0], [35.0, 67.0], [35.1, 67.0], [35.2, 67.0], [35.3, 67.0], [35.4, 67.0], [35.5, 67.0], [35.6, 67.0], [35.7, 67.0], [35.8, 67.0], [35.9, 67.0], [36.0, 68.0], [36.1, 68.0], [36.2, 68.0], [36.3, 68.0], [36.4, 68.0], [36.5, 68.0], [36.6, 68.0], [36.7, 68.0], [36.8, 68.0], [36.9, 68.0], [37.0, 68.0], [37.1, 68.0], [37.2, 68.0], [37.3, 68.0], [37.4, 68.0], [37.5, 68.0], [37.6, 68.0], [37.7, 68.0], [37.8, 69.0], [37.9, 69.0], [38.0, 69.0], [38.1, 69.0], [38.2, 69.0], [38.3, 69.0], [38.4, 69.0], [38.5, 69.0], [38.6, 69.0], [38.7, 69.0], [38.8, 69.0], [38.9, 69.0], [39.0, 69.0], [39.1, 69.0], [39.2, 69.0], [39.3, 69.0], [39.4, 69.0], [39.5, 69.0], [39.6, 70.0], [39.7, 70.0], [39.8, 70.0], [39.9, 70.0], [40.0, 70.0], [40.1, 70.0], [40.2, 70.0], [40.3, 70.0], [40.4, 70.0], [40.5, 70.0], [40.6, 70.0], [40.7, 70.0], [40.8, 70.0], [40.9, 70.0], [41.0, 70.0], [41.1, 70.0], [41.2, 70.0], [41.3, 71.0], [41.4, 71.0], [41.5, 71.0], [41.6, 71.0], [41.7, 71.0], [41.8, 71.0], [41.9, 71.0], [42.0, 71.0], [42.1, 71.0], [42.2, 71.0], [42.3, 71.0], [42.4, 71.0], [42.5, 71.0], [42.6, 71.0], [42.7, 71.0], [42.8, 71.0], [42.9, 71.0], [43.0, 71.0], [43.1, 72.0], [43.2, 72.0], [43.3, 72.0], [43.4, 72.0], [43.5, 72.0], [43.6, 72.0], [43.7, 72.0], [43.8, 72.0], [43.9, 72.0], [44.0, 72.0], [44.1, 72.0], [44.2, 72.0], [44.3, 72.0], [44.4, 72.0], [44.5, 72.0], [44.6, 72.0], [44.7, 72.0], [44.8, 72.0], [44.9, 73.0], [45.0, 73.0], [45.1, 73.0], [45.2, 73.0], [45.3, 73.0], [45.4, 73.0], [45.5, 73.0], [45.6, 73.0], [45.7, 73.0], [45.8, 73.0], [45.9, 73.0], [46.0, 73.0], [46.1, 73.0], [46.2, 73.0], [46.3, 73.0], [46.4, 73.0], [46.5, 73.0], [46.6, 74.0], [46.7, 74.0], [46.8, 74.0], [46.9, 74.0], [47.0, 74.0], [47.1, 74.0], [47.2, 74.0], [47.3, 74.0], [47.4, 74.0], [47.5, 74.0], [47.6, 74.0], [47.7, 74.0], [47.8, 74.0], [47.9, 74.0], [48.0, 74.0], [48.1, 74.0], [48.2, 74.0], [48.3, 75.0], [48.4, 75.0], [48.5, 75.0], [48.6, 75.0], [48.7, 75.0], [48.8, 75.0], [48.9, 75.0], [49.0, 75.0], [49.1, 75.0], [49.2, 75.0], [49.3, 75.0], [49.4, 75.0], [49.5, 75.0], [49.6, 75.0], [49.7, 75.0], [49.8, 75.0], [49.9, 76.0], [50.0, 76.0], [50.1, 76.0], [50.2, 76.0], [50.3, 76.0], [50.4, 76.0], [50.5, 76.0], [50.6, 76.0], [50.7, 76.0], [50.8, 76.0], [50.9, 76.0], [51.0, 76.0], [51.1, 76.0], [51.2, 76.0], [51.3, 76.0], [51.4, 76.0], [51.5, 76.0], [51.6, 77.0], [51.7, 77.0], [51.8, 77.0], [51.9, 77.0], [52.0, 77.0], [52.1, 77.0], [52.2, 77.0], [52.3, 77.0], [52.4, 77.0], [52.5, 77.0], [52.6, 77.0], [52.7, 77.0], [52.8, 77.0], [52.9, 77.0], [53.0, 77.0], [53.1, 77.0], [53.2, 78.0], [53.3, 78.0], [53.4, 78.0], [53.5, 78.0], [53.6, 78.0], [53.7, 78.0], [53.8, 78.0], [53.9, 78.0], [54.0, 78.0], [54.1, 78.0], [54.2, 78.0], [54.3, 78.0], [54.4, 78.0], [54.5, 78.0], [54.6, 78.0], [54.7, 78.0], [54.8, 79.0], [54.9, 79.0], [55.0, 79.0], [55.1, 79.0], [55.2, 79.0], [55.3, 79.0], [55.4, 79.0], [55.5, 79.0], [55.6, 79.0], [55.7, 79.0], [55.8, 79.0], [55.9, 79.0], [56.0, 79.0], [56.1, 79.0], [56.2, 79.0], [56.3, 80.0], [56.4, 80.0], [56.5, 80.0], [56.6, 80.0], [56.7, 80.0], [56.8, 80.0], [56.9, 80.0], [57.0, 80.0], [57.1, 80.0], [57.2, 80.0], [57.3, 80.0], [57.4, 80.0], [57.5, 80.0], [57.6, 80.0], [57.7, 81.0], [57.8, 81.0], [57.9, 81.0], [58.0, 81.0], [58.1, 81.0], [58.2, 81.0], [58.3, 81.0], [58.4, 81.0], [58.5, 81.0], [58.6, 81.0], [58.7, 81.0], [58.8, 81.0], [58.9, 81.0], [59.0, 82.0], [59.1, 82.0], [59.2, 82.0], [59.3, 82.0], [59.4, 82.0], [59.5, 82.0], [59.6, 82.0], [59.7, 82.0], [59.8, 82.0], [59.9, 82.0], [60.0, 82.0], [60.1, 82.0], [60.2, 83.0], [60.3, 83.0], [60.4, 83.0], [60.5, 83.0], [60.6, 83.0], [60.7, 83.0], [60.8, 83.0], [60.9, 83.0], [61.0, 83.0], [61.1, 83.0], [61.2, 84.0], [61.3, 84.0], [61.4, 84.0], [61.5, 84.0], [61.6, 84.0], [61.7, 84.0], [61.8, 84.0], [61.9, 84.0], [62.0, 84.0], [62.1, 84.0], [62.2, 85.0], [62.3, 85.0], [62.4, 85.0], [62.5, 85.0], [62.6, 85.0], [62.7, 85.0], [62.8, 85.0], [62.9, 85.0], [63.0, 85.0], [63.1, 86.0], [63.2, 86.0], [63.3, 86.0], [63.4, 86.0], [63.5, 86.0], [63.6, 86.0], [63.7, 86.0], [63.8, 86.0], [63.9, 86.0], [64.0, 87.0], [64.1, 87.0], [64.2, 87.0], [64.3, 87.0], [64.4, 87.0], [64.5, 87.0], [64.6, 87.0], [64.7, 87.0], [64.8, 88.0], [64.9, 88.0], [65.0, 88.0], [65.1, 88.0], [65.2, 88.0], [65.3, 88.0], [65.4, 88.0], [65.5, 88.0], [65.6, 89.0], [65.7, 89.0], [65.8, 89.0], [65.9, 89.0], [66.0, 89.0], [66.1, 89.0], [66.2, 89.0], [66.3, 90.0], [66.4, 90.0], [66.5, 90.0], [66.6, 90.0], [66.7, 90.0], [66.8, 90.0], [66.9, 91.0], [67.0, 91.0], [67.1, 91.0], [67.2, 91.0], [67.3, 91.0], [67.4, 91.0], [67.5, 92.0], [67.6, 92.0], [67.7, 92.0], [67.8, 92.0], [67.9, 92.0], [68.0, 92.0], [68.1, 92.0], [68.2, 93.0], [68.3, 93.0], [68.4, 93.0], [68.5, 93.0], [68.6, 93.0], [68.7, 93.0], [68.8, 94.0], [68.9, 94.0], [69.0, 94.0], [69.1, 94.0], [69.2, 94.0], [69.3, 94.0], [69.4, 95.0], [69.5, 95.0], [69.6, 95.0], [69.7, 95.0], [69.8, 95.0], [69.9, 95.0], [70.0, 96.0], [70.1, 96.0], [70.2, 96.0], [70.3, 96.0], [70.4, 96.0], [70.5, 97.0], [70.6, 97.0], [70.7, 97.0], [70.8, 97.0], [70.9, 97.0], [71.0, 97.0], [71.1, 98.0], [71.2, 98.0], [71.3, 98.0], [71.4, 98.0], [71.5, 98.0], [71.6, 98.0], [71.7, 99.0], [71.8, 99.0], [71.9, 99.0], [72.0, 99.0], [72.1, 99.0], [72.2, 99.0], [72.3, 99.0], [72.4, 100.0], [72.5, 100.0], [72.6, 100.0], [72.7, 100.0], [72.8, 100.0], [72.9, 100.0], [73.0, 101.0], [73.1, 101.0], [73.2, 101.0], [73.3, 101.0], [73.4, 101.0], [73.5, 101.0], [73.6, 102.0], [73.7, 102.0], [73.8, 102.0], [73.9, 102.0], [74.0, 102.0], [74.1, 102.0], [74.2, 102.0], [74.3, 103.0], [74.4, 103.0], [74.5, 103.0], [74.6, 103.0], [74.7, 103.0], [74.8, 103.0], [74.9, 104.0], [75.0, 104.0], [75.1, 104.0], [75.2, 104.0], [75.3, 104.0], [75.4, 104.0], [75.5, 104.0], [75.6, 105.0], [75.7, 105.0], [75.8, 105.0], [75.9, 105.0], [76.0, 105.0], [76.1, 105.0], [76.2, 106.0], [76.3, 106.0], [76.4, 106.0], [76.5, 106.0], [76.6, 106.0], [76.7, 106.0], [76.8, 106.0], [76.9, 107.0], [77.0, 107.0], [77.1, 107.0], [77.2, 107.0], [77.3, 107.0], [77.4, 107.0], [77.5, 107.0], [77.6, 108.0], [77.7, 108.0], [77.8, 108.0], [77.9, 108.0], [78.0, 108.0], [78.1, 108.0], [78.2, 108.0], [78.3, 109.0], [78.4, 109.0], [78.5, 109.0], [78.6, 109.0], [78.7, 109.0], [78.8, 109.0], [78.9, 109.0], [79.0, 110.0], [79.1, 110.0], [79.2, 110.0], [79.3, 110.0], [79.4, 110.0], [79.5, 110.0], [79.6, 110.0], [79.7, 111.0], [79.8, 111.0], [79.9, 111.0], [80.0, 111.0], [80.1, 111.0], [80.2, 111.0], [80.3, 111.0], [80.4, 112.0], [80.5, 112.0], [80.6, 112.0], [80.7, 112.0], [80.8, 112.0], [80.9, 112.0], [81.0, 113.0], [81.1, 113.0], [81.2, 113.0], [81.3, 113.0], [81.4, 113.0], [81.5, 113.0], [81.6, 113.0], [81.7, 114.0], [81.8, 114.0], [81.9, 114.0], [82.0, 114.0], [82.1, 114.0], [82.2, 114.0], [82.3, 114.0], [82.4, 115.0], [82.5, 115.0], [82.6, 115.0], [82.7, 115.0], [82.8, 115.0], [82.9, 115.0], [83.0, 115.0], [83.1, 116.0], [83.2, 116.0], [83.3, 116.0], [83.4, 116.0], [83.5, 116.0], [83.6, 116.0], [83.7, 117.0], [83.8, 117.0], [83.9, 117.0], [84.0, 117.0], [84.1, 117.0], [84.2, 117.0], [84.3, 118.0], [84.4, 118.0], [84.5, 118.0], [84.6, 118.0], [84.7, 118.0], [84.8, 118.0], [84.9, 119.0], [85.0, 119.0], [85.1, 119.0], [85.2, 119.0], [85.3, 119.0], [85.4, 120.0], [85.5, 120.0], [85.6, 120.0], [85.7, 120.0], [85.8, 120.0], [85.9, 121.0], [86.0, 121.0], [86.1, 121.0], [86.2, 121.0], [86.3, 121.0], [86.4, 122.0], [86.5, 122.0], [86.6, 122.0], [86.7, 122.0], [86.8, 123.0], [86.9, 123.0], [87.0, 123.0], [87.1, 123.0], [87.2, 124.0], [87.3, 124.0], [87.4, 124.0], [87.5, 124.0], [87.6, 124.0], [87.7, 125.0], [87.8, 125.0], [87.9, 125.0], [88.0, 126.0], [88.1, 126.0], [88.2, 126.0], [88.3, 126.0], [88.4, 127.0], [88.5, 127.0], [88.6, 127.0], [88.7, 127.0], [88.8, 128.0], [88.9, 128.0], [89.0, 128.0], [89.1, 128.0], [89.2, 129.0], [89.3, 129.0], [89.4, 129.0], [89.5, 129.0], [89.6, 130.0], [89.7, 130.0], [89.8, 130.0], [89.9, 131.0], [90.0, 131.0], [90.1, 131.0], [90.2, 131.0], [90.3, 132.0], [90.4, 132.0], [90.5, 132.0], [90.6, 133.0], [90.7, 133.0], [90.8, 133.0], [90.9, 134.0], [91.0, 134.0], [91.1, 134.0], [91.2, 135.0], [91.3, 135.0], [91.4, 136.0], [91.5, 136.0], [91.6, 136.0], [91.7, 137.0], [91.8, 137.0], [91.9, 138.0], [92.0, 138.0], [92.1, 138.0], [92.2, 139.0], [92.3, 139.0], [92.4, 140.0], [92.5, 141.0], [92.6, 141.0], [92.7, 142.0], [92.8, 143.0], [92.9, 143.0], [93.0, 144.0], [93.1, 145.0], [93.2, 145.0], [93.3, 146.0], [93.4, 147.0], [93.5, 148.0], [93.6, 148.0], [93.7, 149.0], [93.8, 150.0], [93.9, 151.0], [94.0, 152.0], [94.1, 153.0], [94.2, 154.0], [94.3, 155.0], [94.4, 156.0], [94.5, 157.0], [94.6, 158.0], [94.7, 159.0], [94.8, 160.0], [94.9, 161.0], [95.0, 162.0], [95.1, 162.0], [95.2, 163.0], [95.3, 164.0], [95.4, 165.0], [95.5, 166.0], [95.6, 167.0], [95.7, 167.0], [95.8, 168.0], [95.9, 169.0], [96.0, 170.0], [96.1, 172.0], [96.2, 173.0], [96.3, 174.0], [96.4, 175.0], [96.5, 176.0], [96.6, 177.0], [96.7, 178.0], [96.8, 179.0], [96.9, 180.0], [97.0, 181.0], [97.1, 182.0], [97.2, 183.0], [97.3, 184.0], [97.4, 185.0], [97.5, 186.0], [97.6, 187.0], [97.7, 189.0], [97.8, 190.0], [97.9, 191.0], [98.0, 193.0], [98.1, 194.0], [98.2, 196.0], [98.3, 198.0], [98.4, 200.0], [98.5, 202.0], [98.6, 204.0], [98.7, 206.0], [98.8, 209.0], [98.9, 211.0], [99.0, 214.0], [99.1, 218.0], [99.2, 221.0], [99.3, 225.0], [99.4, 232.0], [99.5, 242.0], [99.6, 251.0], [99.7, 262.0], [99.8, 273.0], [99.9, 294.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "maxY": 289326.0, "series": [{"data": [[0.0, 289326.0], [1100.0, 20.0], [300.0, 254.0], [100.0, 104226.0], [200.0, 6109.0], [400.0, 42.0], [1000.0, 23.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 43.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 399957.0, "series": [{"data": [[0.0, 399957.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 43.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1725.9001177473833, "minX": 1.58524494E12, "maxY": 1950.204084483753, "series": [{"data": [[1.58524494E12, 1725.9001177473833], [1.585245E12, 1950.204084483753]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585245E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 375.25, "series": [{"data": [[2.0, 1.0], [3.0, 1.5714285714285714], [4.0, 1.5], [5.0, 2.0], [6.0, 1.3333333333333333], [7.0, 1.3333333333333333], [8.0, 1.25], [9.0, 1.75], [10.0, 1.0], [11.0, 1.8], [12.0, 2.0], [13.0, 1.0], [14.0, 1.0], [15.0, 1.0], [17.0, 2.0], [18.0, 2.0], [19.0, 2.0], [20.0, 2.0], [21.0, 1.6], [22.0, 1.6666666666666667], [23.0, 2.0], [25.0, 2.0], [27.0, 2.0769230769230766], [28.0, 1.8571428571428572], [29.0, 1.3333333333333333], [31.0, 2.0], [33.0, 1.0], [32.0, 2.0], [35.0, 2.0], [34.0, 1.6666666666666667], [37.0, 2.0], [36.0, 2.75], [39.0, 2.0], [38.0, 1.75], [41.0, 2.0], [40.0, 2.0], [42.0, 2.0], [45.0, 2.0], [44.0, 2.1428571428571437], [47.0, 2.0], [46.0, 2.0], [49.0, 1.6666666666666667], [48.0, 1.6363636363636365], [51.0, 2.0], [50.0, 1.6666666666666667], [53.0, 3.0], [52.0, 2.0], [54.0, 2.0], [57.0, 1.0], [56.0, 1.6666666666666667], [58.0, 2.0], [61.0, 2.0], [60.0, 1.9333333333333333], [63.0, 2.0], [62.0, 2.5], [66.0, 1.2], [65.0, 2.0], [64.0, 2.6666666666666665], [71.0, 2.0], [70.0, 2.0], [69.0, 2.0], [68.0, 1.6666666666666667], [75.0, 4.0], [74.0, 2.2], [78.0, 4.0], [77.0, 2.0], [76.0, 3.3333333333333335], [83.0, 4.538461538461537], [82.0, 4.7272727272727275], [81.0, 4.250000000000001], [80.0, 4.5], [86.0, 3.5555555555555554], [84.0, 4.0], [90.0, 6.5], [89.0, 3.6666666666666665], [88.0, 3.4444444444444446], [95.0, 3.166666666666667], [94.0, 4.444444444444445], [93.0, 3.0], [98.0, 2.6666666666666665], [97.0, 2.333333333333333], [103.0, 2.5], [102.0, 3.571428571428571], [101.0, 3.0], [100.0, 2.818181818181818], [107.0, 3.0], [106.0, 2.909090909090909], [111.0, 3.4999999999999996], [109.0, 2.8], [108.0, 3.0], [114.0, 4.0], [112.0, 3.0], [119.0, 2.0], [118.0, 2.4285714285714284], [117.0, 2.0], [116.0, 3.5], [123.0, 2.5], [121.0, 2.2857142857142856], [127.0, 2.0], [126.0, 2.6], [125.0, 3.0], [124.0, 2.25], [135.0, 3.0], [133.0, 2.6363636363636362], [132.0, 3.0], [131.0, 2.6666666666666665], [130.0, 3.0], [129.0, 2.5], [128.0, 3.0], [142.0, 2.0], [141.0, 2.0], [140.0, 2.0], [139.0, 2.0], [137.0, 2.25], [136.0, 3.0], [151.0, 2.0], [150.0, 2.4], [149.0, 2.8], [148.0, 3.0], [147.0, 2.666666666666667], [145.0, 3.0], [144.0, 2.6249999999999996], [158.0, 3.0], [157.0, 2.6666666666666665], [156.0, 3.0], [155.0, 2.0], [154.0, 2.0], [152.0, 2.0], [167.0, 2.0], [166.0, 2.0], [165.0, 2.0], [164.0, 2.0], [163.0, 2.0], [161.0, 2.0], [160.0, 3.0], [175.0, 2.1666666666666665], [173.0, 2.0], [172.0, 2.0], [170.0, 2.0], [183.0, 2.888888888888889], [182.0, 2.8], [180.0, 3.0], [178.0, 2.8571428571428568], [177.0, 3.0], [176.0, 2.5714285714285716], [191.0, 3.0], [189.0, 3.0], [188.0, 2.6034482758620694], [187.0, 2.5], [186.0, 3.0], [185.0, 2.6363636363636362], [184.0, 2.2], [199.0, 2.0], [198.0, 2.0], [197.0, 2.0], [196.0, 2.0], [195.0, 2.0], [194.0, 2.0], [192.0, 2.0], [207.0, 2.3333333333333335], [206.0, 2.0], [205.0, 1.5], [204.0, 1.75], [202.0, 2.0], [201.0, 2.0], [213.0, 2.8], [212.0, 3.0], [211.0, 3.0], [209.0, 2.3333333333333335], [223.0, 2.5], [222.0, 3.0], [221.0, 2.571428571428571], [220.0, 2.166666666666667], [218.0, 2.0], [217.0, 2.0], [216.0, 3.0], [231.0, 2.3333333333333335], [227.0, 2.0], [226.0, 2.5], [225.0, 3.0], [224.0, 2.5], [234.0, 145.65625], [235.0, 184.16666666666666], [236.0, 75.8], [237.0, 163.6153846153846], [233.0, 150.125], [238.0, 180.27272727272728], [239.0, 2.166666666666667], [232.0, 2.2], [243.0, 2.6666666666666665], [241.0, 2.6], [240.0, 2.0], [255.0, 2.2666666666666666], [254.0, 1.5454545454545454], [253.0, 2.0], [252.0, 1.8], [251.0, 1.3333333333333333], [269.0, 4.125], [270.0, 3.0], [268.0, 5.0], [264.0, 5.6585365853658525], [263.0, 5.0], [261.0, 4.333333333333333], [258.0, 6.0], [257.0, 2.0], [265.0, 4.597701149425286], [266.0, 3.968253968253969], [286.0, 4.0], [287.0, 3.0], [285.0, 4.0], [284.0, 6.666666666666666], [283.0, 4.0], [281.0, 3.3333333333333335], [280.0, 3.0], [279.0, 4.0], [273.0, 5.124999999999999], [272.0, 3.5], [275.0, 3.857142857142857], [274.0, 4.0], [278.0, 5.0], [276.0, 4.875], [289.0, 279.12500000000006], [288.0, 73.35000000000001], [290.0, 60.5], [291.0, 151.64285714285717], [292.0, 169.07142857142858], [293.0, 179.0], [294.0, 288.0769230769231], [295.0, 43.93333333333332], [303.0, 4.0], [296.0, 4.428571428571429], [298.0, 4.0], [297.0, 3.0], [301.0, 3.8], [300.0, 3.5], [317.0, 5.2], [306.0, 67.5], [307.0, 159.0], [316.0, 5.166666666666666], [309.0, 122.90909090909092], [310.0, 148.66666666666666], [311.0, 114.0], [305.0, 4.0], [304.0, 4.0], [312.0, 171.75], [313.0, 4.375], [315.0, 5.25], [314.0, 4.333333333333333], [319.0, 5.142857142857143], [318.0, 4.760000000000002], [323.0, 4.7272727272727275], [326.0, 65.5], [325.0, 42.00000000000001], [327.0, 108.27272727272727], [321.0, 4.666666666666666], [320.0, 4.8], [335.0, 4.636363636363637], [334.0, 4.5], [332.0, 4.714285714285714], [331.0, 4.0], [329.0, 4.545454545454546], [324.0, 5.0], [350.0, 374.8], [337.0, 188.0], [343.0, 154.87500000000003], [342.0, 4.833333333333333], [340.0, 4.533333333333332], [344.0, 364.1666666666667], [345.0, 198.33333333333334], [349.0, 161.55555555555557], [351.0, 4.0], [348.0, 5.250000000000001], [338.0, 5.333333333333333], [347.0, 5.0], [346.0, 4.666666666666667], [353.0, 321.14285714285717], [352.0, 299.25], [354.0, 355.0], [365.0, 4.333333333333334], [364.0, 4.250000000000001], [356.0, 375.25], [357.0, 282.1], [358.0, 236.0], [359.0, 78.00000000000001], [367.0, 5.0], [360.0, 5.0], [363.0, 4.666666666666667], [362.0, 5.0], [366.0, 5.238095238095239], [370.0, 192.66666666666666], [369.0, 332.7777777777777], [368.0, 4.333333333333334], [371.0, 120.78571428571429], [381.0, 5.0], [380.0, 4.75], [383.0, 6.0], [382.0, 5.25], [372.0, 67.99999999999997], [373.0, 284.71428571428567], [374.0, 205.2307692307692], [375.0, 243.0], [376.0, 88.875], [377.0, 248.5], [378.0, 169.0], [379.0, 203.6], [391.0, 136.36842105263156], [388.0, 237.42857142857142], [389.0, 233.16666666666669], [390.0, 189.63636363636363], [392.0, 86.32258064516124], [398.0, 20.785714285714285], [399.0, 176.16666666666669], [393.0, 190.83333333333326], [394.0, 115.6], [395.0, 175.29411764705884], [396.0, 104.93333333333335], [387.0, 5.1034482758620685], [385.0, 4.5], [384.0, 5.25], [397.0, 218.72727272727272], [407.0, 53.833333333333336], [400.0, 201.16666666666663], [402.0, 5.666666666666666], [412.0, 4.833333333333333], [403.0, 5.333333333333333], [413.0, 140.63636363636365], [415.0, 6.25], [404.0, 112.85714285714288], [405.0, 90.74999999999999], [406.0, 36.333333333333336], [408.0, 136.0], [409.0, 44.583333333333336], [410.0, 208.0], [411.0, 119.0], [431.0, 5.357142857142858], [425.0, 65.5], [426.0, 141.5], [427.0, 70.125], [429.0, 5.0], [419.0, 4.199999999999999], [418.0, 4.666666666666667], [416.0, 5.0], [424.0, 6.666666666666667], [423.0, 5.214285714285715], [421.0, 4.785714285714287], [420.0, 5.0], [434.0, 106.41666666666664], [435.0, 247.28571428571433], [444.0, 142.26666666666668], [445.0, 186.35714285714283], [446.0, 90.5], [447.0, 186.75], [436.0, 142.69999999999996], [437.0, 154.10344827586206], [438.0, 189.84615384615384], [439.0, 199.92857142857144], [433.0, 6.368421052631579], [432.0, 6.5], [440.0, 225.0], [441.0, 218.875], [442.0, 245.6], [443.0, 82.33333333333333], [449.0, 199.5], [448.0, 170.41666666666669], [450.0, 193.83333333333331], [451.0, 125.875], [452.0, 178.54545454545453], [453.0, 176.91666666666666], [454.0, 161.0], [455.0, 167.77777777777777], [456.0, 176.66666666666663], [457.0, 197.0], [458.0, 198.33333333333334], [476.0, 115.36363636363636], [466.0, 240.5], [465.0, 211.2], [467.0, 165.0], [471.0, 174.625], [470.0, 2.0], [469.0, 2.0], [472.0, 114.57142857142856], [473.0, 109.56521739130434], [474.0, 140.29999999999998], [475.0, 128.2941176470588], [477.0, 61.80000000000001], [478.0, 94.75], [479.0, 102.57142857142858], [481.0, 179.7], [480.0, 116.79999999999998], [482.0, 173.14285714285717], [483.0, 112.16666666666667], [484.0, 132.68421052631578], [485.0, 170.90909090909088], [486.0, 110.49999999999999], [487.0, 174.85714285714283], [488.0, 152.0], [494.0, 28.333333333333336], [495.0, 130.0], [492.0, 157.25], [493.0, 112.71428571428572], [489.0, 134.69230769230768], [491.0, 181.76923076923077], [490.0, 2.0], [509.0, 146.92307692307693], [505.0, 98.66666666666667], [504.0, 38.31250000000001], [506.0, 93.91666666666666], [507.0, 113.90000000000002], [508.0, 58.77777777777778], [499.0, 1.6666666666666667], [498.0, 1.8], [497.0, 1.0], [496.0, 1.5], [510.0, 157.58333333333331], [511.0, 135.73333333333335], [503.0, 2.0], [502.0, 2.0], [501.0, 2.0], [514.0, 98.78260869565216], [512.0, 63.13333333333333], [526.0, 63.93103448275859], [524.0, 132.58333333333334], [522.0, 134.05882352941177], [516.0, 64.6], [518.0, 72.0], [528.0, 65.13333333333333], [540.0, 2.0], [538.0, 2.0], [536.0, 2.0], [530.0, 64.15384615384615], [534.0, 1.5555555555555556], [532.0, 1.7777777777777777], [520.0, 152.85714285714286], [546.0, 122.83333333333333], [544.0, 111.08333333333333], [558.0, 164.72727272727272], [556.0, 149.41666666666666], [554.0, 122.125], [548.0, 73.875], [550.0, 95.27777777777777], [560.0, 77.5294117647059], [568.0, 33.0], [574.0, 2.250000000000001], [570.0, 2.3333333333333335], [562.0, 155.4], [564.0, 116.57142857142857], [566.0, 77.61538461538461], [552.0, 167.0], [578.0, 103.11111111111111], [576.0, 182.16666666666666], [590.0, 102.16666666666667], [588.0, 85.00000000000001], [586.0, 70.73913043478264], [580.0, 74.8], [582.0, 81.84], [592.0, 129.53846153846155], [606.0, 172.99999999999997], [604.0, 175.85714285714286], [600.0, 178.0], [602.0, 3.0], [594.0, 88.29411764705881], [596.0, 162.1818181818182], [598.0, 179.1176470588235], [584.0, 147.0909090909091], [610.0, 73.13333333333334], [608.0, 135.44444444444446], [622.0, 28.736842105263165], [620.0, 75.26666666666664], [618.0, 75.0], [612.0, 139.69230769230768], [614.0, 122.53846153846152], [624.0, 66.94444444444446], [638.0, 57.214285714285715], [636.0, 127.5], [634.0, 38.25], [632.0, 154.42307692307693], [626.0, 130.2], [628.0, 63.00000000000001], [630.0, 130.0], [616.0, 148.57142857142856], [642.0, 92.5], [640.0, 71.4], [654.0, 29.688888888888876], [652.0, 97.44444444444444], [646.0, 61.119999999999976], [644.0, 2.6999999999999997], [656.0, 96.1111111111111], [670.0, 31.466666666666672], [664.0, 37.97297297297299], [666.0, 1.857142857142857], [658.0, 144.8], [660.0, 112.73333333333335], [662.0, 91.2], [648.0, 99.72727272727273], [650.0, 147.42857142857142], [674.0, 77.0], [672.0, 142.33333333333334], [686.0, 130.89999999999998], [684.0, 131.83333333333334], [682.0, 129.5], [676.0, 136.875], [678.0, 133.0909090909091], [688.0, 128.33333333333334], [702.0, 159.14285714285717], [700.0, 151.81250000000003], [698.0, 128.3076923076923], [696.0, 57.78571428571429], [690.0, 144.11111111111114], [694.0, 2.0], [692.0, 1.0], [680.0, 147.5], [706.0, 106.99999999999999], [704.0, 162.62499999999997], [718.0, 2.0], [716.0, 164.0], [714.0, 25.0], [708.0, 148.11111111111111], [710.0, 127.33333333333334], [722.0, 68.92307692307693], [720.0, 1.0], [734.0, 98.57142857142858], [732.0, 88.88888888888889], [730.0, 115.26315789473688], [728.0, 147.49999999999994], [724.0, 97.8888888888889], [726.0, 138.4], [712.0, 102.75], [738.0, 92.72222222222224], [736.0, 102.42105263157896], [750.0, 100.64999999999999], [748.0, 66.09523809523807], [740.0, 122.11111111111111], [742.0, 169.5], [752.0, 166.70000000000002], [766.0, 173.25], [764.0, 109.95000000000002], [762.0, 12.700421940928273], [760.0, 13.830357142857146], [754.0, 131.4], [756.0, 152.66666666666666], [758.0, 161.5], [746.0, 100.07142857142856], [744.0, 2.0], [770.0, 83.32352941176472], [768.0, 53.99999999999999], [782.0, 67.39473684210525], [780.0, 59.84848484848486], [778.0, 74.15384615384616], [772.0, 129.08695652173915], [774.0, 121.11764705882351], [784.0, 115.125], [798.0, 97.66666666666666], [796.0, 153.8], [794.0, 76.2413793103448], [792.0, 143.125], [786.0, 140.63636363636365], [788.0, 100.30434782608695], [790.0, 128.26315789473682], [776.0, 78.31818181818183], [802.0, 96.33333333333333], [800.0, 76.0], [814.0, 141.86956521739134], [812.0, 124.55000000000001], [810.0, 26.285714285714278], [804.0, 148.0909090909091], [806.0, 104.31818181818181], [816.0, 46.57894736842104], [830.0, 45.6], [828.0, 165.8], [826.0, 108.55555555555554], [824.0, 56.647058823529406], [818.0, 20.254826254826263], [820.0, 119.5625], [822.0, 118.19999999999997], [808.0, 44.319999999999986], [858.0, 167.31249999999997], [844.0, 61.333333333333336], [832.0, 104.43478260869564], [834.0, 129.79999999999998], [836.0, 14.583333333333332], [848.0, 142.41666666666666], [862.0, 143.94117647058823], [860.0, 130.13636363636363], [856.0, 135.85714285714283], [838.0, 16.09090909090909], [850.0, 123.75000000000001], [852.0, 65.69999999999999], [854.0, 148.25], [842.0, 27.083333333333332], [840.0, 16.5], [846.0, 109.93750000000001], [866.0, 33.89898989898989], [864.0, 142.69230769230768], [878.0, 114.6470588235294], [876.0, 156.99999999999997], [874.0, 60.166666666666664], [868.0, 63.71428571428572], [870.0, 107.26666666666667], [880.0, 70.24242424242425], [894.0, 153.0], [892.0, 188.0], [888.0, 167.35294117647058], [890.0, 23.0], [882.0, 97.03225806451614], [884.0, 76.07142857142857], [886.0, 136.31250000000003], [872.0, 37.2], [898.0, 108.17241379310346], [896.0, 98.51351351351352], [908.0, 89.30769230769229], [906.0, 70.08], [900.0, 118.44999999999999], [902.0, 162.5], [926.0, 78.33333333333333], [912.0, 17.0], [924.0, 105.00000000000001], [922.0, 100.21428571428571], [920.0, 143.6428571428571], [914.0, 99.41666666666669], [916.0, 124.02777777777773], [918.0, 55.593750000000014], [904.0, 134.55], [930.0, 65.66666666666667], [928.0, 75.2727272727273], [942.0, 82.92857142857143], [940.0, 130.05555555555554], [938.0, 157.9], [932.0, 75.44444444444444], [934.0, 62.15217391304346], [944.0, 99.24999999999999], [958.0, 99.74999999999999], [956.0, 152.94117647058823], [954.0, 133.66666666666669], [952.0, 176.58823529411765], [946.0, 102.57142857142856], [948.0, 125.59999999999998], [950.0, 104.55555555555556], [936.0, 141.42857142857144], [962.0, 111.05555555555556], [960.0, 143.53333333333336], [974.0, 66.94736842105264], [972.0, 95.38888888888889], [964.0, 89.41176470588233], [966.0, 51.222222222222214], [984.0, 36.62068965517241], [986.0, 95.75000000000001], [988.0, 113.99999999999996], [990.0, 81.58000000000003], [976.0, 167.64705882352936], [978.0, 70.00000000000001], [980.0, 96.63414634146339], [982.0, 74.16666666666667], [970.0, 116.05555555555556], [968.0, 19.875000000000004], [994.0, 149.2], [992.0, 121.16666666666669], [1006.0, 91.57446808510639], [1004.0, 94.18421052631578], [1002.0, 127.00000000000001], [996.0, 81.81818181818181], [998.0, 62.9], [1008.0, 167.47058823529412], [1022.0, 91.85714285714283], [1020.0, 110.61764705882355], [1018.0, 125.32467532467534], [1016.0, 145.42857142857142], [1010.0, 93.5], [1012.0, 98.125], [1014.0, 113.3], [1000.0, 69.81818181818181], [1028.0, 89.5], [1024.0, 164.9], [1052.0, 146.74999999999997], [1048.0, 64.33333333333331], [1044.0, 99.17391304347825], [1040.0, 28.945454545454552], [1032.0, 88.20000000000002], [1036.0, 41.565217391304344], [1056.0, 134.45], [1084.0, 127.09999999999998], [1080.0, 102.43333333333335], [1076.0, 103.39024390243902], [1072.0, 43.1206896551724], [1060.0, 52.0], [1064.0, 104.21874999999997], [1068.0, 79.9189189189189], [1092.0, 131.45454545454547], [1088.0, 108.38636363636364], [1116.0, 126.57142857142861], [1112.0, 64.4], [1108.0, 138.07142857142856], [1104.0, 99.6923076923077], [1096.0, 91.9655172413793], [1100.0, 90.36000000000001], [1120.0, 91.72727272727272], [1148.0, 133.23809523809524], [1144.0, 104.46666666666665], [1140.0, 142.35000000000002], [1136.0, 69.0869565217391], [1124.0, 91.92592592592592], [1128.0, 60.54166666666667], [1132.0, 73.11111111111111], [1156.0, 102.53125000000001], [1152.0, 64.87499999999999], [1180.0, 50.24999999999999], [1176.0, 76.50943396226415], [1172.0, 118.12903225806451], [1168.0, 105.53333333333333], [1160.0, 155.59259259259258], [1164.0, 93.25000000000001], [1184.0, 115.88235294117646], [1188.0, 23.166666666666664], [1212.0, 79.73333333333333], [1208.0, 192.16666666666666], [1204.0, 85.09090909090908], [1200.0, 76.66666666666666], [1196.0, 91.26315789473685], [1192.0, 24.296296296296294], [1220.0, 114.83333333333331], [1216.0, 124.38461538461536], [1244.0, 186.99999999999997], [1240.0, 115.45454545454547], [1236.0, 105.51162790697674], [1224.0, 159.51999999999995], [1228.0, 75.86956521739133], [1248.0, 125.66666666666667], [1276.0, 150.3846153846154], [1272.0, 115.60975609756099], [1268.0, 47.83050847457626], [1264.0, 148.03333333333333], [1252.0, 59.09999999999998], [1256.0, 99.0], [1260.0, 119.44444444444446], [1232.0, 117.61111111111111], [1284.0, 86.00000000000001], [1280.0, 205.43750000000003], [1308.0, 57.21428571428571], [1304.0, 38.3170731707317], [1300.0, 94.95238095238095], [1288.0, 145.58333333333334], [1292.0, 195.76190476190473], [1312.0, 103.8], [1340.0, 149.83333333333331], [1336.0, 169.125], [1332.0, 54.975609756097576], [1328.0, 91.00000000000003], [1316.0, 99.3636363636363], [1320.0, 171.63333333333333], [1324.0, 123.21428571428571], [1296.0, 61.05999999999999], [1348.0, 148.69230769230768], [1344.0, 96.55172413793105], [1372.0, 121.23529411764707], [1368.0, 72.43749999999999], [1364.0, 140.47058823529412], [1352.0, 124.2], [1356.0, 88.07142857142858], [1376.0, 58.00000000000001], [1404.0, 174.6521739130435], [1400.0, 164.84615384615384], [1396.0, 41.13432835820897], [1392.0, 62.641025641025635], [1380.0, 52.214285714285715], [1384.0, 99.57777777777775], [1388.0, 54.63636363636362], [1360.0, 185.0], [1412.0, 92.4901960784314], [1408.0, 131.2941176470588], [1436.0, 133.58333333333337], [1432.0, 100.33333333333334], [1428.0, 136.07999999999993], [1416.0, 156.83333333333337], [1420.0, 46.869565217391305], [1440.0, 61.96226415094339], [1464.0, 79.1764705882353], [1468.0, 176.38888888888889], [1460.0, 64.58208955223881], [1456.0, 80.26984126984132], [1444.0, 148.58333333333334], [1448.0, 127.06779661016948], [1452.0, 124.04000000000002], [1424.0, 159.47058823529412], [1476.0, 120.77272727272722], [1472.0, 137.5], [1500.0, 183.35714285714286], [1496.0, 115.08333333333334], [1492.0, 123.42424242424237], [1480.0, 80.82608695652175], [1484.0, 176.4516129032258], [1504.0, 140.3793103448276], [1532.0, 130.05263157894737], [1528.0, 74.33333333333333], [1524.0, 74.41379310344828], [1520.0, 37.285714285714285], [1508.0, 90.61904761904763], [1512.0, 156.28571428571428], [1516.0, 76.94444444444444], [1488.0, 172.55], [1540.0, 149.7647058823529], [1536.0, 162.33333333333334], [1564.0, 88.07843137254905], [1560.0, 163.83333333333334], [1556.0, 170.93333333333334], [1544.0, 165.94871794871796], [1548.0, 127.73529411764704], [1568.0, 150.61904761904762], [1596.0, 57.96000000000001], [1592.0, 201.94117647058823], [1588.0, 129.02083333333326], [1584.0, 99.20289855072467], [1572.0, 164.75], [1576.0, 175.7826086956522], [1580.0, 71.23809523809521], [1552.0, 120.70588235294119], [1604.0, 120.640625], [1600.0, 77.36893203883493], [1628.0, 69.84905660377356], [1624.0, 109.54347826086953], [1620.0, 81.57777777777777], [1608.0, 161.45454545454544], [1612.0, 150.10000000000002], [1632.0, 68.1794871794872], [1660.0, 150.0], [1656.0, 131.5294117647059], [1652.0, 127.5294117647059], [1648.0, 97.58620689655174], [1636.0, 113.9090909090909], [1640.0, 179.07142857142858], [1644.0, 92.38461538461539], [1616.0, 85.37837837837837], [1676.0, 109.91176470588235], [1668.0, 60.612244897959194], [1692.0, 54.56250000000001], [1664.0, 30.068965517241384], [1672.0, 81.18518518518518], [1696.0, 191.0], [1724.0, 111.86363636363636], [1720.0, 73.2666666666667], [1716.0, 125.90566037735846], [1712.0, 164.13793103448273], [1700.0, 179.6296296296296], [1704.0, 98.35483870967742], [1708.0, 139.5294117647059], [1684.0, 131.96153846153845], [1680.0, 31.705882352941174], [1688.0, 110.29787234042554], [1732.0, 79.13333333333335], [1728.0, 99.59999999999998], [1756.0, 101.69230769230768], [1752.0, 174.0909090909091], [1748.0, 62.787234042553216], [1736.0, 134.29032258064512], [1740.0, 93.85294117647061], [1760.0, 162.77272727272728], [1788.0, 85.37974683544303], [1784.0, 82.67692307692305], [1780.0, 126.7872340425532], [1776.0, 115.53846153846158], [1764.0, 60.92105263157896], [1768.0, 76.31707317073169], [1772.0, 146.05128205128202], [1744.0, 154.72222222222223], [1800.0, 92.19642857142857], [1792.0, 53.44642857142858], [1820.0, 89.69291338582681], [1796.0, 131.06451612903228], [1804.0, 82.16216216216219], [1824.0, 148.92499999999998], [1852.0, 127.93023255813952], [1848.0, 80.54347826086955], [1844.0, 63.121951219512205], [1840.0, 185.0967741935484], [1828.0, 107.39393939393939], [1832.0, 175.1764705882353], [1836.0, 143.93333333333334], [1808.0, 52.96923076923079], [1812.0, 33.0], [1816.0, 34.0], [1860.0, 151.75], [1856.0, 204.5263157894737], [1884.0, 174.93333333333334], [1880.0, 74.60869565217392], [1876.0, 84.75757575757575], [1864.0, 119.5], [1868.0, 94.77027027027032], [1888.0, 43.626666666666665], [1916.0, 147.75], [1912.0, 155.05769230769226], [1904.0, 181.6], [1908.0, 46.89855072463768], [1892.0, 48.88235294117647], [1896.0, 93.13636363636361], [1900.0, 89.20833333333327], [1872.0, 85.20253164556961], [1924.0, 100.57446808510633], [1920.0, 191.61538461538458], [1948.0, 127.7608695652174], [1944.0, 120.60606060606062], [1940.0, 177.4375], [1928.0, 153.8947368421053], [1932.0, 192.20588235294116], [1952.0, 139.56349206349205], [1980.0, 115.39583333333337], [1976.0, 96.12820512820512], [1968.0, 78.37190082644625], [1972.0, 89.48484848484848], [1956.0, 132.29285714285717], [1960.0, 116.11224489795913], [1964.0, 118.58823529411767], [1936.0, 79.48275862068967], [1984.0, 61.504347826086956], [1988.0, 74.01851851851856], [1992.0, 61.85974025974027], [1996.0, 79.94340836012844], [2000.0, 83.18317710169525], [1025.0, 120.83333333333333], [1053.0, 42.50684931506848], [1049.0, 71.57352941176468], [1045.0, 107.3846153846154], [1041.0, 91.0], [1029.0, 133.25000000000003], [1033.0, 144.24999999999997], [1037.0, 46.15384615384615], [1085.0, 60.25000000000003], [1081.0, 116.53846153846153], [1077.0, 119.35483870967742], [1073.0, 66.71428571428571], [1057.0, 59.86666666666665], [1061.0, 93.61538461538461], [1065.0, 89.15999999999998], [1069.0, 125.45], [1089.0, 79.02222222222223], [1117.0, 91.27777777777777], [1113.0, 104.28571428571429], [1109.0, 77.96296296296298], [1105.0, 101.39393939393939], [1093.0, 90.8695652173913], [1097.0, 110.00000000000001], [1101.0, 62.3846153846154], [1149.0, 66.90196078431372], [1145.0, 99.8], [1141.0, 104.10714285714285], [1137.0, 121.08333333333331], [1121.0, 84.96666666666667], [1125.0, 125.90000000000002], [1133.0, 82.38888888888889], [1129.0, 25.230769230769234], [1153.0, 96.7692307692308], [1181.0, 144.75], [1177.0, 121.21052631578947], [1173.0, 86.0909090909091], [1169.0, 106.93333333333334], [1157.0, 80.73333333333332], [1161.0, 149.6315789473684], [1165.0, 183.59999999999997], [1209.0, 76.70370370370368], [1213.0, 82.46341463414635], [1205.0, 106.33333333333333], [1201.0, 23.058823529411764], [1185.0, 144.84615384615387], [1193.0, 29.064516129032253], [1189.0, 23.5], [1197.0, 117.9090909090909], [1221.0, 131.07142857142856], [1217.0, 144.7142857142857], [1245.0, 128.17391304347828], [1241.0, 162.8636363636364], [1237.0, 85.31818181818183], [1225.0, 196.7894736842105], [1229.0, 97.2105263157895], [1249.0, 162.31250000000006], [1277.0, 68.0], [1273.0, 187.5], [1269.0, 118.1875], [1265.0, 122.84], [1253.0, 40.67826086956525], [1257.0, 44.048780487804876], [1261.0, 118.28571428571429], [1233.0, 76.24390243902434], [1285.0, 121.00000000000001], [1281.0, 82.7142857142857], [1309.0, 97.49999999999999], [1305.0, 133.65384615384616], [1301.0, 189.23076923076923], [1289.0, 174.4], [1293.0, 43.807692307692314], [1313.0, 81.91666666666664], [1341.0, 151.58536585365852], [1337.0, 156.57142857142858], [1333.0, 79.55999999999999], [1329.0, 116.73333333333332], [1317.0, 142.70000000000005], [1321.0, 130.20689655172413], [1325.0, 114.48275862068968], [1297.0, 163.61904761904765], [1349.0, 118.6666666666667], [1345.0, 183.86363636363637], [1373.0, 155.2222222222222], [1369.0, 67.17391304347824], [1365.0, 123.2], [1353.0, 109.23529411764704], [1357.0, 74.76470588235294], [1377.0, 98.2162162162162], [1405.0, 176.27272727272722], [1401.0, 179.21212121212122], [1397.0, 162.86363636363635], [1393.0, 139.15384615384616], [1381.0, 65.64583333333334], [1385.0, 144.48], [1389.0, 102.55102040816331], [1361.0, 77.34883720930229], [1421.0, 136.0], [1413.0, 121.92857142857142], [1437.0, 130.36363636363635], [1409.0, 35.4], [1433.0, 162.82608695652172], [1417.0, 143.08333333333331], [1457.0, 159.84615384615387], [1461.0, 147.79166666666666], [1465.0, 129.42424242424238], [1469.0, 130.18749999999997], [1441.0, 92.92307692307695], [1445.0, 165.34782608695647], [1449.0, 81.81666666666669], [1453.0, 77.85714285714283], [1425.0, 78.56666666666668], [1429.0, 32.0], [1477.0, 134.8], [1473.0, 130.96296296296296], [1501.0, 60.305263157894714], [1497.0, 142.75000000000003], [1493.0, 122.27659574468086], [1481.0, 100.95555555555559], [1485.0, 148.42105263157896], [1505.0, 154.8461538461538], [1533.0, 130.28000000000003], [1529.0, 181.72727272727272], [1525.0, 75.00000000000001], [1521.0, 83.6], [1509.0, 81.98148148148148], [1513.0, 142.15], [1517.0, 83.04878048780486], [1489.0, 51.18072289156626], [1541.0, 127.71052631578952], [1537.0, 175.7222222222222], [1565.0, 96.61538461538463], [1561.0, 146.91304347826085], [1557.0, 147.25], [1545.0, 141.93749999999997], [1549.0, 109.11320754716982], [1569.0, 71.39622641509432], [1597.0, 100.52631578947373], [1593.0, 111.11111111111113], [1589.0, 171.2], [1585.0, 81.18644067796609], [1573.0, 106.92500000000001], [1577.0, 165.71428571428572], [1581.0, 193.75000000000003], [1553.0, 150.2142857142857], [1605.0, 148.93023255813958], [1601.0, 106.48076923076921], [1629.0, 126.2647058823529], [1625.0, 99.95238095238093], [1621.0, 186.5], [1609.0, 190.1153846153846], [1613.0, 177.53333333333336], [1633.0, 141.96153846153845], [1661.0, 68.00000000000001], [1657.0, 106.73684210526315], [1653.0, 162.1764705882353], [1649.0, 117.74324324324326], [1637.0, 160.76923076923077], [1641.0, 86.44999999999997], [1645.0, 137.06451612903226], [1617.0, 135.41666666666666], [1677.0, 165.82608695652178], [1669.0, 98.16666666666664], [1693.0, 107.95238095238096], [1665.0, 31.0], [1689.0, 101.00000000000001], [1673.0, 195.75], [1713.0, 97.67441860465115], [1717.0, 71.89999999999995], [1721.0, 41.944444444444436], [1725.0, 145.90000000000003], [1697.0, 105.55999999999997], [1701.0, 103.8936170212766], [1705.0, 71.41025641025642], [1709.0, 104.57142857142856], [1685.0, 77.01612903225808], [1681.0, 31.15217391304348], [1733.0, 115.06249999999997], [1729.0, 184.41379310344828], [1757.0, 92.51612903225808], [1753.0, 140.99999999999991], [1749.0, 174.82608695652175], [1737.0, 180.0], [1741.0, 102.71428571428572], [1761.0, 62.056338028169044], [1789.0, 144.9], [1785.0, 96.4], [1781.0, 99.4864864864865], [1777.0, 162.8695652173913], [1765.0, 213.03846153846155], [1769.0, 72.07692307692307], [1773.0, 40.275362318840564], [1745.0, 110.15909090909093], [1801.0, 78.95999999999998], [1793.0, 70.31521739130437], [1821.0, 70.51898734177215], [1797.0, 159.71874999999997], [1805.0, 122.17500000000003], [1825.0, 152.39999999999998], [1853.0, 122.36842105263153], [1849.0, 198.93548387096774], [1845.0, 99.27777777777774], [1841.0, 127.96428571428567], [1829.0, 178.3823529411765], [1833.0, 155.06451612903226], [1837.0, 153.44262295081967], [1809.0, 111.59701492537306], [1813.0, 32.74074074074073], [1817.0, 78.79166666666666], [1861.0, 78.96052631578948], [1857.0, 41.22222222222222], [1885.0, 107.20987654320989], [1881.0, 47.01265822784808], [1877.0, 91.55882352941175], [1865.0, 96.9732142857143], [1869.0, 157.8857142857143], [1889.0, 137.73999999999998], [1917.0, 101.64545454545454], [1913.0, 89.42424242424241], [1909.0, 89.48333333333336], [1905.0, 90.53703703703702], [1893.0, 184.32857142857148], [1897.0, 113.63235294117652], [1901.0, 69.3], [1873.0, 79.46428571428572], [1925.0, 108.8125], [1921.0, 68.76344086021504], [1949.0, 157.80799999999996], [1945.0, 166.92857142857142], [1941.0, 113.07142857142858], [1929.0, 174.2162162162162], [1933.0, 53.37254901960786], [1953.0, 164.5178571428571], [1981.0, 142.91111111111113], [1977.0, 106.52054794520546], [1969.0, 92.77486910994764], [1973.0, 91.34999999999998], [1957.0, 92.46825396825402], [1961.0, 115.34351145038164], [1965.0, 105.2222222222222], [1937.0, 163.52631578947373], [1985.0, 75.38829787234037], [1989.0, 61.85488958990535], [1993.0, 108.81785714285715], [1997.0, 97.71813725490189], [515.0, 142.83333333333334], [527.0, 131.16666666666666], [525.0, 125.33333333333333], [523.0, 97.77272727272727], [513.0, 92.63157894736841], [517.0, 127.4], [519.0, 111.87500000000001], [529.0, 39.22222222222222], [543.0, 1.7000000000000002], [541.0, 2.0], [539.0, 2.0], [531.0, 116.33333333333334], [535.0, 2.0], [521.0, 76.08333333333334], [547.0, 189.14285714285714], [559.0, 78.66666666666664], [557.0, 144.52631578947367], [555.0, 78.5], [545.0, 112.21428571428572], [549.0, 115.0], [551.0, 90.83333333333333], [561.0, 92.46666666666667], [573.0, 2.0], [571.0, 2.5], [569.0, 2.5], [563.0, 151.45454545454544], [565.0, 113.3], [567.0, 173.33333333333331], [553.0, 56.46153846153847], [579.0, 95.75], [591.0, 173.25], [589.0, 64.4074074074074], [587.0, 180.33333333333331], [577.0, 81.66666666666669], [581.0, 55.5], [583.0, 158.92307692307693], [607.0, 142.54545454545453], [605.0, 169.57142857142856], [603.0, 190.8], [601.0, 2.9], [593.0, 103.75000000000001], [595.0, 161.88888888888886], [597.0, 105.33333333333334], [599.0, 153.42857142857142], [585.0, 94.0], [611.0, 80.3125], [623.0, 119.9], [621.0, 43.62499999999999], [619.0, 143.0], [609.0, 132.47368421052633], [613.0, 70.71428571428571], [615.0, 126.74509803921566], [639.0, 13.137931034482756], [637.0, 118.44444444444444], [635.0, 124.57894736842105], [633.0, 93.50000000000001], [625.0, 99.80000000000001], [627.0, 52.33333333333333], [629.0, 58.72727272727272], [631.0, 97.64285714285712], [617.0, 106.5], [647.0, 152.5], [641.0, 15.500000000000002], [655.0, 90.49999999999999], [653.0, 154.13333333333333], [645.0, 50.07142857142858], [643.0, 2.6666666666666665], [671.0, 78.84210526315789], [669.0, 123.25], [665.0, 80.75], [667.0, 2.166666666666667], [657.0, 104.0], [659.0, 115.19999999999999], [661.0, 85.14285714285712], [663.0, 95.79999999999998], [649.0, 146.76923076923077], [651.0, 134.83333333333334], [675.0, 154.81818181818178], [687.0, 153.5], [685.0, 123.45454545454547], [683.0, 127.78571428571428], [673.0, 133.35714285714283], [677.0, 155.75], [679.0, 136.6428571428571], [703.0, 158.09090909090912], [701.0, 116.8125], [699.0, 135.27272727272728], [697.0, 129.52941176470588], [689.0, 91.14285714285715], [695.0, 108.84615384615383], [693.0, 1.5714285714285714], [691.0, 1.6666666666666667], [681.0, 151.23076923076923], [711.0, 122.06250000000001], [707.0, 148.8], [715.0, 144.0], [705.0, 124.6], [719.0, 1.6666666666666667], [717.0, 2.0], [709.0, 73.84615384615384], [735.0, 171.85714285714286], [733.0, 81.03225806451613], [731.0, 136.57894736842107], [729.0, 151.05882352941177], [723.0, 84.57894736842108], [725.0, 143.60000000000002], [727.0, 161.27272727272728], [713.0, 80.68749999999999], [743.0, 18.047619047619047], [739.0, 149.41666666666666], [751.0, 10.83333333333333], [749.0, 148.3793103448276], [737.0, 97.5625], [741.0, 90.84615384615385], [767.0, 51.5], [765.0, 114.36363636363637], [763.0, 35.90909090909089], [761.0, 116.82608695652176], [753.0, 105.54166666666669], [755.0, 163.11111111111111], [757.0, 157.77777777777777], [759.0, 166.0], [747.0, 65.38461538461537], [745.0, 1.1818181818181819], [771.0, 172.1111111111111], [783.0, 115.5294117647059], [781.0, 59.46153846153846], [779.0, 132.0], [769.0, 111.54545454545453], [773.0, 170.8333333333333], [775.0, 82.44444444444444], [799.0, 148.69230769230768], [797.0, 81.8421052631579], [795.0, 156.83333333333334], [793.0, 130.33333333333334], [785.0, 91.16666666666666], [787.0, 139.00000000000003], [789.0, 105.17391304347825], [791.0, 95.21052631578947], [777.0, 124.08333333333334], [803.0, 113.92857142857144], [815.0, 69.46875], [813.0, 90.5], [811.0, 125.00000000000001], [801.0, 114.94736842105266], [805.0, 102.68181818181817], [807.0, 89.85714285714286], [831.0, 116.3], [829.0, 49.33333333333334], [827.0, 89.25], [825.0, 117.0], [817.0, 95.72727272727273], [819.0, 125.4], [821.0, 115.875], [823.0, 106.25], [809.0, 178.2], [861.0, 60.9], [833.0, 121.35000000000001], [847.0, 67.74999999999999], [835.0, 122.85714285714283], [839.0, 16.363636363636367], [863.0, 133.99999999999997], [859.0, 104.46428571428568], [857.0, 115.89655172413792], [849.0, 99.21428571428574], [851.0, 71.4090909090909], [853.0, 32.60416666666665], [855.0, 138.57142857142858], [841.0, 75.4], [843.0, 101.49999999999999], [845.0, 149.36363636363635], [867.0, 99.35294117647058], [879.0, 128.6842105263158], [877.0, 87.15789473684211], [875.0, 155.41176470588238], [865.0, 81.5], [869.0, 21.333333333333332], [871.0, 64.64705882352939], [895.0, 140.54999999999998], [893.0, 99.5], [891.0, 81.88000000000001], [889.0, 74.29166666666666], [881.0, 48.69014084507043], [883.0, 160.6], [885.0, 68.1], [887.0, 55.499999999999986], [873.0, 150.2], [899.0, 122.92592592592594], [911.0, 79.0], [909.0, 176.0], [907.0, 77.17647058823529], [897.0, 133.74999999999997], [901.0, 60.120000000000005], [903.0, 123.26086956521742], [913.0, 179.0], [927.0, 79.0], [925.0, 81.25000000000001], [923.0, 129.76923076923077], [921.0, 83.37931034482756], [915.0, 134.5], [917.0, 127.11999999999999], [919.0, 136.78260869565216], [905.0, 178.5], [931.0, 79.0], [943.0, 156.1428571428571], [941.0, 136.93750000000003], [939.0, 139.18750000000003], [929.0, 93.7894736842105], [933.0, 137.0], [935.0, 130.12], [959.0, 118.0], [957.0, 158.13333333333333], [955.0, 145.70370370370375], [953.0, 169.77777777777777], [945.0, 87.42857142857143], [947.0, 40.26923076923078], [949.0, 52.888888888888886], [951.0, 53.485714285714316], [937.0, 147.75000000000003], [965.0, 98.03846153846155], [961.0, 111.60000000000004], [975.0, 80.38888888888891], [973.0, 131.25000000000003], [971.0, 140.99999999999997], [963.0, 103.1428571428571], [985.0, 51.400000000000006], [967.0, 22.22077922077922], [987.0, 119.68750000000004], [989.0, 120.07142857142857], [991.0, 110.65624999999999], [977.0, 68.35416666666666], [979.0, 94.6875], [981.0, 145.0], [983.0, 96.37500000000001], [969.0, 112.4], [995.0, 132.79999999999995], [1007.0, 114.49999999999999], [1005.0, 47.54285714285716], [1003.0, 142.99999999999994], [993.0, 112.53124999999999], [997.0, 105.82352941176471], [999.0, 46.62499999999999], [1023.0, 101.16129032258064], [1021.0, 104.00000000000001], [1019.0, 130.71428571428572], [1017.0, 58.021276595744645], [1009.0, 168.61111111111114], [1011.0, 70.28947368421053], [1013.0, 89.11111111111111], [1015.0, 39.91304347826086], [1001.0, 56.6], [1030.0, 53.999999999999986], [1026.0, 140.68817204301078], [1054.0, 105.36363636363636], [1050.0, 145.13333333333338], [1046.0, 52.07142857142857], [1042.0, 36.5], [1034.0, 35.54545454545455], [1086.0, 119.62499999999997], [1058.0, 24.333333333333336], [1082.0, 116.21739130434781], [1078.0, 122.73333333333332], [1074.0, 112.50000000000001], [1062.0, 123.44444444444449], [1066.0, 93.05454545454548], [1070.0, 117.125], [1094.0, 150.07692307692304], [1090.0, 86.16666666666667], [1118.0, 163.8], [1110.0, 66.39999999999999], [1114.0, 25.333333333333332], [1106.0, 102.53333333333332], [1098.0, 155.12500000000003], [1102.0, 107.17241379310349], [1150.0, 35.08333333333333], [1146.0, 54.374999999999986], [1142.0, 73.32499999999999], [1138.0, 107.26666666666664], [1122.0, 95.19999999999999], [1126.0, 132.64285714285714], [1130.0, 73.81818181818181], [1134.0, 112.0], [1158.0, 124.15384615384616], [1154.0, 108.38888888888889], [1182.0, 95.06060606060608], [1178.0, 50.52380952380952], [1174.0, 111.76923076923077], [1170.0, 120.27272727272722], [1162.0, 78.7], [1166.0, 147.95652173913044], [1214.0, 54.017241379310356], [1210.0, 80.20512820512816], [1206.0, 51.431818181818194], [1202.0, 81.23809523809523], [1186.0, 163.00000000000003], [1198.0, 142.62500000000003], [1194.0, 22.5], [1190.0, 24.647058823529417], [1222.0, 190.54838709677415], [1246.0, 130.45454545454547], [1242.0, 194.99999999999997], [1238.0, 128.04444444444442], [1218.0, 117.43478260869563], [1226.0, 132.3636363636364], [1230.0, 152.29999999999995], [1278.0, 95.80000000000003], [1274.0, 90.96428571428575], [1270.0, 115.50000000000001], [1266.0, 103.80555555555554], [1250.0, 127.7179487179487], [1254.0, 98.31428571428572], [1258.0, 98.16666666666667], [1262.0, 136.84210526315792], [1234.0, 71.7391304347826], [1286.0, 97.32432432432432], [1310.0, 164.22222222222226], [1306.0, 48.43333333333334], [1302.0, 157.38888888888894], [1282.0, 73.86363636363637], [1290.0, 213.66666666666666], [1294.0, 188.05882352941174], [1342.0, 193.47058823529412], [1338.0, 160.2608695652174], [1334.0, 174.0], [1330.0, 123.52173913043478], [1314.0, 178.3333333333334], [1318.0, 99.4390243902439], [1322.0, 195.5], [1326.0, 147.27586206896555], [1298.0, 159.86666666666667], [1350.0, 68.58620689655173], [1374.0, 69.50000000000001], [1370.0, 164.95833333333334], [1366.0, 47.11666666666666], [1346.0, 163.83333333333334], [1354.0, 112.24324324324324], [1358.0, 123.02941176470586], [1406.0, 102.7674418604651], [1402.0, 102.30769230769234], [1398.0, 120.16666666666667], [1394.0, 50.03125], [1378.0, 80.66666666666667], [1382.0, 62.527777777777786], [1386.0, 136.58620689655174], [1390.0, 151.45454545454544], [1362.0, 68.71929824561407], [1414.0, 108.53571428571429], [1438.0, 47.083333333333336], [1434.0, 131.72727272727272], [1430.0, 130.77083333333323], [1410.0, 149.69565217391303], [1418.0, 155.53571428571428], [1422.0, 150.54545454545453], [1470.0, 94.11764705882354], [1462.0, 110.20930232558136], [1458.0, 58.749999999999986], [1442.0, 144.76923076923077], [1446.0, 44.00000000000001], [1450.0, 101.71428571428572], [1454.0, 123.81818181818181], [1426.0, 159.72222222222226], [1478.0, 150.13636363636365], [1502.0, 104.28571428571432], [1498.0, 173.86206896551724], [1494.0, 54.94666666666669], [1474.0, 145.23076923076923], [1482.0, 106.48780487804878], [1486.0, 44.125], [1534.0, 113.81818181818183], [1530.0, 165.33333333333337], [1526.0, 84.26315789473682], [1522.0, 192.75], [1506.0, 136.4166666666667], [1510.0, 140.27586206896555], [1514.0, 49.9027777777778], [1518.0, 37.0], [1490.0, 76.11764705882355], [1542.0, 125.16129032258064], [1566.0, 118.7857142857143], [1562.0, 88.3793103448276], [1558.0, 143.15384615384616], [1538.0, 99.13333333333333], [1546.0, 103.26415094339622], [1550.0, 99.78723404255318], [1598.0, 198.0], [1594.0, 170.07999999999996], [1590.0, 139.16666666666666], [1586.0, 148.72222222222223], [1570.0, 85.79310344827587], [1574.0, 118.88], [1578.0, 71.73913043478261], [1582.0, 206.83333333333334], [1554.0, 162.19230769230768], [1606.0, 55.125], [1630.0, 69.88524590163932], [1626.0, 57.367346938775526], [1622.0, 132.63414634146343], [1602.0, 119.34042553191493], [1610.0, 155.6896551724138], [1614.0, 137.0625], [1662.0, 34.5], [1658.0, 120.84444444444439], [1654.0, 145.84615384615384], [1650.0, 111.60000000000001], [1634.0, 180.0909090909091], [1638.0, 168.82608695652178], [1642.0, 123.83720930232565], [1646.0, 95.64285714285715], [1618.0, 77.12903225806451], [1678.0, 49.84962406015035], [1670.0, 120.92], [1694.0, 61.74074074074074], [1666.0, 31.411764705882355], [1690.0, 61.692307692307644], [1674.0, 72.40983606557376], [1726.0, 168.70000000000002], [1722.0, 48.34482758620688], [1718.0, 87.85294117647058], [1714.0, 112.3928571428571], [1698.0, 187.7142857142857], [1702.0, 90.9298245614035], [1706.0, 116.7837837837838], [1710.0, 153.95918367346934], [1682.0, 52.98039215686274], [1686.0, 219.65517241379308], [1734.0, 67.46341463414636], [1758.0, 188.40625000000003], [1754.0, 145.92307692307696], [1750.0, 76.49999999999999], [1730.0, 105.91379310344824], [1738.0, 70.85365853658536], [1742.0, 98.97297297297294], [1790.0, 164.11538461538458], [1786.0, 185.85714285714283], [1782.0, 76.39772727272728], [1778.0, 109.11111111111111], [1762.0, 149.47058823529414], [1766.0, 98.61538461538463], [1770.0, 106.16000000000001], [1774.0, 210.05128205128204], [1746.0, 56.060869565217395], [1806.0, 49.70348837209302], [1798.0, 157.3636363636364], [1822.0, 145.4468085106383], [1818.0, 51.68442622950818], [1794.0, 208.69696969696963], [1802.0, 210.36], [1854.0, 98.31034482758622], [1850.0, 96.40000000000005], [1846.0, 146.89130434782604], [1842.0, 98.57352941176472], [1826.0, 112.23076923076923], [1830.0, 72.42424242424244], [1834.0, 63.07339449541283], [1838.0, 142.1176470588235], [1810.0, 98.60714285714286], [1814.0, 32.126582278481], [1862.0, 100.11627906976742], [1886.0, 47.269841269841265], [1882.0, 179.23809523809524], [1878.0, 111.60975609756098], [1858.0, 169.22500000000005], [1866.0, 55.16666666666667], [1870.0, 96.99999999999999], [1918.0, 77.60975609756099], [1914.0, 64.41975308641976], [1910.0, 79.62686567164177], [1906.0, 35.857142857142854], [1890.0, 56.984848484848484], [1894.0, 46.77611940298507], [1898.0, 72.0], [1902.0, 44.96825396825396], [1874.0, 118.00000000000001], [1926.0, 62.91735537190085], [1950.0, 136.92073170731703], [1946.0, 133.02173913043475], [1942.0, 142.24087591240885], [1922.0, 78.0392156862745], [1930.0, 60.75714285714289], [1934.0, 132.41999999999993], [1982.0, 156.3419354838711], [1978.0, 109.26807228915663], [1974.0, 96.55483870967743], [1970.0, 77.24074074074073], [1954.0, 154.87318840579715], [1958.0, 115.5852272727273], [1962.0, 108.55882352941174], [1966.0, 96.63318777292575], [1938.0, 146.8131868131868], [1990.0, 65.84722222222223], [1986.0, 64.47486033519554], [1994.0, 95.2977528089888], [1998.0, 75.28048780487806], [1031.0, 127.04761904761907], [1035.0, 53.53571428571429], [1039.0, 23.0], [1027.0, 85.375], [1055.0, 137.8], [1051.0, 134.2], [1047.0, 117.6896551724138], [1043.0, 74.69444444444443], [1087.0, 70.68749999999999], [1083.0, 71.63157894736841], [1079.0, 76.7115384615385], [1075.0, 157.65], [1059.0, 53.85714285714286], [1063.0, 88.36111111111107], [1067.0, 106.75], [1071.0, 51.62068965517242], [1095.0, 118.5], [1099.0, 79.82857142857142], [1091.0, 126.32142857142857], [1119.0, 119.47368421052633], [1115.0, 138.125], [1111.0, 105.72222222222223], [1107.0, 50.33333333333333], [1103.0, 137.77272727272725], [1151.0, 108.2894736842105], [1147.0, 69.68292682926828], [1143.0, 157.3684210526316], [1139.0, 165.4], [1123.0, 105.25], [1127.0, 100.125], [1131.0, 95.99999999999999], [1135.0, 71.4242424242424], [1159.0, 83.42105263157895], [1155.0, 160.2857142857143], [1183.0, 182.44444444444446], [1179.0, 96.32], [1175.0, 96.34482758620693], [1171.0, 166.66666666666666], [1163.0, 99.54166666666666], [1167.0, 144.76923076923075], [1211.0, 113.21428571428572], [1215.0, 38.214285714285715], [1207.0, 107.60000000000001], [1203.0, 25.08695652173913], [1187.0, 139.78947368421055], [1199.0, 48.017543859649116], [1195.0, 22.32075471698113], [1191.0, 23.27777777777778], [1223.0, 58.578947368421055], [1247.0, 69.125], [1243.0, 62.67307692307696], [1239.0, 103.88235294117645], [1219.0, 115.86666666666665], [1227.0, 149.57894736842107], [1231.0, 156.4375], [1279.0, 82.54545454545455], [1275.0, 37.225806451612904], [1271.0, 95.55555555555554], [1267.0, 102.68571428571428], [1251.0, 132.64000000000001], [1255.0, 167.58333333333331], [1259.0, 120.05555555555554], [1263.0, 80.39999999999999], [1235.0, 143.95833333333334], [1287.0, 64.12], [1311.0, 187.26315789473685], [1307.0, 133.7272727272727], [1303.0, 149.86666666666662], [1283.0, 159.85185185185185], [1291.0, 74.24324324324324], [1295.0, 123.29411764705885], [1343.0, 94.04545454545455], [1339.0, 99.87804878048784], [1335.0, 76.1851851851852], [1331.0, 96.6521739130435], [1315.0, 114.52380952380949], [1319.0, 107.31249999999997], [1323.0, 99.59999999999998], [1327.0, 163.75], [1299.0, 152.76315789473685], [1351.0, 164.88000000000005], [1375.0, 188.84375], [1371.0, 139.84615384615387], [1367.0, 83.5833333333333], [1347.0, 100.60000000000001], [1355.0, 169.7], [1359.0, 94.41666666666664], [1407.0, 141.91428571428574], [1403.0, 124.13157894736842], [1399.0, 151.89473684210526], [1395.0, 187.1875], [1379.0, 185.0], [1383.0, 145.76000000000002], [1387.0, 110.16666666666666], [1391.0, 96.40540540540539], [1363.0, 103.2666666666667], [1415.0, 144.2941176470588], [1411.0, 62.571428571428584], [1439.0, 156.0], [1435.0, 76.86363636363637], [1431.0, 132.61290322580646], [1419.0, 66.30232558139537], [1423.0, 70.95121951219514], [1459.0, 131.68421052631578], [1463.0, 206.55555555555554], [1467.0, 175.72413793103442], [1471.0, 70.51785714285714], [1443.0, 125.97142857142859], [1447.0, 55.57812500000001], [1451.0, 101.18750000000003], [1455.0, 46.73015873015874], [1427.0, 74.0625], [1479.0, 140.1578947368421], [1503.0, 155.71428571428572], [1499.0, 69.3030303030303], [1495.0, 40.717948717948715], [1475.0, 146.42857142857142], [1483.0, 92.0], [1487.0, 142.6857142857143], [1535.0, 119.16666666666669], [1531.0, 204.05263157894734], [1527.0, 147.35], [1523.0, 44.1214953271028], [1507.0, 80.59090909090912], [1511.0, 165.52173913043478], [1515.0, 63.22891566265063], [1519.0, 37.31578947368421], [1491.0, 110.49999999999999], [1543.0, 104.88461538461537], [1567.0, 172.90909090909085], [1563.0, 85.1875], [1559.0, 93.56666666666666], [1539.0, 163.6428571428571], [1547.0, 130.79310344827587], [1551.0, 83.4857142857143], [1599.0, 73.27710843373495], [1595.0, 160.69230769230765], [1591.0, 85.64062499999999], [1587.0, 62.88235294117647], [1571.0, 105.10714285714286], [1575.0, 150.10000000000002], [1579.0, 127.28571428571429], [1583.0, 63.51764705882355], [1555.0, 67.90322580645163], [1607.0, 162.69047619047618], [1631.0, 160.58823529411765], [1627.0, 139.75], [1623.0, 161.64516129032262], [1603.0, 142.09677419354836], [1611.0, 103.29411764705881], [1615.0, 62.6262626262626], [1659.0, 68.31818181818181], [1663.0, 32.199999999999996], [1655.0, 68.53488372093025], [1651.0, 78.15714285714286], [1635.0, 147.71428571428572], [1639.0, 156.0], [1643.0, 121.47619047619048], [1647.0, 155.90476190476193], [1619.0, 125.86842105263159], [1671.0, 104.6216216216216], [1667.0, 141.16666666666669], [1695.0, 92.15254237288134], [1691.0, 88.35000000000001], [1687.0, 181.7666666666667], [1675.0, 165.55555555555554], [1679.0, 37.11904761904763], [1715.0, 90.75000000000001], [1719.0, 109.5217391304348], [1723.0, 37.652173913043484], [1727.0, 64.87096774193547], [1699.0, 79.046511627907], [1703.0, 115.00000000000003], [1707.0, 74.26666666666668], [1711.0, 75.93333333333331], [1683.0, 82.71153846153845], [1735.0, 39.44000000000001], [1759.0, 122.55000000000003], [1755.0, 146.07142857142858], [1751.0, 106.62500000000001], [1731.0, 129.19565217391306], [1739.0, 85.77272727272728], [1743.0, 109.54545454545455], [1791.0, 129.0], [1787.0, 125.38888888888889], [1783.0, 191.82142857142858], [1779.0, 59.32558139534884], [1763.0, 102.84210526315789], [1767.0, 146.4736842105263], [1771.0, 151.6521739130435], [1775.0, 83.91428571428571], [1747.0, 111.2666666666667], [1807.0, 210.43902439024393], [1799.0, 195.74999999999997], [1823.0, 111.74137931034481], [1819.0, 121.5333333333333], [1815.0, 32.0], [1811.0, 32.444444444444436], [1795.0, 110.11864406779661], [1803.0, 164.09999999999997], [1855.0, 168.4821428571428], [1851.0, 111.37499999999997], [1847.0, 134.86363636363637], [1843.0, 109.9113924050633], [1827.0, 118.75675675675676], [1831.0, 117.26229508196717], [1835.0, 116.12244897959182], [1839.0, 221.8181818181818], [1863.0, 74.45255474452551], [1883.0, 86.97500000000004], [1879.0, 68.77922077922076], [1859.0, 94.40789473684211], [1887.0, 37.349999999999994], [1867.0, 87.1392405063291], [1871.0, 54.635416666666686], [1919.0, 59.405797101449274], [1915.0, 63.56756756756758], [1911.0, 37.70833333333331], [1907.0, 97.62962962962963], [1891.0, 143.09375], [1895.0, 50.856353591160236], [1899.0, 107.14285714285712], [1903.0, 80.0326086956522], [1875.0, 97.27659574468086], [1927.0, 149.61363636363632], [1951.0, 124.86718750000006], [1947.0, 153.29870129870127], [1943.0, 152.57765667574913], [1923.0, 163.1621621621621], [1931.0, 43.5], [1935.0, 132.9019607843137], [1983.0, 60.786307053941954], [1979.0, 124.46376811594209], [1975.0, 99.66949152542371], [1971.0, 73.36666666666666], [1955.0, 196.70588235294122], [1959.0, 127.13793103448276], [1963.0, 130.58461538461535], [1967.0, 89.98726114649679], [1939.0, 157.36666666666665], [1987.0, 77.4497041420118], [1991.0, 63.69230769230768], [1995.0, 94.36458333333334], [1999.0, 62.760633036597504], [1.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1922.5819624999915, 84.77702249999986]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 100157.93333333333, "minX": 1.58524494E12, "maxY": 1076562.3833333333, "series": [{"data": [[1.58524494E12, 151703.13333333333], [1.585245E12, 1076562.3833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58524494E12, 100157.93333333333], [1.585245E12, 713175.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585245E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 75.21702561997061, "minX": 1.58524494E12, "maxY": 152.84906005115946, "series": [{"data": [[1.58524494E12, 152.84906005115946], [1.585245E12, 75.21702561997061]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585245E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 75.21502414880497, "minX": 1.58524494E12, "maxY": 152.84317268261026, "series": [{"data": [[1.58524494E12, 152.84317268261026], [1.585245E12, 75.21502414880497]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585245E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.11069104926128259, "minX": 1.58524494E12, "maxY": 0.6732104429737339, "series": [{"data": [[1.58524494E12, 0.6732104429737339], [1.585245E12, 0.11069104926128259]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585245E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58524494E12, "maxY": 1178.0, "series": [{"data": [[1.58524494E12, 1178.0], [1.585245E12, 1097.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58524494E12, 9.0], [1.585245E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58524494E12, 158.0], [1.585245E12, 36.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58524494E12, 180.0], [1.585245E12, 47.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58524494E12, 164.0], [1.585245E12, 39.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585245E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 384.0, "maxY": 275.5, "series": [{"data": [[8222.0, 190.0], [33484.0, 64.0], [14405.0, 135.0], [3727.0, 166.0], [16150.0, 125.0], [16661.0, 23.0], [17512.0, 115.0], [17443.0, 113.0], [19331.0, 105.0], [20679.0, 94.0], [24199.0, 77.0], [384.0, 275.5], [6370.0, 176.0], [26122.0, 73.0], [25652.0, 78.0], [26931.0, 71.0], [28750.0, 65.0], [30073.0, 64.0], [31919.0, 60.0], [31986.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33484.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 384.0, "maxY": 275.0, "series": [{"data": [[8222.0, 190.0], [33484.0, 64.0], [14405.0, 135.0], [3727.0, 166.0], [16150.0, 125.0], [16661.0, 23.0], [17512.0, 115.0], [17443.0, 113.0], [19331.0, 105.0], [20679.0, 94.0], [24199.0, 77.0], [384.0, 275.0], [6370.0, 176.0], [26122.0, 73.0], [25652.0, 78.0], [26931.0, 71.0], [28750.0, 65.0], [30073.0, 64.0], [31919.0, 60.0], [31986.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33484.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 854.3, "minX": 1.58524494E12, "maxY": 5812.366666666667, "series": [{"data": [[1.58524494E12, 854.3], [1.585245E12, 5812.366666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585245E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 820.9666666666667, "minX": 1.58524494E12, "maxY": 5845.7, "series": [{"data": [[1.58524494E12, 820.9666666666667], [1.585245E12, 5845.7]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585245E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 820.9666666666667, "minX": 1.58524494E12, "maxY": 5845.7, "series": [{"data": [[1.58524494E12, 820.9666666666667], [1.585245E12, 5845.7]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585245E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 820.9666666666667, "minX": 1.58524494E12, "maxY": 5845.7, "series": [{"data": [[1.58524494E12, 820.9666666666667], [1.585245E12, 5845.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585245E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

