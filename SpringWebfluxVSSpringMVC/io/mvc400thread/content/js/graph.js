/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1110.0, "series": [{"data": [[0.0, 1.0], [0.1, 4.0], [0.2, 6.0], [0.3, 8.0], [0.4, 9.0], [0.5, 11.0], [0.6, 12.0], [0.7, 13.0], [0.8, 15.0], [0.9, 16.0], [1.0, 18.0], [1.1, 20.0], [1.2, 22.0], [1.3, 24.0], [1.4, 27.0], [1.5, 29.0], [1.6, 32.0], [1.7, 34.0], [1.8, 36.0], [1.9, 37.0], [2.0, 38.0], [2.1, 39.0], [2.2, 40.0], [2.3, 41.0], [2.4, 42.0], [2.5, 42.0], [2.6, 43.0], [2.7, 44.0], [2.8, 44.0], [2.9, 45.0], [3.0, 45.0], [3.1, 46.0], [3.2, 46.0], [3.3, 47.0], [3.4, 47.0], [3.5, 48.0], [3.6, 48.0], [3.7, 49.0], [3.8, 49.0], [3.9, 49.0], [4.0, 49.0], [4.1, 50.0], [4.2, 50.0], [4.3, 50.0], [4.4, 51.0], [4.5, 51.0], [4.6, 51.0], [4.7, 51.0], [4.8, 51.0], [4.9, 52.0], [5.0, 52.0], [5.1, 52.0], [5.2, 52.0], [5.3, 53.0], [5.4, 53.0], [5.5, 53.0], [5.6, 53.0], [5.7, 53.0], [5.8, 54.0], [5.9, 54.0], [6.0, 54.0], [6.1, 54.0], [6.2, 54.0], [6.3, 55.0], [6.4, 55.0], [6.5, 55.0], [6.6, 55.0], [6.7, 55.0], [6.8, 55.0], [6.9, 56.0], [7.0, 56.0], [7.1, 56.0], [7.2, 56.0], [7.3, 56.0], [7.4, 56.0], [7.5, 56.0], [7.6, 57.0], [7.7, 57.0], [7.8, 57.0], [7.9, 57.0], [8.0, 57.0], [8.1, 57.0], [8.2, 57.0], [8.3, 57.0], [8.4, 58.0], [8.5, 58.0], [8.6, 58.0], [8.7, 58.0], [8.8, 58.0], [8.9, 58.0], [9.0, 58.0], [9.1, 58.0], [9.2, 59.0], [9.3, 59.0], [9.4, 59.0], [9.5, 59.0], [9.6, 59.0], [9.7, 59.0], [9.8, 59.0], [9.9, 59.0], [10.0, 59.0], [10.1, 59.0], [10.2, 60.0], [10.3, 60.0], [10.4, 60.0], [10.5, 60.0], [10.6, 60.0], [10.7, 60.0], [10.8, 60.0], [10.9, 60.0], [11.0, 60.0], [11.1, 60.0], [11.2, 61.0], [11.3, 61.0], [11.4, 61.0], [11.5, 61.0], [11.6, 61.0], [11.7, 61.0], [11.8, 61.0], [11.9, 61.0], [12.0, 61.0], [12.1, 61.0], [12.2, 61.0], [12.3, 62.0], [12.4, 62.0], [12.5, 62.0], [12.6, 62.0], [12.7, 62.0], [12.8, 62.0], [12.9, 62.0], [13.0, 62.0], [13.1, 62.0], [13.2, 62.0], [13.3, 62.0], [13.4, 63.0], [13.5, 63.0], [13.6, 63.0], [13.7, 63.0], [13.8, 63.0], [13.9, 63.0], [14.0, 63.0], [14.1, 63.0], [14.2, 63.0], [14.3, 63.0], [14.4, 63.0], [14.5, 63.0], [14.6, 64.0], [14.7, 64.0], [14.8, 64.0], [14.9, 64.0], [15.0, 64.0], [15.1, 64.0], [15.2, 64.0], [15.3, 64.0], [15.4, 64.0], [15.5, 64.0], [15.6, 64.0], [15.7, 64.0], [15.8, 65.0], [15.9, 65.0], [16.0, 65.0], [16.1, 65.0], [16.2, 65.0], [16.3, 65.0], [16.4, 65.0], [16.5, 65.0], [16.6, 65.0], [16.7, 65.0], [16.8, 65.0], [16.9, 65.0], [17.0, 65.0], [17.1, 66.0], [17.2, 66.0], [17.3, 66.0], [17.4, 66.0], [17.5, 66.0], [17.6, 66.0], [17.7, 66.0], [17.8, 66.0], [17.9, 66.0], [18.0, 66.0], [18.1, 66.0], [18.2, 66.0], [18.3, 66.0], [18.4, 67.0], [18.5, 67.0], [18.6, 67.0], [18.7, 67.0], [18.8, 67.0], [18.9, 67.0], [19.0, 67.0], [19.1, 67.0], [19.2, 67.0], [19.3, 67.0], [19.4, 67.0], [19.5, 67.0], [19.6, 67.0], [19.7, 67.0], [19.8, 67.0], [19.9, 68.0], [20.0, 68.0], [20.1, 68.0], [20.2, 68.0], [20.3, 68.0], [20.4, 68.0], [20.5, 68.0], [20.6, 68.0], [20.7, 68.0], [20.8, 68.0], [20.9, 68.0], [21.0, 68.0], [21.1, 68.0], [21.2, 68.0], [21.3, 69.0], [21.4, 69.0], [21.5, 69.0], [21.6, 69.0], [21.7, 69.0], [21.8, 69.0], [21.9, 69.0], [22.0, 69.0], [22.1, 69.0], [22.2, 69.0], [22.3, 69.0], [22.4, 69.0], [22.5, 69.0], [22.6, 69.0], [22.7, 69.0], [22.8, 70.0], [22.9, 70.0], [23.0, 70.0], [23.1, 70.0], [23.2, 70.0], [23.3, 70.0], [23.4, 70.0], [23.5, 70.0], [23.6, 70.0], [23.7, 70.0], [23.8, 70.0], [23.9, 70.0], [24.0, 70.0], [24.1, 70.0], [24.2, 70.0], [24.3, 70.0], [24.4, 71.0], [24.5, 71.0], [24.6, 71.0], [24.7, 71.0], [24.8, 71.0], [24.9, 71.0], [25.0, 71.0], [25.1, 71.0], [25.2, 71.0], [25.3, 71.0], [25.4, 71.0], [25.5, 71.0], [25.6, 71.0], [25.7, 71.0], [25.8, 71.0], [25.9, 72.0], [26.0, 72.0], [26.1, 72.0], [26.2, 72.0], [26.3, 72.0], [26.4, 72.0], [26.5, 72.0], [26.6, 72.0], [26.7, 72.0], [26.8, 72.0], [26.9, 72.0], [27.0, 72.0], [27.1, 72.0], [27.2, 72.0], [27.3, 72.0], [27.4, 73.0], [27.5, 73.0], [27.6, 73.0], [27.7, 73.0], [27.8, 73.0], [27.9, 73.0], [28.0, 73.0], [28.1, 73.0], [28.2, 73.0], [28.3, 73.0], [28.4, 73.0], [28.5, 73.0], [28.6, 73.0], [28.7, 73.0], [28.8, 74.0], [28.9, 74.0], [29.0, 74.0], [29.1, 74.0], [29.2, 74.0], [29.3, 74.0], [29.4, 74.0], [29.5, 74.0], [29.6, 74.0], [29.7, 74.0], [29.8, 74.0], [29.9, 74.0], [30.0, 74.0], [30.1, 74.0], [30.2, 74.0], [30.3, 74.0], [30.4, 75.0], [30.5, 75.0], [30.6, 75.0], [30.7, 75.0], [30.8, 75.0], [30.9, 75.0], [31.0, 75.0], [31.1, 75.0], [31.2, 75.0], [31.3, 75.0], [31.4, 75.0], [31.5, 75.0], [31.6, 75.0], [31.7, 75.0], [31.8, 76.0], [31.9, 76.0], [32.0, 76.0], [32.1, 76.0], [32.2, 76.0], [32.3, 76.0], [32.4, 76.0], [32.5, 76.0], [32.6, 76.0], [32.7, 76.0], [32.8, 76.0], [32.9, 76.0], [33.0, 76.0], [33.1, 76.0], [33.2, 76.0], [33.3, 77.0], [33.4, 77.0], [33.5, 77.0], [33.6, 77.0], [33.7, 77.0], [33.8, 77.0], [33.9, 77.0], [34.0, 77.0], [34.1, 77.0], [34.2, 77.0], [34.3, 77.0], [34.4, 77.0], [34.5, 77.0], [34.6, 77.0], [34.7, 77.0], [34.8, 78.0], [34.9, 78.0], [35.0, 78.0], [35.1, 78.0], [35.2, 78.0], [35.3, 78.0], [35.4, 78.0], [35.5, 78.0], [35.6, 78.0], [35.7, 78.0], [35.8, 78.0], [35.9, 78.0], [36.0, 78.0], [36.1, 78.0], [36.2, 78.0], [36.3, 79.0], [36.4, 79.0], [36.5, 79.0], [36.6, 79.0], [36.7, 79.0], [36.8, 79.0], [36.9, 79.0], [37.0, 79.0], [37.1, 79.0], [37.2, 79.0], [37.3, 79.0], [37.4, 79.0], [37.5, 79.0], [37.6, 79.0], [37.7, 79.0], [37.8, 79.0], [37.9, 80.0], [38.0, 80.0], [38.1, 80.0], [38.2, 80.0], [38.3, 80.0], [38.4, 80.0], [38.5, 80.0], [38.6, 80.0], [38.7, 80.0], [38.8, 80.0], [38.9, 80.0], [39.0, 80.0], [39.1, 80.0], [39.2, 80.0], [39.3, 80.0], [39.4, 80.0], [39.5, 81.0], [39.6, 81.0], [39.7, 81.0], [39.8, 81.0], [39.9, 81.0], [40.0, 81.0], [40.1, 81.0], [40.2, 81.0], [40.3, 81.0], [40.4, 81.0], [40.5, 81.0], [40.6, 81.0], [40.7, 81.0], [40.8, 81.0], [40.9, 81.0], [41.0, 81.0], [41.1, 82.0], [41.2, 82.0], [41.3, 82.0], [41.4, 82.0], [41.5, 82.0], [41.6, 82.0], [41.7, 82.0], [41.8, 82.0], [41.9, 82.0], [42.0, 82.0], [42.1, 82.0], [42.2, 82.0], [42.3, 82.0], [42.4, 82.0], [42.5, 82.0], [42.6, 82.0], [42.7, 83.0], [42.8, 83.0], [42.9, 83.0], [43.0, 83.0], [43.1, 83.0], [43.2, 83.0], [43.3, 83.0], [43.4, 83.0], [43.5, 83.0], [43.6, 83.0], [43.7, 83.0], [43.8, 83.0], [43.9, 83.0], [44.0, 83.0], [44.1, 83.0], [44.2, 83.0], [44.3, 84.0], [44.4, 84.0], [44.5, 84.0], [44.6, 84.0], [44.7, 84.0], [44.8, 84.0], [44.9, 84.0], [45.0, 84.0], [45.1, 84.0], [45.2, 84.0], [45.3, 84.0], [45.4, 84.0], [45.5, 84.0], [45.6, 84.0], [45.7, 84.0], [45.8, 84.0], [45.9, 85.0], [46.0, 85.0], [46.1, 85.0], [46.2, 85.0], [46.3, 85.0], [46.4, 85.0], [46.5, 85.0], [46.6, 85.0], [46.7, 85.0], [46.8, 85.0], [46.9, 85.0], [47.0, 85.0], [47.1, 85.0], [47.2, 85.0], [47.3, 85.0], [47.4, 85.0], [47.5, 86.0], [47.6, 86.0], [47.7, 86.0], [47.8, 86.0], [47.9, 86.0], [48.0, 86.0], [48.1, 86.0], [48.2, 86.0], [48.3, 86.0], [48.4, 86.0], [48.5, 86.0], [48.6, 86.0], [48.7, 86.0], [48.8, 86.0], [48.9, 86.0], [49.0, 87.0], [49.1, 87.0], [49.2, 87.0], [49.3, 87.0], [49.4, 87.0], [49.5, 87.0], [49.6, 87.0], [49.7, 87.0], [49.8, 87.0], [49.9, 87.0], [50.0, 87.0], [50.1, 87.0], [50.2, 87.0], [50.3, 87.0], [50.4, 87.0], [50.5, 88.0], [50.6, 88.0], [50.7, 88.0], [50.8, 88.0], [50.9, 88.0], [51.0, 88.0], [51.1, 88.0], [51.2, 88.0], [51.3, 88.0], [51.4, 88.0], [51.5, 88.0], [51.6, 88.0], [51.7, 88.0], [51.8, 88.0], [51.9, 88.0], [52.0, 89.0], [52.1, 89.0], [52.2, 89.0], [52.3, 89.0], [52.4, 89.0], [52.5, 89.0], [52.6, 89.0], [52.7, 89.0], [52.8, 89.0], [52.9, 89.0], [53.0, 89.0], [53.1, 89.0], [53.2, 89.0], [53.3, 89.0], [53.4, 89.0], [53.5, 90.0], [53.6, 90.0], [53.7, 90.0], [53.8, 90.0], [53.9, 90.0], [54.0, 90.0], [54.1, 90.0], [54.2, 90.0], [54.3, 90.0], [54.4, 90.0], [54.5, 90.0], [54.6, 90.0], [54.7, 90.0], [54.8, 90.0], [54.9, 91.0], [55.0, 91.0], [55.1, 91.0], [55.2, 91.0], [55.3, 91.0], [55.4, 91.0], [55.5, 91.0], [55.6, 91.0], [55.7, 91.0], [55.8, 91.0], [55.9, 91.0], [56.0, 91.0], [56.1, 91.0], [56.2, 91.0], [56.3, 92.0], [56.4, 92.0], [56.5, 92.0], [56.6, 92.0], [56.7, 92.0], [56.8, 92.0], [56.9, 92.0], [57.0, 92.0], [57.1, 92.0], [57.2, 92.0], [57.3, 92.0], [57.4, 92.0], [57.5, 92.0], [57.6, 92.0], [57.7, 93.0], [57.8, 93.0], [57.9, 93.0], [58.0, 93.0], [58.1, 93.0], [58.2, 93.0], [58.3, 93.0], [58.4, 93.0], [58.5, 93.0], [58.6, 93.0], [58.7, 93.0], [58.8, 93.0], [58.9, 93.0], [59.0, 94.0], [59.1, 94.0], [59.2, 94.0], [59.3, 94.0], [59.4, 94.0], [59.5, 94.0], [59.6, 94.0], [59.7, 94.0], [59.8, 94.0], [59.9, 94.0], [60.0, 94.0], [60.1, 94.0], [60.2, 95.0], [60.3, 95.0], [60.4, 95.0], [60.5, 95.0], [60.6, 95.0], [60.7, 95.0], [60.8, 95.0], [60.9, 95.0], [61.0, 95.0], [61.1, 95.0], [61.2, 95.0], [61.3, 95.0], [61.4, 96.0], [61.5, 96.0], [61.6, 96.0], [61.7, 96.0], [61.8, 96.0], [61.9, 96.0], [62.0, 96.0], [62.1, 96.0], [62.2, 96.0], [62.3, 96.0], [62.4, 96.0], [62.5, 97.0], [62.6, 97.0], [62.7, 97.0], [62.8, 97.0], [62.9, 97.0], [63.0, 97.0], [63.1, 97.0], [63.2, 97.0], [63.3, 97.0], [63.4, 97.0], [63.5, 98.0], [63.6, 98.0], [63.7, 98.0], [63.8, 98.0], [63.9, 98.0], [64.0, 98.0], [64.1, 98.0], [64.2, 98.0], [64.3, 98.0], [64.4, 98.0], [64.5, 98.0], [64.6, 99.0], [64.7, 99.0], [64.8, 99.0], [64.9, 99.0], [65.0, 99.0], [65.1, 99.0], [65.2, 99.0], [65.3, 99.0], [65.4, 99.0], [65.5, 99.0], [65.6, 100.0], [65.7, 100.0], [65.8, 100.0], [65.9, 100.0], [66.0, 100.0], [66.1, 100.0], [66.2, 100.0], [66.3, 100.0], [66.4, 100.0], [66.5, 100.0], [66.6, 101.0], [66.7, 101.0], [66.8, 101.0], [66.9, 101.0], [67.0, 101.0], [67.1, 101.0], [67.2, 101.0], [67.3, 101.0], [67.4, 101.0], [67.5, 102.0], [67.6, 102.0], [67.7, 102.0], [67.8, 102.0], [67.9, 102.0], [68.0, 102.0], [68.1, 102.0], [68.2, 102.0], [68.3, 102.0], [68.4, 103.0], [68.5, 103.0], [68.6, 103.0], [68.7, 103.0], [68.8, 103.0], [68.9, 103.0], [69.0, 103.0], [69.1, 103.0], [69.2, 104.0], [69.3, 104.0], [69.4, 104.0], [69.5, 104.0], [69.6, 104.0], [69.7, 104.0], [69.8, 104.0], [69.9, 104.0], [70.0, 104.0], [70.1, 105.0], [70.2, 105.0], [70.3, 105.0], [70.4, 105.0], [70.5, 105.0], [70.6, 105.0], [70.7, 105.0], [70.8, 105.0], [70.9, 106.0], [71.0, 106.0], [71.1, 106.0], [71.2, 106.0], [71.3, 106.0], [71.4, 106.0], [71.5, 106.0], [71.6, 106.0], [71.7, 106.0], [71.8, 107.0], [71.9, 107.0], [72.0, 107.0], [72.1, 107.0], [72.2, 107.0], [72.3, 107.0], [72.4, 107.0], [72.5, 107.0], [72.6, 108.0], [72.7, 108.0], [72.8, 108.0], [72.9, 108.0], [73.0, 108.0], [73.1, 108.0], [73.2, 108.0], [73.3, 109.0], [73.4, 109.0], [73.5, 109.0], [73.6, 109.0], [73.7, 109.0], [73.8, 109.0], [73.9, 109.0], [74.0, 109.0], [74.1, 110.0], [74.2, 110.0], [74.3, 110.0], [74.4, 110.0], [74.5, 110.0], [74.6, 110.0], [74.7, 110.0], [74.8, 111.0], [74.9, 111.0], [75.0, 111.0], [75.1, 111.0], [75.2, 111.0], [75.3, 111.0], [75.4, 111.0], [75.5, 112.0], [75.6, 112.0], [75.7, 112.0], [75.8, 112.0], [75.9, 112.0], [76.0, 112.0], [76.1, 112.0], [76.2, 113.0], [76.3, 113.0], [76.4, 113.0], [76.5, 113.0], [76.6, 113.0], [76.7, 113.0], [76.8, 113.0], [76.9, 114.0], [77.0, 114.0], [77.1, 114.0], [77.2, 114.0], [77.3, 114.0], [77.4, 114.0], [77.5, 114.0], [77.6, 114.0], [77.7, 115.0], [77.8, 115.0], [77.9, 115.0], [78.0, 115.0], [78.1, 115.0], [78.2, 115.0], [78.3, 115.0], [78.4, 116.0], [78.5, 116.0], [78.6, 116.0], [78.7, 116.0], [78.8, 116.0], [78.9, 116.0], [79.0, 117.0], [79.1, 117.0], [79.2, 117.0], [79.3, 117.0], [79.4, 117.0], [79.5, 117.0], [79.6, 117.0], [79.7, 118.0], [79.8, 118.0], [79.9, 118.0], [80.0, 118.0], [80.1, 118.0], [80.2, 118.0], [80.3, 118.0], [80.4, 119.0], [80.5, 119.0], [80.6, 119.0], [80.7, 119.0], [80.8, 119.0], [80.9, 119.0], [81.0, 120.0], [81.1, 120.0], [81.2, 120.0], [81.3, 120.0], [81.4, 120.0], [81.5, 120.0], [81.6, 121.0], [81.7, 121.0], [81.8, 121.0], [81.9, 121.0], [82.0, 121.0], [82.1, 122.0], [82.2, 122.0], [82.3, 122.0], [82.4, 122.0], [82.5, 122.0], [82.6, 123.0], [82.7, 123.0], [82.8, 123.0], [82.9, 123.0], [83.0, 123.0], [83.1, 124.0], [83.2, 124.0], [83.3, 124.0], [83.4, 124.0], [83.5, 124.0], [83.6, 125.0], [83.7, 125.0], [83.8, 125.0], [83.9, 125.0], [84.0, 126.0], [84.1, 126.0], [84.2, 126.0], [84.3, 126.0], [84.4, 126.0], [84.5, 127.0], [84.6, 127.0], [84.7, 127.0], [84.8, 127.0], [84.9, 128.0], [85.0, 128.0], [85.1, 128.0], [85.2, 128.0], [85.3, 129.0], [85.4, 129.0], [85.5, 129.0], [85.6, 129.0], [85.7, 130.0], [85.8, 130.0], [85.9, 130.0], [86.0, 131.0], [86.1, 131.0], [86.2, 131.0], [86.3, 131.0], [86.4, 132.0], [86.5, 132.0], [86.6, 132.0], [86.7, 133.0], [86.8, 133.0], [86.9, 133.0], [87.0, 133.0], [87.1, 134.0], [87.2, 134.0], [87.3, 134.0], [87.4, 135.0], [87.5, 135.0], [87.6, 135.0], [87.7, 136.0], [87.8, 136.0], [87.9, 137.0], [88.0, 137.0], [88.1, 137.0], [88.2, 138.0], [88.3, 138.0], [88.4, 139.0], [88.5, 139.0], [88.6, 140.0], [88.7, 140.0], [88.8, 140.0], [88.9, 141.0], [89.0, 141.0], [89.1, 142.0], [89.2, 142.0], [89.3, 143.0], [89.4, 143.0], [89.5, 144.0], [89.6, 145.0], [89.7, 145.0], [89.8, 146.0], [89.9, 146.0], [90.0, 147.0], [90.1, 148.0], [90.2, 148.0], [90.3, 149.0], [90.4, 150.0], [90.5, 150.0], [90.6, 151.0], [90.7, 152.0], [90.8, 152.0], [90.9, 153.0], [91.0, 154.0], [91.1, 155.0], [91.2, 156.0], [91.3, 157.0], [91.4, 158.0], [91.5, 159.0], [91.6, 160.0], [91.7, 161.0], [91.8, 162.0], [91.9, 163.0], [92.0, 165.0], [92.1, 166.0], [92.2, 167.0], [92.3, 168.0], [92.4, 170.0], [92.5, 171.0], [92.6, 172.0], [92.7, 173.0], [92.8, 174.0], [92.9, 175.0], [93.0, 176.0], [93.1, 176.0], [93.2, 177.0], [93.3, 178.0], [93.4, 179.0], [93.5, 180.0], [93.6, 181.0], [93.7, 182.0], [93.8, 183.0], [93.9, 184.0], [94.0, 185.0], [94.1, 186.0], [94.2, 187.0], [94.3, 188.0], [94.4, 189.0], [94.5, 190.0], [94.6, 190.0], [94.7, 191.0], [94.8, 192.0], [94.9, 193.0], [95.0, 194.0], [95.1, 195.0], [95.2, 195.0], [95.3, 196.0], [95.4, 197.0], [95.5, 198.0], [95.6, 198.0], [95.7, 199.0], [95.8, 200.0], [95.9, 201.0], [96.0, 202.0], [96.1, 203.0], [96.2, 204.0], [96.3, 204.0], [96.4, 205.0], [96.5, 206.0], [96.6, 207.0], [96.7, 208.0], [96.8, 209.0], [96.9, 210.0], [97.0, 211.0], [97.1, 212.0], [97.2, 213.0], [97.3, 214.0], [97.4, 216.0], [97.5, 217.0], [97.6, 218.0], [97.7, 219.0], [97.8, 221.0], [97.9, 222.0], [98.0, 224.0], [98.1, 225.0], [98.2, 227.0], [98.3, 228.0], [98.4, 230.0], [98.5, 232.0], [98.6, 234.0], [98.7, 236.0], [98.8, 238.0], [98.9, 241.0], [99.0, 243.0], [99.1, 246.0], [99.2, 249.0], [99.3, 252.0], [99.4, 256.0], [99.5, 260.0], [99.6, 267.0], [99.7, 281.0], [99.8, 303.0], [99.9, 344.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 262118.0, "series": [{"data": [[0.0, 262118.0], [1100.0, 7.0], [300.0, 741.0], [200.0, 16231.0], [100.0, 120798.0], [400.0, 76.0], [500.0, 14.0], [1000.0, 15.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 399964.0, "series": [{"data": [[0.0, 399964.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 36.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1934.2787575000007, "minX": 1.58524512E12, "maxY": 1934.2787575000007, "series": [{"data": [[1.58524512E12, 1934.2787575000007]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524512E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 418.625, "series": [{"data": [[2.0, 1.3333333333333333], [3.0, 1.5], [5.0, 3.0], [6.0, 1.25], [7.0, 1.5], [9.0, 1.0], [12.0, 1.6666666666666667], [14.0, 1.5714285714285714], [17.0, 1.0], [19.0, 1.6666666666666667], [20.0, 1.0], [21.0, 1.2222222222222223], [22.0, 2.0], [23.0, 2.0], [24.0, 1.75], [25.0, 1.0], [26.0, 1.0], [30.0, 7.5], [32.0, 7.5], [35.0, 7.071428571428571], [34.0, 7.333333333333333], [36.0, 6.5], [39.0, 7.0], [38.0, 6.0], [41.0, 7.0], [40.0, 6.333333333333334], [43.0, 7.0], [42.0, 6.5], [44.0, 6.833333333333333], [46.0, 5.0], [90.0, 2.0], [89.0, 2.0], [88.0, 2.0], [95.0, 1.0], [99.0, 3.0], [103.0, 3.6666666666666665], [102.0, 3.0], [101.0, 3.0], [100.0, 3.0], [107.0, 3.1250000000000004], [105.0, 2.6666666666666665], [104.0, 2.4], [111.0, 3.0], [110.0, 4.0], [109.0, 3.6666666666666665], [108.0, 3.0], [115.0, 3.0909090909090913], [113.0, 3.3333333333333335], [112.0, 4.0], [114.0, 3.0], [119.0, 2.5], [118.0, 2.0], [117.0, 3.4], [123.0, 3.5], [122.0, 3.0], [127.0, 3.0], [125.0, 5.0], [134.0, 3.0], [133.0, 4.0], [143.0, 3.0], [142.0, 3.1666666666666665], [141.0, 2.5714285714285716], [139.0, 2.0], [137.0, 2.5], [136.0, 3.4], [151.0, 3.2380952380952377], [150.0, 2.0], [149.0, 4.285714285714286], [148.0, 3.6], [147.0, 3.0], [146.0, 4.0], [145.0, 3.0], [144.0, 6.0], [159.0, 4.5], [158.0, 4.25], [157.0, 4.4], [156.0, 3.3333333333333335], [155.0, 4.0], [154.0, 3.5833333333333335], [152.0, 2.6249999999999996], [153.0, 3.36], [167.0, 4.25], [166.0, 4.222222222222221], [165.0, 3.928571428571428], [164.0, 3.4615384615384612], [163.0, 3.3636363636363638], [162.0, 3.0], [161.0, 2.5], [160.0, 2.6666666666666665], [175.0, 6.6], [174.0, 6.0], [173.0, 4.5], [171.0, 4.8], [170.0, 5.111111111111111], [169.0, 5.0], [183.0, 5.0], [181.0, 5.75], [180.0, 6.111111111111111], [178.0, 5.666666666666667], [177.0, 5.166666666666667], [191.0, 6.0], [190.0, 7.285714285714286], [187.0, 7.333333333333333], [186.0, 6.875], [185.0, 5.0], [184.0, 5.0], [199.0, 5.375000000000001], [198.0, 6.0], [197.0, 6.5], [196.0, 5.5], [195.0, 7.0], [194.0, 6.0], [193.0, 5.666666666666667], [207.0, 4.888888888888889], [205.0, 7.0], [203.0, 5.923076923076923], [201.0, 5.909090909090909], [200.0, 6.583333333333333], [214.0, 8.222222222222221], [213.0, 6.0], [212.0, 6.75], [211.0, 7.8], [210.0, 6.666666666666667], [209.0, 6.25], [208.0, 5.333333333333333], [223.0, 10.5], [221.0, 9.0], [220.0, 8.2], [219.0, 5.666666666666667], [218.0, 9.0], [217.0, 9.0], [231.0, 5.666666666666667], [230.0, 7.5], [229.0, 6.25], [228.0, 7.0], [227.0, 7.833333333333333], [226.0, 12.0], [225.0, 8.0], [224.0, 10.5], [239.0, 5.333333333333333], [238.0, 6.5], [237.0, 4.0], [236.0, 5.5], [233.0, 6.909090909090909], [247.0, 7.0], [246.0, 6.5], [245.0, 8.5], [244.0, 7.5], [243.0, 7.142857142857142], [241.0, 7.0], [240.0, 5.6000000000000005], [255.0, 16.545454545454547], [253.0, 16.249999999999996], [252.0, 16.0], [251.0, 16.0], [250.0, 14.695652173913043], [249.0, 9.0], [248.0, 13.166666666666668], [270.0, 16.6], [258.0, 185.66666666666666], [259.0, 231.39130434782612], [263.0, 125.0], [256.0, 16.545454545454543], [260.0, 176.27272727272725], [261.0, 71.62500000000001], [271.0, 16.4], [264.0, 16.687499999999996], [267.0, 17.0], [266.0, 18.0], [269.0, 16.625], [268.0, 16.0], [286.0, 17.0], [287.0, 16.4], [284.0, 15.0], [275.0, 16.142857142857142], [274.0, 17.0], [273.0, 15.909090909090908], [272.0, 17.0], [283.0, 17.0], [282.0, 17.0], [281.0, 16.0], [280.0, 17.0], [279.0, 16.0], [278.0, 15.142857142857144], [277.0, 16.666666666666668], [276.0, 15.5], [296.0, 17.0], [302.0, 16.0], [299.0, 16.857142857142858], [298.0, 17.25], [297.0, 17.0], [295.0, 17.0], [294.0, 16.25], [292.0, 17.0], [291.0, 16.8], [290.0, 17.0], [289.0, 13.75], [288.0, 16.0], [318.0, 7.0], [317.0, 236.25000000000006], [319.0, 173.5], [316.0, 8.0], [315.0, 10.0], [314.0, 8.5], [313.0, 12.333333333333334], [312.0, 14.5], [311.0, 16.0], [305.0, 16.700000000000003], [307.0, 15.9], [306.0, 16.5], [310.0, 12.6], [308.0, 14.166666666666666], [322.0, 360.5], [320.0, 214.47058823529414], [321.0, 14.0], [323.0, 203.1818181818182], [324.0, 168.66666666666666], [325.0, 117.42857142857142], [327.0, 335.421052631579], [329.0, 378.5], [330.0, 308.4], [332.0, 45.9090909090909], [333.0, 75.16666666666667], [334.0, 139.0], [335.0, 10.5], [328.0, 22.0], [350.0, 15.000000000000002], [351.0, 14.5], [348.0, 15.0], [339.0, 17.0], [338.0, 11.571428571428571], [337.0, 10.0], [336.0, 10.200000000000001], [347.0, 15.5], [346.0, 16.285714285714285], [345.0, 15.363636363636365], [344.0, 16.571428571428573], [343.0, 16.0], [342.0, 16.0], [341.0, 15.25], [366.0, 109.88888888888891], [367.0, 398.4117647058824], [365.0, 11.0], [364.0, 12.0], [363.0, 9.0], [362.0, 12.874999999999998], [360.0, 13.7], [358.0, 13.333333333333334], [353.0, 16.5], [355.0, 14.812500000000002], [354.0, 15.5], [357.0, 11.833333333333334], [356.0, 13.37037037037037], [369.0, 259.75], [368.0, 282.24999999999994], [370.0, 234.375], [371.0, 149.8571428571429], [372.0, 196.76923076923075], [373.0, 128.7142857142857], [374.0, 297.7], [375.0, 184.0], [382.0, 11.285714285714285], [377.0, 11.75], [376.0, 13.25], [379.0, 11.923076923076923], [378.0, 11.875], [381.0, 11.75], [380.0, 12.086956521739129], [398.0, 108.42857142857144], [399.0, 114.5], [397.0, 11.0], [396.0, 6.5], [395.0, 10.714285714285714], [394.0, 10.428571428571429], [393.0, 11.333333333333334], [390.0, 9.333333333333334], [385.0, 11.88888888888889], [384.0, 10.333333333333334], [387.0, 11.5], [386.0, 7.0], [389.0, 12.11111111111111], [388.0, 10.4], [407.0, 418.625], [404.0, 294.3333333333333], [405.0, 394.9166666666667], [406.0, 374.5], [408.0, 326.7], [415.0, 177.75], [409.0, 355.8461538461538], [410.0, 382.0], [411.0, 301.0], [412.0, 177.71428571428572], [403.0, 14.0], [402.0, 16.333333333333332], [401.0, 10.5], [400.0, 12.235294117647058], [413.0, 13.16], [414.0, 71.8], [429.0, 47.5], [422.0, 39.63157894736842], [421.0, 10.6], [420.0, 9.0], [423.0, 66.0], [424.0, 120.70588235294119], [425.0, 104.35000000000002], [426.0, 102.8], [427.0, 113.0], [428.0, 60.70588235294115], [419.0, 11.555555555555555], [418.0, 9.625], [417.0, 9.833333333333334], [430.0, 152.5], [431.0, 13.0], [434.0, 60.18749999999999], [435.0, 65.1875], [444.0, 57.8], [447.0, 65.66666666666666], [446.0, 14.0], [445.0, 17.0], [436.0, 274.44444444444446], [437.0, 222.63636363636357], [438.0, 147.36363636363635], [439.0, 280.6666666666667], [440.0, 120.6], [441.0, 168.71428571428572], [442.0, 204.50000000000006], [443.0, 136.92857142857142], [450.0, 47.33333333333333], [451.0, 144.42857142857144], [460.0, 12.999999999999998], [461.0, 51.846153846153854], [462.0, 157.30769230769232], [463.0, 299.45000000000005], [452.0, 137.4], [453.0, 231.88888888888886], [454.0, 218.41666666666666], [455.0, 220.91666666666666], [448.0, 14.0], [456.0, 187.0], [457.0, 156.57142857142858], [458.0, 161.8], [459.0, 105.50000000000001], [476.0, 98.29411764705885], [466.0, 84.0], [465.0, 91.55555555555554], [464.0, 10.444444444444445], [467.0, 65.79999999999997], [470.0, 148.0], [469.0, 5.5], [468.0, 5.0], [471.0, 10.0], [473.0, 77.5], [474.0, 250.11111111111111], [475.0, 166.29166666666663], [477.0, 239.42857142857144], [478.0, 22.333333333333332], [479.0, 109.33333333333334], [472.0, 7.562500000000001], [483.0, 128.0], [480.0, 155.69230769230765], [481.0, 246.66666666666666], [482.0, 32.0], [487.0, 189.33333333333334], [486.0, 9.2], [485.0, 9.333333333333334], [484.0, 9.5], [488.0, 50.28571428571429], [494.0, 56.0], [495.0, 36.565217391304344], [492.0, 59.99999999999999], [493.0, 138.0], [489.0, 213.0], [490.0, 99.88888888888886], [491.0, 34.285714285714285], [498.0, 182.2666666666667], [497.0, 127.19999999999999], [496.0, 14.5], [499.0, 139.27777777777777], [509.0, 12.0], [508.0, 12.4], [511.0, 13.6], [510.0, 24.0], [500.0, 124.16666666666666], [501.0, 164.66666666666666], [502.0, 177.0], [503.0, 155.625], [504.0, 201.71428571428572], [505.0, 151.62500000000003], [507.0, 11.461538461538462], [506.0, 10.333333333333334], [538.0, 136.88235294117646], [530.0, 140.76190476190476], [532.0, 207.66666666666669], [536.0, 181.9], [514.0, 12.142857142857144], [512.0, 12.25], [540.0, 171.5], [542.0, 11.857142857142858], [528.0, 10.111111111111109], [526.0, 7.0], [524.0, 11.0], [522.0, 11.333333333333334], [520.0, 10.0], [570.0, 156.72727272727275], [550.0, 94.44444444444444], [546.0, 178.3928571428571], [544.0, 12.666666666666666], [548.0, 115.91666666666663], [560.0, 228.50000000000003], [574.0, 156.39999999999998], [572.0, 174.0625], [568.0, 326.0], [562.0, 90.66666666666666], [566.0, 17.0], [564.0, 13.0], [556.0, 95.375], [554.0, 11.5], [552.0, 12.333333333333334], [558.0, 114.62500000000001], [578.0, 299.4], [576.0, 121.05882352941177], [590.0, 235.24999999999997], [588.0, 168.80000000000004], [586.0, 153.83333333333334], [580.0, 234.0], [582.0, 56.94736842105263], [592.0, 50.74999999999999], [594.0, 11.391304347826086], [598.0, 12.0], [596.0, 11.0], [606.0, 197.8], [604.0, 13.428571428571429], [602.0, 13.0], [584.0, 79.71428571428571], [610.0, 249.22222222222223], [608.0, 245.79999999999998], [620.0, 99.09523809523807], [618.0, 159.5], [612.0, 248.83333333333334], [614.0, 221.66666666666666], [626.0, 140.20000000000002], [624.0, 11.947368421052632], [638.0, 180.50000000000003], [636.0, 191.5], [634.0, 32.50000000000001], [632.0, 242.42857142857142], [628.0, 174.84615384615384], [630.0, 88.3], [616.0, 190.63636363636363], [642.0, 30.91666666666667], [640.0, 206.6], [654.0, 65.71428571428572], [652.0, 77.08333333333334], [650.0, 65.64285714285715], [644.0, 104.6], [646.0, 13.679245283018867], [664.0, 194.73333333333332], [666.0, 53.87499999999999], [668.0, 77.51724137931035], [656.0, 135.86666666666667], [658.0, 128.4], [660.0, 21.21212121212121], [662.0, 136.83333333333334], [648.0, 75.66666666666667], [678.0, 66.1], [674.0, 188.90909090909088], [686.0, 116.10000000000001], [672.0, 16.999999999999996], [684.0, 58.43103448275863], [682.0, 206.35714285714286], [676.0, 148.14285714285714], [702.0, 195.33333333333334], [700.0, 19.0], [698.0, 21.2], [696.0, 23.0], [688.0, 191.83333333333334], [690.0, 237.16666666666666], [692.0, 214.09090909090912], [694.0, 195.0], [680.0, 93.25], [706.0, 109.86666666666667], [704.0, 129.73333333333332], [718.0, 176.1578947368421], [716.0, 115.50000000000004], [708.0, 147.5], [710.0, 30.740740740740733], [728.0, 137.0], [730.0, 125.85714285714286], [732.0, 94.95238095238098], [734.0, 121.8181818181818], [720.0, 120.0], [722.0, 109.54545454545453], [724.0, 195.93333333333337], [726.0, 156.0], [712.0, 100.83333333333334], [714.0, 187.8125], [738.0, 213.66666666666666], [736.0, 87.23529411764704], [750.0, 108.87499999999997], [748.0, 109.33333333333334], [746.0, 40.17647058823529], [740.0, 181.375], [742.0, 50.8051948051948], [760.0, 182.5], [762.0, 109.08333333333333], [764.0, 117.20000000000003], [766.0, 39.428571428571445], [758.0, 22.0], [756.0, 20.5], [754.0, 20.304347826086953], [752.0, 23.0], [744.0, 129.71428571428572], [770.0, 122.66666666666666], [768.0, 104.54545454545456], [782.0, 117.42857142857143], [780.0, 146.06249999999997], [778.0, 148.5], [772.0, 203.25], [774.0, 207.17647058823533], [784.0, 133.88235294117646], [798.0, 191.73333333333335], [796.0, 81.3076923076923], [794.0, 118.66666666666667], [792.0, 93.91428571428571], [786.0, 178.26666666666665], [788.0, 184.3846153846154], [790.0, 125.89999999999996], [776.0, 202.75], [802.0, 96.9], [800.0, 174.25], [814.0, 89.1153846153846], [812.0, 180.15384615384616], [804.0, 202.84615384615384], [806.0, 90.30434782608694], [816.0, 162.84615384615387], [830.0, 138.00000000000003], [828.0, 110.11538461538461], [824.0, 32.0], [826.0, 103.6], [818.0, 177.3], [820.0, 150.35483870967744], [822.0, 96.53846153846153], [808.0, 201.2], [810.0, 100.80952380952382], [834.0, 160.33333333333334], [832.0, 84.61904761904762], [846.0, 156.0625], [844.0, 126.66666666666667], [842.0, 165.6875], [836.0, 96.44444444444444], [838.0, 68.72222222222223], [848.0, 71.66666666666666], [862.0, 144.35714285714286], [860.0, 168.0], [858.0, 113.84615384615385], [856.0, 72.15625], [850.0, 90.6923076923077], [852.0, 95.44444444444446], [854.0, 60.666666666666664], [840.0, 93.0], [890.0, 186.77777777777777], [864.0, 77.82352941176471], [866.0, 135.14285714285714], [868.0, 107.0], [880.0, 126.78571428571429], [894.0, 116.375], [892.0, 88.53846153846153], [888.0, 93.88372093023257], [870.0, 42.833333333333336], [882.0, 117.53333333333335], [884.0, 136.0909090909091], [886.0, 131.58823529411762], [874.0, 43.529411764705884], [876.0, 103.5185185185185], [878.0, 168.22222222222223], [898.0, 180.0], [896.0, 175.375], [910.0, 64.375], [908.0, 131.09523809523807], [906.0, 149.06666666666666], [900.0, 85.3035714285714], [902.0, 166.6923076923077], [916.0, 42.94117647058824], [914.0, 44.81481481481482], [926.0, 170.65217391304347], [924.0, 155.3], [922.0, 134.5454545454545], [920.0, 160.81250000000003], [918.0, 109.55555555555554], [904.0, 123.39130434782608], [930.0, 83.35294117647061], [928.0, 135.0], [942.0, 185.5], [940.0, 108.73333333333332], [938.0, 161.88888888888889], [932.0, 161.08333333333334], [934.0, 49.2391304347826], [944.0, 158.77777777777777], [958.0, 110.85714285714286], [956.0, 39.25], [954.0, 35.75], [952.0, 86.25], [946.0, 146.75], [948.0, 179.41176470588235], [950.0, 131.75], [936.0, 166.0], [962.0, 103.51851851851853], [960.0, 119.08333333333334], [974.0, 89.5], [972.0, 111.80000000000003], [970.0, 115.03448275862067], [964.0, 127.66666666666666], [966.0, 138.3181818181818], [976.0, 115.71428571428572], [990.0, 175.75], [988.0, 47.38461538461539], [986.0, 82.21951219512196], [984.0, 111.69696969696967], [978.0, 66.9833333333333], [980.0, 140.96153846153845], [982.0, 173.55555555555554], [968.0, 107.42424242424244], [994.0, 142.0], [992.0, 81.57142857142858], [1006.0, 191.0], [1004.0, 160.2941176470588], [998.0, 76.25714285714284], [1008.0, 93.41666666666667], [1022.0, 107.18181818181819], [1020.0, 146.4], [1018.0, 175.57142857142856], [1016.0, 151.45833333333334], [1010.0, 75.74285714285716], [1012.0, 54.099999999999994], [1014.0, 126.0], [1000.0, 140.9473684210526], [1002.0, 166.4], [1028.0, 86.19354838709673], [1036.0, 79.42857142857143], [1024.0, 92.85714285714286], [1052.0, 110.43750000000001], [1048.0, 155.63636363636363], [1044.0, 133.33333333333334], [1040.0, 151.23529411764707], [1032.0, 224.0], [1072.0, 125.27272727272728], [1076.0, 96.30434782608694], [1080.0, 185.94736842105263], [1084.0, 147.0], [1056.0, 77.85000000000001], [1060.0, 145.91304347826085], [1064.0, 158.41176470588238], [1068.0, 75.85], [1092.0, 169.26666666666665], [1096.0, 105.85294117647057], [1088.0, 105.96666666666664], [1116.0, 102.33333333333333], [1108.0, 61.41666666666667], [1112.0, 115.58333333333331], [1100.0, 57.0], [1120.0, 69.52941176470591], [1148.0, 185.91666666666666], [1144.0, 62.925925925925924], [1140.0, 124.17857142857142], [1136.0, 61.32558139534884], [1124.0, 96.375], [1128.0, 114.94999999999999], [1132.0, 156.94117647058823], [1156.0, 145.3], [1152.0, 181.84000000000003], [1180.0, 181.73333333333332], [1176.0, 118.46666666666668], [1172.0, 175.63333333333333], [1168.0, 120.62068965517243], [1160.0, 70.22857142857139], [1164.0, 73.00000000000001], [1184.0, 85.48387096774192], [1212.0, 77.85106382978721], [1208.0, 91.44117647058823], [1204.0, 94.53333333333335], [1200.0, 121.66666666666664], [1188.0, 131.70833333333331], [1192.0, 186.63636363636363], [1196.0, 126.28000000000002], [1220.0, 123.26315789473684], [1216.0, 67.78431372549021], [1244.0, 154.46153846153845], [1240.0, 103.84210526315789], [1236.0, 80.72222222222223], [1232.0, 78.89285714285717], [1224.0, 163.375], [1228.0, 141.5714285714286], [1264.0, 76.93939393939388], [1268.0, 117.83870967741935], [1272.0, 110.28571428571423], [1248.0, 143.2142857142857], [1276.0, 156.57142857142858], [1252.0, 161.95], [1256.0, 174.4375], [1260.0, 85.30769230769229], [1284.0, 159.05263157894737], [1280.0, 146.20000000000002], [1308.0, 95.81034482758616], [1304.0, 112.625], [1300.0, 119.57142857142857], [1288.0, 202.72727272727272], [1292.0, 93.66666666666667], [1312.0, 92.03703703703705], [1340.0, 161.53333333333333], [1336.0, 175.83333333333334], [1332.0, 129.16666666666666], [1328.0, 82.6470588235294], [1316.0, 171.31578947368422], [1320.0, 128.41176470588232], [1324.0, 57.083333333333336], [1296.0, 151.08333333333334], [1348.0, 107.30434782608697], [1344.0, 81.1904761904762], [1372.0, 135.6176470588235], [1368.0, 133.11111111111111], [1364.0, 152.8125], [1352.0, 146.6153846153846], [1356.0, 93.29411764705883], [1376.0, 96.46428571428571], [1404.0, 50.65384615384615], [1400.0, 163.15384615384613], [1396.0, 113.69444444444446], [1392.0, 93.05747126436782], [1380.0, 81.86666666666667], [1388.0, 169.6875], [1360.0, 159.4814814814815], [1412.0, 225.4], [1408.0, 146.44444444444446], [1436.0, 159.08333333333334], [1432.0, 99.84], [1428.0, 209.18750000000003], [1416.0, 214.36363636363635], [1420.0, 184.00000000000003], [1440.0, 120.7058823529412], [1464.0, 108.99999999999999], [1468.0, 167.23809523809524], [1460.0, 183.00000000000003], [1456.0, 147.56410256410254], [1444.0, 95.73529411764709], [1448.0, 145.37037037037035], [1452.0, 112.63636363636367], [1424.0, 153.4375], [1476.0, 135.8], [1472.0, 141.72499999999997], [1500.0, 198.62499999999994], [1492.0, 155.21739130434787], [1496.0, 182.33333333333334], [1480.0, 123.77777777777777], [1484.0, 109.63043478260869], [1504.0, 124.03846153846153], [1532.0, 130.5], [1528.0, 172.8], [1524.0, 89.24242424242425], [1520.0, 184.36842105263156], [1508.0, 108.79310344827586], [1512.0, 88.86363636363636], [1516.0, 184.84615384615387], [1488.0, 206.67999999999995], [1540.0, 202.66666666666666], [1536.0, 104.76785714285712], [1564.0, 123.34615384615383], [1560.0, 97.9873417721519], [1556.0, 187.43478260869566], [1544.0, 176.70370370370372], [1548.0, 81.94666666666663], [1568.0, 149.96296296296293], [1596.0, 132.1621621621622], [1592.0, 155.56000000000003], [1588.0, 144.55555555555557], [1584.0, 105.30303030303033], [1572.0, 209.0], [1576.0, 205.92857142857144], [1580.0, 87.97368421052632], [1552.0, 100.77142857142856], [1608.0, 243.0], [1612.0, 195.0], [1600.0, 138.29166666666669], [1628.0, 138.55172413793102], [1624.0, 127.69090909090905], [1620.0, 126.71153846153852], [1604.0, 109.5686274509804], [1648.0, 144.72727272727272], [1652.0, 196.45161290322582], [1656.0, 151.84615384615384], [1660.0, 170.63333333333333], [1632.0, 176.66666666666666], [1636.0, 138.21875000000003], [1640.0, 114.82352941176472], [1644.0, 61.83333333333333], [1616.0, 111.08333333333337], [1668.0, 158.65384615384616], [1664.0, 173.95999999999998], [1692.0, 213.33333333333331], [1688.0, 88.95652173913041], [1684.0, 123.6666666666667], [1672.0, 87.13114754098362], [1676.0, 139.52941176470588], [1696.0, 172.1904761904762], [1724.0, 242.9375], [1720.0, 197.14285714285714], [1716.0, 193.9705882352941], [1712.0, 241.7777777777778], [1700.0, 181.84615384615387], [1704.0, 241.49999999999997], [1708.0, 123.72972972972968], [1680.0, 131.0625], [1732.0, 122.625], [1728.0, 90.4230769230769], [1756.0, 80.7833333333333], [1752.0, 181.76470588235293], [1748.0, 96.21428571428571], [1736.0, 136.53333333333333], [1740.0, 128.3478260869565], [1760.0, 110.73076923076924], [1788.0, 111.76315789473685], [1784.0, 77.24000000000002], [1780.0, 152.46153846153845], [1776.0, 215.08695652173913], [1764.0, 235.45714285714286], [1768.0, 97.22000000000001], [1772.0, 59.999999999999986], [1744.0, 171.2272727272727], [1796.0, 95.89189189189189], [1792.0, 70.03571428571425], [1820.0, 165.88888888888889], [1816.0, 200.71999999999997], [1812.0, 164.4375], [1800.0, 83.08], [1804.0, 148.99999999999997], [1824.0, 72.05769230769229], [1852.0, 100.70967741935485], [1848.0, 92.98333333333335], [1844.0, 99.69444444444443], [1840.0, 197.27586206896547], [1828.0, 189.0], [1832.0, 67.1875], [1836.0, 137.41025641025638], [1808.0, 217.76190476190476], [1860.0, 105.35483870967744], [1856.0, 108.6060606060606], [1884.0, 106.20689655172418], [1880.0, 127.28571428571426], [1876.0, 129.3518518518519], [1864.0, 228.5263157894737], [1868.0, 192.5483870967742], [1888.0, 123.63636363636363], [1912.0, 77.27272727272728], [1916.0, 93.63492063492065], [1908.0, 99.74509803921569], [1904.0, 212.16666666666669], [1896.0, 137.9230769230769], [1892.0, 76.5], [1900.0, 107.11881188118812], [1872.0, 145.05000000000004], [1924.0, 111.69230769230771], [1920.0, 183.37037037037035], [1948.0, 36.92021276595745], [1944.0, 73.1857142857143], [1940.0, 56.1734693877551], [1928.0, 96.8918918918919], [1932.0, 178.0677966101695], [1952.0, 70.35632183908048], [1980.0, 211.85], [1976.0, 230.43902439024387], [1972.0, 220.32456140350885], [1968.0, 236.60799999999992], [1956.0, 41.89147286821704], [1960.0, 28.857142857142875], [1964.0, 253.1095890410959], [1936.0, 190.1935483870968], [1984.0, 74.61290322580646], [1988.0, 88.14166666666667], [1992.0, 93.31213872832367], [1996.0, 122.83571428571432], [2000.0, 94.53318253595401], [1025.0, 205.29411764705878], [1053.0, 96.09677419354837], [1049.0, 121.63333333333333], [1045.0, 155.0909090909091], [1041.0, 125.36363636363636], [1029.0, 187.59999999999997], [1033.0, 149.0769230769231], [1037.0, 169.2], [1073.0, 62.1], [1077.0, 107.50000000000001], [1081.0, 138.87234042553192], [1085.0, 133.14285714285714], [1057.0, 138.60000000000002], [1061.0, 159.0909090909091], [1065.0, 148.1578947368421], [1069.0, 148.9333333333333], [1093.0, 111.07142857142857], [1145.0, 75.58064516129032], [1137.0, 170.0], [1101.0, 52.06666666666667], [1117.0, 135.20000000000002], [1113.0, 147.36000000000004], [1109.0, 41.921052631578945], [1105.0, 42.714285714285715], [1089.0, 60.71999999999999], [1097.0, 166.0909090909091], [1149.0, 112.73684210526315], [1141.0, 151.34615384615387], [1121.0, 140.63636363636368], [1125.0, 142.88461538461542], [1129.0, 84.18421052631577], [1133.0, 95.18181818181816], [1153.0, 135.4166666666667], [1181.0, 202.22222222222223], [1177.0, 102.28571428571429], [1173.0, 123.66666666666667], [1169.0, 148.76666666666668], [1157.0, 84.8372093023256], [1161.0, 82.19999999999999], [1165.0, 175.89999999999998], [1213.0, 181.23529411764707], [1209.0, 77.78378378378376], [1205.0, 152.04166666666666], [1201.0, 132.72222222222223], [1185.0, 139.85714285714286], [1189.0, 88.52941176470588], [1193.0, 126.0], [1197.0, 91.73076923076923], [1217.0, 114.4705882352941], [1245.0, 108.57407407407406], [1241.0, 129.375], [1237.0, 148.62500000000003], [1233.0, 146.39999999999998], [1221.0, 131.57894736842107], [1225.0, 85.52000000000001], [1229.0, 119.60869565217392], [1265.0, 122.49999999999999], [1269.0, 176.28571428571428], [1273.0, 141.0], [1277.0, 171.16666666666669], [1249.0, 110.44117647058822], [1253.0, 143.29999999999998], [1257.0, 194.93333333333334], [1261.0, 129.88888888888889], [1285.0, 179.625], [1281.0, 127.26315789473685], [1309.0, 156.04166666666663], [1305.0, 101.34615384615387], [1301.0, 147.48148148148147], [1289.0, 93.12765957446811], [1293.0, 76.53333333333332], [1313.0, 102.27777777777777], [1341.0, 153.23076923076923], [1337.0, 125.3611111111111], [1333.0, 195.92307692307693], [1329.0, 152.17391304347825], [1317.0, 80.18867924528303], [1321.0, 98.44444444444444], [1325.0, 92.7948717948718], [1297.0, 186.38095238095238], [1349.0, 148.57142857142856], [1345.0, 197.2], [1373.0, 139.6451612903226], [1369.0, 121.99999999999999], [1353.0, 83.55263157894737], [1357.0, 155.15789473684208], [1377.0, 144.23999999999998], [1405.0, 152.4], [1401.0, 131.3333333333333], [1397.0, 146.36363636363637], [1393.0, 150.18181818181822], [1385.0, 125.5], [1389.0, 112.74509803921575], [1361.0, 172.12], [1413.0, 115.67999999999996], [1409.0, 219.375], [1437.0, 174.29166666666666], [1433.0, 180.00000000000003], [1429.0, 102.5], [1417.0, 166.7241379310345], [1421.0, 226.75], [1441.0, 158.10344827586206], [1469.0, 220.50000000000003], [1465.0, 93.0909090909091], [1461.0, 167.8461538461538], [1457.0, 169.5625], [1445.0, 121.87272727272726], [1449.0, 120.94117647058825], [1453.0, 114.99999999999999], [1425.0, 119.40740740740742], [1477.0, 112.78571428571428], [1473.0, 189.51219512195124], [1501.0, 159.41666666666666], [1497.0, 129.02702702702703], [1493.0, 202.3125], [1481.0, 99.84], [1485.0, 226.9], [1505.0, 115.3220338983051], [1533.0, 176.97619047619048], [1529.0, 84.96470588235293], [1525.0, 185.74468085106383], [1521.0, 170.125], [1509.0, 198.2], [1513.0, 61.170731707317096], [1517.0, 169.0], [1489.0, 150.27777777777777], [1541.0, 180.0], [1537.0, 109.72972972972975], [1565.0, 172.92000000000004], [1561.0, 109.27906976744188], [1557.0, 129.83999999999997], [1545.0, 183.68000000000004], [1549.0, 142.0], [1569.0, 114.10344827586208], [1597.0, 95.54000000000002], [1593.0, 120.42222222222229], [1589.0, 174.3846153846154], [1585.0, 152.46666666666667], [1573.0, 215.60000000000002], [1577.0, 103.85714285714283], [1581.0, 188.1875], [1553.0, 162.46153846153848], [1605.0, 211.2857142857143], [1601.0, 182.53333333333333], [1629.0, 193.14285714285714], [1625.0, 106.17500000000003], [1621.0, 111.93877551020412], [1609.0, 240.0], [1613.0, 116.39285714285715], [1633.0, 194.3636363636364], [1661.0, 192.73684210526315], [1657.0, 134.81081081081078], [1653.0, 114.35849056603773], [1649.0, 77.79687499999999], [1637.0, 192.6818181818182], [1641.0, 145.57142857142856], [1645.0, 67.05263157894737], [1617.0, 194.6774193548387], [1669.0, 118.78431372549018], [1665.0, 195.13333333333333], [1693.0, 244.12500000000003], [1689.0, 132.62499999999997], [1685.0, 145.49180327868848], [1673.0, 212.85714285714286], [1677.0, 112.23076923076923], [1697.0, 209.85714285714283], [1725.0, 127.18181818181816], [1721.0, 115.83673469387757], [1717.0, 192.92592592592592], [1713.0, 112.59090909090907], [1701.0, 129.20588235294113], [1705.0, 158.93333333333334], [1709.0, 187.8], [1681.0, 101.17391304347827], [1733.0, 96.9189189189189], [1729.0, 96.17073170731703], [1757.0, 114.58695652173921], [1753.0, 132.80769230769232], [1749.0, 140.77142857142857], [1737.0, 105.83333333333334], [1741.0, 224.5], [1761.0, 178.44000000000003], [1789.0, 168.43333333333334], [1785.0, 99.31395348837206], [1781.0, 126.06451612903227], [1777.0, 100.56249999999999], [1765.0, 91.31250000000004], [1769.0, 121.29545454545453], [1773.0, 111.63636363636365], [1745.0, 156.40740740740736], [1797.0, 206.47368421052636], [1793.0, 88.0], [1821.0, 147.22727272727275], [1817.0, 186.57142857142856], [1813.0, 131.45833333333331], [1801.0, 88.63157894736841], [1805.0, 95.12903225806453], [1825.0, 151.9090909090909], [1853.0, 92.44117647058827], [1849.0, 150.33333333333331], [1845.0, 178.4666666666666], [1841.0, 118.07272727272728], [1829.0, 187.6], [1833.0, 106.73999999999997], [1837.0, 135.025], [1809.0, 86.42857142857143], [1861.0, 108.6393442622951], [1857.0, 167.37931034482756], [1885.0, 106.85714285714285], [1881.0, 149.60000000000002], [1877.0, 140.64150943396226], [1865.0, 154.27692307692314], [1869.0, 121.41428571428571], [1889.0, 153.11111111111111], [1893.0, 76.9512195121951], [1913.0, 75.69298245614038], [1917.0, 133.19565217391306], [1909.0, 87.51327433628317], [1905.0, 206.48000000000005], [1897.0, 144.5], [1901.0, 197.38709677419354], [1873.0, 191.3061224489796], [1925.0, 132.72727272727272], [1933.0, 151.7777777777778], [1921.0, 62.8], [1949.0, 41.80898876404494], [1945.0, 84.65517241379312], [1941.0, 69.60576923076921], [1929.0, 105.1375], [1969.0, 237.87755102040816], [1973.0, 239.3], [1977.0, 207.1418439716311], [1981.0, 184.1172638436481], [1953.0, 119.75000000000001], [1957.0, 231.53846153846155], [1961.0, 237.3], [1965.0, 251.73863636363635], [1937.0, 174.375], [1985.0, 98.79787234042557], [1989.0, 76.67372881355934], [1993.0, 96.74857142857147], [1997.0, 244.8148148148148], [537.0, 79.36363636363635], [529.0, 331.0], [519.0, 46.05263157894737], [517.0, 10.75], [515.0, 10.666666666666666], [513.0, 10.571428571428571], [531.0, 127.84615384615384], [535.0, 123.5714285714286], [539.0, 72.5], [541.0, 12.0], [533.0, 9.6], [527.0, 12.0], [525.0, 11.0], [523.0, 11.277777777777779], [521.0, 11.0], [573.0, 217.625], [545.0, 93.83333333333334], [547.0, 115.82608695652173], [549.0, 252.85714285714286], [551.0, 11.6], [575.0, 142.16666666666669], [571.0, 252.33333333333334], [569.0, 80.5], [561.0, 212.73684210526318], [563.0, 233.29999999999998], [565.0, 311.0], [567.0, 165.0], [557.0, 66.6], [555.0, 15.250000000000002], [553.0, 11.0], [559.0, 250.16666666666669], [579.0, 214.0], [591.0, 233.0], [589.0, 195.23076923076923], [587.0, 83.0], [577.0, 148.6153846153846], [581.0, 276.0], [583.0, 205.0], [605.0, 213.18750000000003], [603.0, 13.75], [601.0, 12.0], [607.0, 224.3888888888889], [593.0, 132.2], [595.0, 11.279999999999996], [599.0, 13.0], [597.0, 13.0], [585.0, 151.6], [615.0, 68.90909090909089], [611.0, 163.16666666666666], [621.0, 103.57142857142857], [619.0, 207.55555555555554], [609.0, 267.8333333333333], [613.0, 66.53846153846155], [639.0, 117.85714285714285], [625.0, 14.857142857142856], [637.0, 176.1], [635.0, 206.0], [633.0, 169.35714285714286], [627.0, 205.0], [629.0, 248.66666666666666], [631.0, 235.11111111111111], [617.0, 159.72727272727272], [645.0, 37.25], [641.0, 141.2], [655.0, 60.18750000000001], [653.0, 165.66666666666663], [651.0, 43.090909090909086], [643.0, 67.61538461538461], [647.0, 27.999999999999996], [665.0, 44.126582278480974], [667.0, 171.55555555555554], [669.0, 82.49999999999999], [657.0, 140.66666666666666], [671.0, 17.4], [659.0, 75.88888888888889], [663.0, 76.33333333333334], [661.0, 16.333333333333332], [649.0, 110.27272727272725], [675.0, 126.36363636363636], [673.0, 197.0], [687.0, 199.63636363636365], [685.0, 145.33333333333334], [683.0, 120.75000000000001], [677.0, 196.08333333333334], [679.0, 94.125], [697.0, 267.6666666666667], [699.0, 19.666666666666668], [701.0, 22.0], [703.0, 91.35714285714285], [689.0, 44.30769230769231], [691.0, 264.0], [693.0, 279.75], [695.0, 75.76190476190476], [681.0, 84.63636363636367], [709.0, 104.61538461538463], [705.0, 210.33333333333331], [719.0, 220.0], [717.0, 167.53846153846155], [715.0, 65.0], [707.0, 158.31578947368422], [711.0, 20.666666666666668], [729.0, 108.45454545454545], [731.0, 151.6], [733.0, 74.46666666666665], [735.0, 128.92857142857142], [721.0, 24.0], [723.0, 147.66666666666666], [725.0, 206.72727272727272], [727.0, 159.05555555555554], [713.0, 20.0], [739.0, 209.10000000000002], [751.0, 138.77777777777777], [749.0, 134.83333333333334], [747.0, 214.0], [737.0, 122.60000000000001], [741.0, 74.74285714285712], [743.0, 178.46153846153845], [761.0, 77.37037037037037], [763.0, 76.15384615384616], [765.0, 64.11764705882354], [767.0, 211.86666666666665], [759.0, 19.6], [757.0, 20.28571428571429], [755.0, 20.333333333333336], [753.0, 23.333333333333332], [745.0, 73.19047619047622], [771.0, 121.91666666666669], [783.0, 64.08695652173914], [781.0, 183.1875], [779.0, 177.5], [769.0, 166.0], [773.0, 109.83333333333334], [775.0, 210.14285714285714], [799.0, 160.83333333333334], [797.0, 125.73333333333333], [795.0, 136.8888888888889], [793.0, 159.625], [785.0, 209.2857142857143], [787.0, 63.31999999999998], [789.0, 85.14285714285714], [791.0, 215.92857142857144], [777.0, 202.75], [803.0, 170.66666666666666], [815.0, 52.86274509803922], [813.0, 88.23529411764707], [811.0, 174.66666666666666], [801.0, 203.0], [805.0, 149.23529411764707], [807.0, 206.27272727272728], [831.0, 154.5], [829.0, 184.81249999999997], [827.0, 109.94736842105264], [825.0, 152.71428571428572], [817.0, 107.81249999999999], [819.0, 73.89655172413791], [821.0, 97.16000000000003], [823.0, 196.6], [809.0, 25.0], [835.0, 157.4], [847.0, 84.28571428571428], [845.0, 142.57142857142858], [843.0, 167.54545454545456], [833.0, 179.88888888888889], [837.0, 184.9230769230769], [839.0, 86.04347826086958], [863.0, 88.43478260869566], [861.0, 71.95833333333331], [859.0, 163.93333333333334], [857.0, 165.14285714285714], [849.0, 110.73684210526315], [851.0, 169.3157894736842], [853.0, 147.83333333333334], [855.0, 59.0], [841.0, 99.45454545454544], [869.0, 45.2], [865.0, 134.43478260869566], [879.0, 157.55555555555554], [867.0, 47.263157894736835], [895.0, 102.43999999999998], [893.0, 100.78571428571428], [891.0, 149.0909090909091], [871.0, 43.333333333333336], [889.0, 122.71428571428577], [881.0, 174.38888888888889], [883.0, 135.66666666666663], [885.0, 130.47368421052633], [887.0, 185.45454545454547], [875.0, 95.09090909090908], [873.0, 43.5], [877.0, 163.16666666666666], [899.0, 153.31578947368422], [909.0, 106.4], [907.0, 120.88888888888889], [897.0, 155.41176470588238], [901.0, 93.39583333333337], [903.0, 179.22222222222223], [917.0, 181.23076923076923], [915.0, 45.69230769230769], [913.0, 47.0], [927.0, 125.1304347826087], [925.0, 151.09090909090912], [923.0, 107.85], [921.0, 173.1764705882353], [919.0, 153.07692307692307], [905.0, 72.86486486486488], [931.0, 70.66666666666666], [943.0, 131.11111111111111], [941.0, 181.4], [939.0, 152.84615384615387], [929.0, 169.45454545454544], [933.0, 141.10526315789474], [935.0, 179.91304347826087], [957.0, 40.150000000000006], [955.0, 39.0], [959.0, 166.73333333333332], [953.0, 44.833333333333336], [945.0, 141.6190476190476], [947.0, 149.92857142857142], [949.0, 116.62500000000001], [951.0, 55.482758620689644], [937.0, 134.26923076923075], [963.0, 69.42499999999998], [975.0, 115.99999999999997], [973.0, 164.5], [971.0, 126.99999999999999], [961.0, 156.68965517241378], [965.0, 164.31249999999997], [967.0, 179.0], [991.0, 51.363636363636374], [989.0, 70.67500000000001], [987.0, 84.33333333333334], [985.0, 57.02857142857142], [977.0, 162.92307692307693], [979.0, 168.45454545454547], [981.0, 133.4242424242424], [983.0, 86.83333333333333], [969.0, 146.76923076923075], [997.0, 36.0], [999.0, 112.0], [993.0, 86.46153846153844], [1007.0, 136.76315789473685], [1005.0, 119.62500000000004], [995.0, 73.92857142857144], [1023.0, 181.85000000000002], [1021.0, 82.04545454545456], [1019.0, 166.0], [1017.0, 109.85714285714286], [1009.0, 153.37500000000003], [1011.0, 90.99999999999999], [1013.0, 127.83333333333337], [1015.0, 85.72727272727272], [1001.0, 90.21428571428572], [1003.0, 128.45], [1026.0, 175.20833333333334], [1054.0, 151.85714285714286], [1050.0, 165.61904761904762], [1046.0, 70.80769230769229], [1042.0, 171.83333333333331], [1030.0, 153.07692307692307], [1034.0, 80.4375], [1038.0, 184.42105263157893], [1074.0, 194.92857142857144], [1078.0, 128.31249999999997], [1082.0, 57.0], [1086.0, 166.0526315789473], [1058.0, 130.00000000000003], [1062.0, 187.66666666666666], [1066.0, 89.55999999999997], [1070.0, 103.13793103448275], [1090.0, 179.2], [1118.0, 94.5925925925926], [1114.0, 115.39285714285714], [1106.0, 43.0], [1110.0, 40.333333333333336], [1094.0, 75.95348837209302], [1098.0, 107.86666666666667], [1150.0, 103.7826086956522], [1146.0, 189.00000000000003], [1142.0, 162.65], [1138.0, 50.86363636363635], [1102.0, 48.84782608695652], [1122.0, 115.68749999999997], [1126.0, 142.75], [1130.0, 84.92857142857144], [1134.0, 62.16666666666668], [1158.0, 169.84615384615384], [1154.0, 182.68750000000003], [1182.0, 179.93333333333334], [1178.0, 94.68571428571428], [1174.0, 115.48275862068968], [1170.0, 114.30769230769234], [1162.0, 216.64705882352942], [1166.0, 169.7], [1214.0, 155.86363636363637], [1210.0, 171.125], [1206.0, 129.42424242424246], [1202.0, 134.82142857142858], [1186.0, 190.0], [1190.0, 91.21428571428572], [1194.0, 132.49999999999997], [1198.0, 86.45945945945947], [1222.0, 190.7142857142857], [1218.0, 149.55], [1246.0, 143.58620689655177], [1242.0, 188.3125], [1238.0, 115.86842105263156], [1234.0, 178.90909090909093], [1226.0, 121.9047619047619], [1230.0, 49.03846153846153], [1266.0, 164.63888888888889], [1270.0, 199.76470588235296], [1278.0, 109.95454545454545], [1274.0, 134.69230769230768], [1250.0, 160.06666666666666], [1254.0, 193.9230769230769], [1258.0, 155.6923076923077], [1262.0, 109.99999999999997], [1286.0, 142.5], [1310.0, 117.44444444444444], [1306.0, 163.94117647058823], [1302.0, 141.26923076923077], [1282.0, 191.5], [1290.0, 171.89999999999998], [1294.0, 151.0588235294118], [1342.0, 110.33333333333334], [1338.0, 144.92307692307693], [1334.0, 100.48], [1330.0, 190.45454545454544], [1314.0, 192.94444444444446], [1318.0, 195.66666666666666], [1322.0, 159.0], [1326.0, 110.22033898305087], [1298.0, 168.09090909090907], [1350.0, 99.46808510638299], [1374.0, 51.85714285714286], [1370.0, 143.85000000000002], [1366.0, 116.33333333333333], [1346.0, 147.88888888888889], [1354.0, 65.2608695652174], [1358.0, 138.61111111111111], [1406.0, 98.78571428571428], [1402.0, 70.43396226415095], [1398.0, 204.69565217391303], [1394.0, 176.31249999999997], [1378.0, 164.66666666666666], [1382.0, 50.142857142857146], [1386.0, 105.11764705882354], [1390.0, 162.8181818181818], [1362.0, 87.48437499999999], [1414.0, 101.57142857142857], [1438.0, 70.61702127659576], [1434.0, 138.51724137931038], [1430.0, 143.15151515151513], [1410.0, 156.23076923076923], [1418.0, 169.15151515151516], [1422.0, 189.1304347826087], [1470.0, 112.5714285714286], [1466.0, 52.42857142857142], [1462.0, 224.27272727272728], [1458.0, 181.58333333333331], [1442.0, 159.16666666666666], [1446.0, 155.94444444444437], [1450.0, 112.16129032258063], [1454.0, 86.28947368421055], [1426.0, 105.57377049180327], [1478.0, 131.13513513513516], [1502.0, 216.99999999999997], [1498.0, 161.6923076923077], [1494.0, 58.33333333333333], [1474.0, 217.0], [1482.0, 161.54545454545453], [1486.0, 137.7142857142857], [1534.0, 172.0], [1530.0, 106.68085106382978], [1526.0, 128.8571428571429], [1522.0, 198.53571428571428], [1506.0, 100.39130434782611], [1510.0, 87.76470588235296], [1514.0, 184.10000000000002], [1518.0, 155.125], [1490.0, 182.38095238095238], [1542.0, 172.15624999999997], [1566.0, 171.75], [1562.0, 135.69767441860463], [1558.0, 116.53846153846152], [1538.0, 227.5], [1546.0, 150.08823529411762], [1550.0, 182.21739130434784], [1598.0, 162.44], [1594.0, 82.76666666666662], [1590.0, 141.49999999999997], [1586.0, 148.25], [1570.0, 118.66666666666663], [1574.0, 152.04999999999995], [1578.0, 213.25], [1582.0, 160.11764705882356], [1554.0, 75.81395348837212], [1606.0, 70.35999999999999], [1602.0, 125.25000000000001], [1630.0, 175.86666666666667], [1626.0, 152.58823529411765], [1622.0, 156.03846153846152], [1610.0, 106.12195121951218], [1614.0, 152.91666666666663], [1650.0, 132.93333333333334], [1654.0, 129.7826086956522], [1658.0, 230.52941176470588], [1662.0, 104.70370370370371], [1634.0, 140.45454545454544], [1638.0, 167.59999999999994], [1642.0, 107.57142857142857], [1646.0, 71.16666666666666], [1618.0, 141.11111111111111], [1670.0, 129.22727272727272], [1694.0, 186.71428571428567], [1690.0, 90.3888888888889], [1686.0, 148.37142857142854], [1666.0, 81.52173913043478], [1674.0, 195.00000000000003], [1678.0, 117.0], [1726.0, 71.81632653061224], [1722.0, 69.35616438356163], [1718.0, 221.07142857142858], [1714.0, 129.91304347826085], [1698.0, 101.95833333333333], [1702.0, 189.90909090909088], [1706.0, 77.21649484536078], [1710.0, 155.35294117647055], [1682.0, 100.75757575757575], [1734.0, 113.66101694915257], [1758.0, 166.1111111111111], [1754.0, 127.25806451612907], [1750.0, 153.89655172413788], [1730.0, 197.5625], [1738.0, 231.37500000000003], [1742.0, 184.68749999999997], [1790.0, 90.67999999999996], [1786.0, 131.42105263157896], [1782.0, 161.51282051282055], [1778.0, 136.42553191489367], [1762.0, 88.78846153846153], [1766.0, 205.8], [1770.0, 92.0649350649351], [1774.0, 181.24999999999994], [1746.0, 191.94736842105263], [1798.0, 151.05714285714285], [1822.0, 88.04109589041094], [1818.0, 202.9375], [1814.0, 85.57377049180327], [1794.0, 81.32911392405065], [1802.0, 141.86956521739128], [1806.0, 132.22448979591837], [1854.0, 140.5774647887324], [1850.0, 75.04000000000003], [1846.0, 109.72222222222221], [1842.0, 113.69230769230768], [1826.0, 121.20689655172418], [1830.0, 75.50000000000001], [1834.0, 100.18181818181816], [1838.0, 86.95555555555559], [1810.0, 177.46666666666664], [1862.0, 240.91666666666666], [1886.0, 97.84126984126988], [1882.0, 185.47619047619048], [1878.0, 94.08510638297876], [1858.0, 217.22222222222223], [1866.0, 145.5454545454545], [1870.0, 182.3793103448276], [1918.0, 115.92682926829268], [1914.0, 78.08771929824564], [1910.0, 128.19444444444446], [1906.0, 139.64150943396226], [1890.0, 91.10752688172043], [1894.0, 83.0], [1898.0, 149.84810126582278], [1902.0, 127.03124999999993], [1874.0, 144.97560975609753], [1926.0, 80.1451612903226], [1950.0, 22.346774193548395], [1946.0, 143.36363636363637], [1942.0, 98.8157894736842], [1922.0, 102.27692307692308], [1930.0, 93.66666666666664], [1934.0, 135.66666666666663], [1982.0, 187.39325842696627], [1978.0, 197.33054393305437], [1974.0, 221.46341463414637], [1970.0, 230.08906882591089], [1954.0, 23.845238095238088], [1958.0, 49.40384615384616], [1962.0, 189.19480519480518], [1966.0, 248.53333333333336], [1938.0, 192.08333333333331], [1990.0, 80.83050847457628], [1986.0, 65.76044568245129], [1994.0, 84.74614687216688], [1998.0, 68.99999999999999], [1031.0, 199.2857142857143], [1027.0, 198.2], [1055.0, 91.51724137931039], [1051.0, 127.0], [1047.0, 125.79166666666666], [1043.0, 126.04166666666667], [1035.0, 47.0], [1039.0, 176.5454545454546], [1075.0, 147.21428571428572], [1079.0, 188.00000000000003], [1083.0, 183.31818181818184], [1087.0, 110.95652173913045], [1059.0, 149.0], [1063.0, 86.55999999999997], [1067.0, 190.85714285714283], [1071.0, 154.65000000000003], [1099.0, 47.0], [1103.0, 43.090909090909086], [1119.0, 131.85714285714283], [1115.0, 165.07692307692307], [1111.0, 42.86666666666667], [1107.0, 40.5], [1091.0, 93.375], [1095.0, 123.37037037037034], [1151.0, 48.08333333333333], [1147.0, 109.9166666666667], [1143.0, 152.57894736842107], [1139.0, 113.96875000000003], [1123.0, 133.36666666666667], [1127.0, 100.40625000000003], [1131.0, 178.58333333333334], [1135.0, 199.25], [1159.0, 192.08333333333334], [1163.0, 185.4], [1155.0, 184.81818181818184], [1183.0, 83.92727272727274], [1179.0, 117.3478260869565], [1175.0, 191.08333333333334], [1171.0, 113.0], [1167.0, 121.45833333333333], [1215.0, 142.85294117647058], [1211.0, 112.00000000000001], [1207.0, 130.5357142857143], [1203.0, 120.19565217391305], [1187.0, 132.88571428571427], [1191.0, 127.3888888888889], [1195.0, 132.0], [1199.0, 147.2727272727273], [1223.0, 159.8888888888889], [1227.0, 118.36363636363636], [1219.0, 134.64285714285714], [1247.0, 112.71875000000001], [1243.0, 140.33333333333331], [1239.0, 154.28571428571428], [1235.0, 155.96666666666667], [1231.0, 61.00000000000001], [1267.0, 95.30232558139538], [1271.0, 114.53571428571432], [1275.0, 75.3653846153846], [1279.0, 187.13333333333333], [1251.0, 197.6], [1255.0, 176.57142857142856], [1259.0, 152.8235294117647], [1263.0, 185.53333333333333], [1287.0, 115.75], [1311.0, 152.49999999999997], [1307.0, 77.60377358490567], [1303.0, 154.125], [1283.0, 124.99999999999999], [1291.0, 67.22222222222223], [1295.0, 156.89473684210523], [1343.0, 144.66666666666669], [1339.0, 118.90000000000002], [1335.0, 147.11111111111111], [1331.0, 173.8965517241379], [1315.0, 156.44444444444446], [1319.0, 61.28846153846155], [1323.0, 76.05882352941178], [1327.0, 177.00000000000003], [1299.0, 173.95833333333334], [1351.0, 150.97058823529412], [1375.0, 155.80555555555554], [1371.0, 192.66666666666666], [1367.0, 163.55555555555554], [1347.0, 117.59090909090911], [1355.0, 114.10526315789474], [1359.0, 158.96551724137936], [1407.0, 107.4545454545454], [1403.0, 104.20000000000002], [1399.0, 136.20000000000002], [1395.0, 103.44444444444446], [1379.0, 207.0588235294118], [1383.0, 50.785714285714285], [1387.0, 168.17391304347825], [1391.0, 119.28571428571429], [1363.0, 188.30434782608694], [1415.0, 156.89583333333334], [1439.0, 210.0], [1435.0, 196.78571428571428], [1431.0, 163.83999999999997], [1411.0, 116.66666666666669], [1419.0, 122.39999999999995], [1423.0, 77.8], [1471.0, 197.04761904761907], [1467.0, 62.15686274509803], [1463.0, 98.13333333333337], [1459.0, 223.3448275862069], [1443.0, 201.03124999999997], [1447.0, 120.69047619047618], [1451.0, 130.0769230769231], [1455.0, 113.81081081081082], [1427.0, 194.36363636363635], [1479.0, 148.82352941176467], [1503.0, 113.04545454545456], [1499.0, 170.4347826086956], [1495.0, 156.95454545454544], [1475.0, 188.33333333333334], [1483.0, 180.5], [1487.0, 150.61538461538464], [1535.0, 118.13333333333333], [1531.0, 109.94736842105262], [1527.0, 84.85714285714285], [1523.0, 150.7368421052632], [1507.0, 140.0740740740741], [1511.0, 143.20000000000002], [1515.0, 83.50000000000001], [1519.0, 190.33333333333334], [1491.0, 177.68965517241378], [1543.0, 118.59259259259261], [1567.0, 177.25], [1563.0, 200.0], [1559.0, 202.81818181818184], [1539.0, 137.037037037037], [1547.0, 148.9722222222222], [1551.0, 191.85714285714286], [1599.0, 173.26315789473685], [1595.0, 136.2708333333333], [1591.0, 167.63999999999996], [1587.0, 189.76923076923077], [1571.0, 171.14285714285717], [1575.0, 196.42857142857142], [1579.0, 93.25714285714285], [1583.0, 167.4], [1555.0, 126.46875000000003], [1607.0, 170.375], [1631.0, 156.29999999999998], [1627.0, 167.70454545454547], [1623.0, 179.8], [1603.0, 93.10810810810813], [1611.0, 92.3835616438356], [1615.0, 166.89473684210526], [1663.0, 95.16666666666667], [1659.0, 143.972972972973], [1655.0, 195.1428571428571], [1651.0, 79.36363636363635], [1635.0, 174.0666666666667], [1639.0, 121.24074074074075], [1643.0, 62.33333333333334], [1647.0, 73.18518518518515], [1619.0, 171.33333333333331], [1671.0, 132.99999999999994], [1695.0, 99.36363636363633], [1691.0, 72.72093023255813], [1687.0, 183.8571428571429], [1667.0, 110.14285714285715], [1675.0, 74.50000000000003], [1679.0, 177.31578947368422], [1727.0, 184.5], [1723.0, 173.38709677419357], [1719.0, 133.17948717948724], [1715.0, 126.37209302325577], [1699.0, 176.47058823529412], [1703.0, 110.20833333333336], [1707.0, 121.71052631578948], [1711.0, 185.84615384615387], [1683.0, 185.72727272727275], [1735.0, 189.7619047619048], [1759.0, 134.22580645161293], [1755.0, 142.1034482758621], [1751.0, 133.38461538461536], [1731.0, 152.17391304347828], [1739.0, 110.06896551724135], [1743.0, 158.9433962264151], [1791.0, 228.86666666666667], [1787.0, 219.0952380952381], [1783.0, 88.72549019607844], [1779.0, 173.70588235294116], [1763.0, 125.58620689655179], [1767.0, 113.90625], [1771.0, 96.13793103448275], [1775.0, 72.68354430379746], [1747.0, 112.86440677966102], [1799.0, 95.78461538461538], [1823.0, 169.08], [1819.0, 127.97872340425532], [1815.0, 179.73170731707313], [1795.0, 81.06250000000001], [1803.0, 97.69642857142857], [1807.0, 166.26666666666668], [1855.0, 77.81034482758623], [1851.0, 87.10169491525423], [1847.0, 103.07272727272722], [1843.0, 93.35820895522387], [1827.0, 162.66666666666663], [1831.0, 62.56944444444445], [1835.0, 165.33333333333334], [1839.0, 128.0377358490566], [1811.0, 143.21428571428572], [1863.0, 75.3883495145631], [1887.0, 172.07692307692307], [1883.0, 157.83333333333337], [1879.0, 88.69999999999999], [1859.0, 142.34285714285707], [1867.0, 130.64705882352945], [1871.0, 186.07142857142856], [1895.0, 80.28125], [1891.0, 73.93333333333335], [1919.0, 141.68181818181822], [1915.0, 71.37967914438502], [1911.0, 87.49999999999999], [1907.0, 111.92708333333339], [1899.0, 211.39999999999998], [1903.0, 163.6551724137931], [1875.0, 75.85185185185186], [1927.0, 76.49523809523802], [1923.0, 211.95], [1951.0, 192.05882352941177], [1947.0, 170.95454545454547], [1943.0, 113.21917808219179], [1931.0, 106.48314606741569], [1935.0, 73.99444444444437], [1971.0, 227.8], [1975.0, 213.6875], [1979.0, 219.40625000000003], [1983.0, 144.3846153846154], [1955.0, 53.93103448275861], [1959.0, 11.24087591240877], [1963.0, 255.45000000000002], [1967.0, 244.9741379310345], [1939.0, 81.37349397590361], [1987.0, 75.82383419689116], [1991.0, 80.8994169096209], [1995.0, 77.6382978723404], [1999.0, 68.84850230414769], [1.0, 1.3333333333333333]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1934.2786749999987, 97.09307749999964]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 813333.3333333334, "minX": 1.58524512E12, "maxY": 1232353.5166666666, "series": [{"data": [[1.58524512E12, 1232353.5166666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58524512E12, 813333.3333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524512E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 97.09307749999964, "minX": 1.58524512E12, "maxY": 97.09307749999964, "series": [{"data": [[1.58524512E12, 97.09307749999964]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524512E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 97.08998249999993, "minX": 1.58524512E12, "maxY": 97.08998249999993, "series": [{"data": [[1.58524512E12, 97.08998249999993]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524512E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.13649250000000193, "minX": 1.58524512E12, "maxY": 0.13649250000000193, "series": [{"data": [[1.58524512E12, 0.13649250000000193]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524512E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58524512E12, "maxY": 1110.0, "series": [{"data": [[1.58524512E12, 1110.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58524512E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58524512E12, 69.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58524512E12, 86.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58524512E12, 74.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524512E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 49.0, "minX": 677.0, "maxY": 285.0, "series": [{"data": [[677.0, 285.0], [11328.0, 181.0], [14704.0, 133.0], [3849.0, 196.0], [15584.0, 124.0], [16129.0, 119.0], [18243.0, 108.0], [19408.0, 49.0], [20015.0, 99.0], [19770.0, 98.0], [20037.0, 97.0], [20646.0, 96.0], [22729.0, 84.0], [23506.0, 81.0], [6091.0, 198.0], [24047.0, 81.0], [24697.0, 69.0], [25601.0, 72.0], [27284.0, 77.0], [28060.0, 64.0], [7543.0, 224.0], [30052.0, 62.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30052.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 49.0, "minX": 677.0, "maxY": 285.0, "series": [{"data": [[677.0, 285.0], [11328.0, 181.0], [14704.0, 133.0], [3849.0, 196.0], [15584.0, 124.0], [16129.0, 119.0], [18243.0, 108.0], [19408.0, 49.0], [20015.0, 99.0], [19770.0, 98.0], [20037.0, 97.0], [20646.0, 96.0], [22729.0, 84.0], [23506.0, 81.0], [6091.0, 198.0], [24047.0, 81.0], [24697.0, 69.0], [25601.0, 72.0], [27284.0, 77.0], [28060.0, 64.0], [7543.0, 224.0], [30052.0, 62.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30052.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524512E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524512E12, 6666.666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524512E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524512E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524512E12, 6666.666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58524512E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524512E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524512E12, 6666.666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524512E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6666.666666666667, "minX": 1.58524512E12, "maxY": 6666.666666666667, "series": [{"data": [[1.58524512E12, 6666.666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58524512E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

